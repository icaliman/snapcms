{"version":3,"file":"generated.js","sources":["E:\\workspace\\snapcms\\node_modules\\racer-bundle\\node_modules\\browserify\\node_modules\\browser-pack\\_prelude.js","E:/workspace/snapcms/node_modules/d-bootstrap/dropdown/index.js","E:/workspace/snapcms/node_modules/d-bootstrap/index.js","E:/workspace/snapcms/node_modules/d-bootstrap/modal/index.js","E:/workspace/snapcms/node_modules/d-bootstrap/tabs/index.js","E:/workspace/snapcms/node_modules/derby/index.js","E:/workspace/snapcms/node_modules/derby/lib/App.js","E:/workspace/snapcms/node_modules/derby/lib/Controller.js","E:/workspace/snapcms/node_modules/derby/lib/Derby.js","E:/workspace/snapcms/node_modules/derby/lib/Dom.js","E:/workspace/snapcms/node_modules/derby/lib/Page.js","E:/workspace/snapcms/node_modules/derby/lib/_views.js","E:/workspace/snapcms/node_modules/derby/lib/components.js","E:/workspace/snapcms/node_modules/derby/lib/documentListeners.js","E:/workspace/snapcms/node_modules/derby/lib/eventmodel.js","E:/workspace/snapcms/node_modules/derby/lib/textDiff.js","E:/workspace/snapcms/node_modules/derby/node_modules/derby-templates/index.js","E:/workspace/snapcms/node_modules/derby/node_modules/derby-templates/lib/contexts.js","E:/workspace/snapcms/node_modules/derby/node_modules/derby-templates/lib/expressions.js","E:/workspace/snapcms/node_modules/derby/node_modules/derby-templates/lib/operatorFns.js","E:/workspace/snapcms/node_modules/derby/node_modules/derby-templates/lib/templates.js","E:/workspace/snapcms/node_modules/derby/node_modules/derby-templates/node_modules/saddle/index.js","E:/workspace/snapcms/node_modules/derby/node_modules/derby-templates/node_modules/serialize-object/index.js","E:/workspace/snapcms/node_modules/derby/node_modules/tracks/lib/History.js","E:/workspace/snapcms/node_modules/derby/node_modules/tracks/lib/browser.js","E:/workspace/snapcms/node_modules/derby/node_modules/tracks/lib/router.js","E:/workspace/snapcms/node_modules/derby/node_modules/tracks/node_modules/qs/index.js","E:/workspace/snapcms/node_modules/derby/node_modules/tracks/vendor/express/router/route.js","E:/workspace/snapcms/node_modules/derby/node_modules/tracks/vendor/express/utils.js","E:/workspace/snapcms/node_modules/racer-bundle/node_modules/browserify/node_modules/buffer/index.js","E:/workspace/snapcms/node_modules/racer-bundle/node_modules/browserify/node_modules/buffer/node_modules/base64-js/lib/b64.js","E:/workspace/snapcms/node_modules/racer-bundle/node_modules/browserify/node_modules/buffer/node_modules/ieee754/index.js","E:/workspace/snapcms/node_modules/racer-bundle/node_modules/browserify/node_modules/crypto-browserify/helpers.js","E:/workspace/snapcms/node_modules/racer-bundle/node_modules/browserify/node_modules/crypto-browserify/index.js","E:/workspace/snapcms/node_modules/racer-bundle/node_modules/browserify/node_modules/crypto-browserify/md5.js","E:/workspace/snapcms/node_modules/racer-bundle/node_modules/browserify/node_modules/crypto-browserify/rng.js","E:/workspace/snapcms/node_modules/racer-bundle/node_modules/browserify/node_modules/crypto-browserify/sha.js","E:/workspace/snapcms/node_modules/racer-bundle/node_modules/browserify/node_modules/crypto-browserify/sha256.js","E:/workspace/snapcms/node_modules/racer-bundle/node_modules/browserify/node_modules/events/events.js","E:/workspace/snapcms/node_modules/racer-bundle/node_modules/browserify/node_modules/path-browserify/index.js","E:/workspace/snapcms/node_modules/racer-bundle/node_modules/browserify/node_modules/process/browser.js","E:/workspace/snapcms/node_modules/racer-bundle/node_modules/browserify/node_modules/punycode/punycode.js","E:/workspace/snapcms/node_modules/racer-bundle/node_modules/browserify/node_modules/querystring-es3/decode.js","E:/workspace/snapcms/node_modules/racer-bundle/node_modules/browserify/node_modules/querystring-es3/encode.js","E:/workspace/snapcms/node_modules/racer-bundle/node_modules/browserify/node_modules/querystring-es3/index.js","E:/workspace/snapcms/node_modules/racer-bundle/node_modules/browserify/node_modules/url/url.js","E:/workspace/snapcms/node_modules/racer-highway/lib/browser.js","E:/workspace/snapcms/node_modules/racer/lib/Channel.js","E:/workspace/snapcms/node_modules/racer/lib/Model/Doc.js","E:/workspace/snapcms/node_modules/racer/lib/Model/LocalDoc.js","E:/workspace/snapcms/node_modules/racer/lib/Model/Model.js","E:/workspace/snapcms/node_modules/racer/lib/Model/Query.js","E:/workspace/snapcms/node_modules/racer/lib/Model/RemoteDoc.js","E:/workspace/snapcms/node_modules/racer/lib/Model/collections.js","E:/workspace/snapcms/node_modules/racer/lib/Model/connection.js","E:/workspace/snapcms/node_modules/racer/lib/Model/contexts.js","E:/workspace/snapcms/node_modules/racer/lib/Model/defaultFns.js","E:/workspace/snapcms/node_modules/racer/lib/Model/events.js","E:/workspace/snapcms/node_modules/racer/lib/Model/filter.js","E:/workspace/snapcms/node_modules/racer/lib/Model/fn.js","E:/workspace/snapcms/node_modules/racer/lib/Model/index.js","E:/workspace/snapcms/node_modules/racer/lib/Model/mutators.js","E:/workspace/snapcms/node_modules/racer/lib/Model/paths.js","E:/workspace/snapcms/node_modules/racer/lib/Model/ref.js","E:/workspace/snapcms/node_modules/racer/lib/Model/refList.js","E:/workspace/snapcms/node_modules/racer/lib/Model/setDiff.js","E:/workspace/snapcms/node_modules/racer/lib/Model/subscriptions.js","E:/workspace/snapcms/node_modules/racer/lib/Model/unbundle.js","E:/workspace/snapcms/node_modules/racer/lib/Racer.js","E:/workspace/snapcms/node_modules/racer/lib/index.js","E:/workspace/snapcms/node_modules/racer/lib/util.js","E:/workspace/snapcms/node_modules/racer/node_modules/arraydiff/index.js","E:/workspace/snapcms/node_modules/racer/node_modules/deep-is/index.js","E:/workspace/snapcms/node_modules/racer/node_modules/node-uuid/uuid.js","E:/workspace/snapcms/node_modules/racer/node_modules/share/lib/client/connection.js","E:/workspace/snapcms/node_modules/racer/node_modules/share/lib/client/doc.js","E:/workspace/snapcms/node_modules/racer/node_modules/share/lib/client/index.js","E:/workspace/snapcms/node_modules/racer/node_modules/share/lib/client/microevent.js","E:/workspace/snapcms/node_modules/racer/node_modules/share/lib/client/query.js","E:/workspace/snapcms/node_modules/racer/node_modules/share/lib/client/register.js","E:/workspace/snapcms/node_modules/racer/node_modules/share/node_modules/ottypes/lib/helpers.js","E:/workspace/snapcms/node_modules/racer/node_modules/share/node_modules/ottypes/lib/index.js","E:/workspace/snapcms/node_modules/racer/node_modules/share/node_modules/ottypes/lib/json0.js","E:/workspace/snapcms/node_modules/racer/node_modules/share/node_modules/ottypes/lib/simple.js","E:/workspace/snapcms/node_modules/racer/node_modules/share/node_modules/ottypes/lib/text-tp2.js","E:/workspace/snapcms/node_modules/racer/node_modules/share/node_modules/ottypes/lib/text.js","E:/workspace/snapcms/node_modules/racer/node_modules/share/node_modules/ottypes/lib/text0.js","E:\\workspace\\snapcms\\src\\app\\index.coffee"],"names":[],"mappings":"AAAA;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACbxxitlijJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACppCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrrxtrlxHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjnrlOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7fA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrnshlzkzbrJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/HA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3HA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtvnNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxzjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChxgztrtvnfvgnvoBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrtbpavQA,IAAA,UAAA;;AAAA,KAAA,GAAQ,OAAA,CAAQ,OAAR,CAAR,CAAA;;AAAA,GAEA,GAAM,MAAM,CAAC,OAAP,GAAiB,KAAK,CAAC,SAAN,CAAgB,KAAhB,EAAuB,UAAvB,CAFvB,CAAA;;AAIA,IAAA,CAAA,KAA6B,CAAC,IAAI,CAAC,YAAnC;AAAA,EAAA,MAAM,CAAC,GAAP,GAAa,GAAb,CAAA;CAJA;;AAAA,GAMG,CAAC,GAAJ,CAAQ,OAAA,CAAQ,aAAR,CAAR,CANA,CAAA;;AAAA,GAOG,CAAC,SAAJ,CAAc,MAAd,EAAsB,YAAtB,CAPA,CAAA;;AAAA,GAQG,CAAC,SAAJ,CAAc,MAAd,EAAsB,cAAtB,CARA,CAAA;;AAAA,GAUG,CAAC,SAAJ,CAAc,SAAA,GAAY,kBAA1B,CAVA,CAAA;;AAAA,GAWG,CAAC,UAAJ,CAAe,SAAA,GAAY,mBAA3B,CAXA,CAAA;;AAAA,GAaG,CAAC,GAAJ,CAAQ,GAAR,EAAa,SAAC,IAAD,GAAA;SACX,IAAI,CAAC,MAAL,CAAY,MAAZ,EADW;AAAA,CAAb,CAbA,CAAA","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error(\"Cannot find module '\"+o+\"'\")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","(function (__dirname){\nmodule.exports = Dropdown;\nfunction Dropdown() {}\nDropdown.prototype.view = __dirname;\n\nDropdown.prototype.create = function(model, dom) {\n  // Close on click outside of the dropdown\n  var dropdown = this;\n  dom.on('click', function(e) {\n    if (dropdown.toggleButton.contains(e.target)) return;\n    if (dropdown.menu.contains(e.target)) return;\n    model.set('open', false);\n  });\n};\n\nDropdown.prototype.toggle = function() {\n  this.model.set('open', !this.model.get('open'));\n};\n\nDropdown.prototype.select = function(option) {\n  this.model.set('value', optionValue(option));\n  this.model.set('open', false);\n};\n\nDropdown.prototype.label = function(value) {\n  var options = this.model.get('options') || [];\n  for (var i = 0, len = options.length; i < len; i++) {\n    var option = options[i];\n    if (value === optionValue(option)) {\n      return option.content;\n    }\n  }\n  return this.model.get('prompt') || 'Select';\n};\n\nfunction optionValue(option) {\n  return (option.hasOwnProperty('value')) ? option.value : option.content;\n}\n\n}).call(this,\"/node_modules\\\\d-bootstrap\\\\dropdown\")","(function (__dirname){\nmodule.exports = function(app, options) {\n  app.component(require('./dropdown'));\n  app.component(require('./modal'));\n  app.component(require('./tabs'));\n  app.loadStyles(__dirname + '/css/bootstrap.min');\n};\n\n}).call(this,\"/node_modules\\\\d-bootstrap\")","(function (__dirname){\nmodule.exports = Modal;\nfunction Modal() {}\nModal.prototype.view = __dirname;\n\nModal.prototype.create = function(model, dom) {\n  var modal = this;\n  dom.on('keydown', function(e) {\n    if (!model.get('show')) return;\n    if (e.keyCode === 27) {  // Escape\n      modal.hide('escape');\n    }\n  });\n};\n\nModal.prototype.show = function() {\n  var model = this.model;\n  this.emitDelayable('show', function() {\n    model.set('show', true);\n    setTimeout(function() { \n      model.set('faded', true);\n    }, 0);\n  });\n};\n\nModal.prototype.hide = function(action) {\n  var cancelled = this.emitCancellable('hide', action);\n  if (cancelled) return;\n  var model = this.model;\n  model.set('faded', false);\n  setTimeout(function() {\n    model.set('show', false);\n  }, 300);\n};\n\n}).call(this,\"/node_modules\\\\d-bootstrap\\\\modal\")","(function (__dirname){\nmodule.exports = Tabs;\nfunction Tabs() {}\nTabs.prototype.view = __dirname;\n\nTabs.prototype.init = function(model) {\n  model.setNull('selectedIndex', 0);\n};\n\nTabs.prototype.select = function(index) {\n  this.model.set('selectedIndex', index);\n};\n\n}).call(this,\"/node_modules\\\\d-bootstrap\\\\tabs\")","var Derby = require('./lib/Derby');\nmodule.exports = new Derby();\n","/*\n * App.js\n *\n * Provides the glue between views, controllers, and routes for an\n * application's functionality. Apps are responsible for creating pages.\n *\n */\n\nvar EventEmitter = require('events').EventEmitter;\nvar tracks = require('tracks');\nvar util = require('racer/lib/util');\nvar derbyTemplates = require('derby-templates');\nvar documentListeners = require('./documentListeners');\nvar Page = require('./Page');\nvar serializedViews = require('./_views');\n\nmodule.exports = App;\n\nfunction App(derby, name, filename) {\n  EventEmitter.call(this);\n  this.derby = derby;\n  this.name = name;\n  this.filename = filename;\n  this.Page = createAppPage();\n  this.proto = this.Page.prototype;\n  this.views = new derbyTemplates.templates.Views();\n  this.tracksRoutes = tracks.setup(this);\n  this.model = null;\n  this.page = null;\n  this._init();\n}\n\nfunction createAppPage() {\n  // Inherit from Page so that we can add controller functions as prototype\n  // methods on this app's pages\n  function AppPage() {\n    Page.apply(this, arguments);\n  }\n  AppPage.prototype = Object.create(Page.prototype);\n  return AppPage;\n}\n\nutil.mergeInto(App.prototype, EventEmitter.prototype);\n\n// Overriden on server\nApp.prototype._init = function() {\n  this._waitForAttach = true;\n  this._cancelAttach = false;\n  this.model = new this.derby.Model();\n  this.model.createConnection();\n  serializedViews(derbyTemplates, this.views);\n  // Must init async so that app.on('model') listeners can be added.\n  // Must also wait for content ready so that bundle is fully downloaded.\n  this._contentReady();\n};\nApp.prototype._finishInit = function() {\n  this.emit('model', this.model);\n  var script = this._getScript();\n  var data;\n  try {\n    data = JSON.parse(script.nextSibling.innerHTML);\n  } catch (err) {\n    var json = script.nextSibling && script.nextSibling.innerHTML;\n    this.emit('error', err, json);\n  }\n  util.isProduction = data.nodeEnv === 'production';\n  if (!util.isProduction) this._autoRefresh();\n  this.model.unbundle(data);\n  var page = this.createPage();\n  page.params = this.model.get('$render.params');\n  this.emit('ready', page);\n  this._waitForAttach = false;\n  // Instead of attaching, do a route and render if a link was clicked before\n  // the page finished attaching\n  if (this._cancelAttach) {\n    this.history.refresh();\n    return;\n  }\n  try {\n    // Attach to the currently rendered DOM. This will fail if there is any\n    // slight mismatch between the rendered HTML and the client-side render\n    page.attach();\n  } catch (err) {\n    // Since an attachment failure is *fatal* and could happen as a result of a\n    // browser extension like AdBlock, an invalid template, or a small bug in\n    // Derby or Saddle, re-render from scratch on production failures\n    if (util.isProduction) this.history.refresh();\n    this.emit('error', err);\n  }\n};\n// Modified from: https://github.com/addyosmani/jquery.parts/blob/master/jquery.documentReady.js\nApp.prototype._contentReady = function() {\n  // Is the DOM ready to be used? Set to true once it occurs.\n  var isReady = false;\n  var app = this;\n\n  // The ready event handler\n  function onDOMContentLoaded() {\n    if (document.addEventListener) {\n      document.removeEventListener('DOMContentLoaded', onDOMContentLoaded, false);\n    } else {\n      // we're here because readyState !== 'loading' in oldIE\n      // which is good enough for us to call the dom ready!\n      document.detachEvent('onreadystatechange', onDOMContentLoaded);\n    }\n    onDOMReady();\n  }\n\n  // Handle when the DOM is ready\n  function onDOMReady() {\n    // Make sure that the DOM is not already loaded\n    if (isReady) return;\n    // Make sure body exists, at least, in case IE gets a little overzealous (ticket #5443).\n    if (!document.body) return setTimeout(onDOMReady, 0);\n    // Remember that the DOM is ready\n    isReady = true;\n    // Make sure this is always async and then finishin init\n    setTimeout(function() {\n      app._finishInit();\n    }, 0);\n  }\n\n  // The DOM ready check for Internet Explorer\n  function doScrollCheck() {\n    if (isReady) return;\n    try {\n      // If IE is used, use the trick by Diego Perini\n      // http://javascript.nwbox.com/IEContentLoaded/\n      document.documentElement.doScroll('left');\n    } catch (err) {\n      setTimeout(doScrollCheck, 0);\n      return;\n    }\n    // and execute any waiting functions\n    onDOMReady();\n  }\n\n  // Catch cases where called after the browser event has already occurred.\n  if (document.readyState !== 'loading') return onDOMReady();\n\n  // Mozilla, Opera and webkit nightlies currently support this event\n  if (document.addEventListener) {\n    // Use the handy event callback\n    document.addEventListener('DOMContentLoaded', onDOMContentLoaded, false);\n    // A fallback to window.onload, that will always work\n    window.addEventListener('load', onDOMContentLoaded, false);\n    // If IE event model is used\n  } else if (document.attachEvent) {\n    // ensure firing before onload,\n    // maybe late but safe also for iframes\n    document.attachEvent('onreadystatechange', onDOMContentLoaded);\n    // A fallback to window.onload, that will always work\n    window.attachEvent('onload', onDOMContentLoaded);\n    // If IE and not a frame\n    // continually check to see if the document is ready\n    var toplevel;\n    try {\n      toplevel = window.frameElement == null;\n    } catch (err) {}\n    if (document.documentElement.doScroll && toplevel) {\n      doScrollCheck();\n    }\n  }\n};\n\nApp.prototype._getScript = function() {\n  return document.querySelector('script[src^=\"/derby/' + this.name + '\"]');\n};\n\nApp.prototype.use = util.use;\nApp.prototype.serverUse = util.serverUse;\n\nApp.prototype.loadViews = function() {};\n\nApp.prototype.loadStyles = function() {};\n\nApp.prototype.createPage = function() {\n  if (this.page) {\n    this.emit('destroyPage', this.page);\n    this.page.destroy();\n  }\n  var page = new this.Page(this, this.model);\n  this.page = page;\n  return page;\n};\n\nApp.prototype.onRoute = function(callback, page, next, done) {\n  if (this._waitForAttach) {\n    // Cancel any routing before the initial page attachment. Instead, do a\n    // render once derby is ready\n    this._cancelAttach = true;\n    return;\n  }\n  this.emit('route', page);\n  // HACK: To update render in transitional routes\n  page.model.set('$render.params', page.params);\n  page.model.set('$render.url', page.params.url);\n  page.model.set('$render.query', page.params.query);\n  // If transitional\n  if (done) {\n    var app = this;\n    var _done = function() {\n      app.emit('routeDone', page, 'transition');\n      done();\n    };\n    callback.call(page, page, page.model, page.params, next, _done);\n    return;\n  }\n  callback.call(page, page, page.model, page.params, next);\n};\n\nApp.prototype._autoRefresh = function() {\n  var app = this;\n  this.model.on('change', '$connection.state', function(state) {\n    if (state === 'connected') registerClient();\n  });\n  this.model.channel.on('derby:refreshViews', function(serializedViews) {\n    var fn = new Function('return ' + serializedViews)(); // jshint ignore:line\n    fn(derbyTemplates, app.views);\n    var ns = app.model.get('$render.ns');\n    app.page.render(ns);\n  });\n  function registerClient() {\n    var data = {name: app.name, hash: '{{DERBY_SCRIPT_HASH}}'};\n    app.model.channel.send('derby:app', data, function(err) {\n      if (!err) return;\n      // Reload in a timeout so that returning fetches have time to complete\n      // in case an onbeforeunload handler is being used\n      setTimeout(function() {\n        window.location = window.location;\n      }, 100);\n    });\n  }\n  registerClient();\n};\n\nutil.serverRequire(module, './App.server');\n","var EventEmitter = require('events').EventEmitter;\nvar util = require('racer/lib/util');\nvar Dom = require('./Dom');\n\nmodule.exports = Controller;\n\nfunction Controller(app, page, model) {\n  EventEmitter.call(this);\n  this.dom = new Dom(this);\n  this.app = app;\n  this.page = page;\n  this.model = model;\n  model.data.$controller = this;\n}\n\nutil.mergeInto(Controller.prototype, EventEmitter.prototype);\n\nController.prototype.emitCancellable = function() {\n  var cancelled = false;\n  function cancel() {\n    cancelled = true;\n  }\n\n  var args = Array.prototype.slice.call(arguments);\n  args.push(cancel);\n  this.emit.apply(this, args);\n\n  return cancelled;\n};\n\nController.prototype.emitDelayable = function() {\n  var args = Array.prototype.slice.call(arguments);\n  var callback = args.pop();\n\n  var delayed = false;\n  function delay() {\n    delayed = true;\n    return callback;\n  }\n\n  args.push(delay);\n  this.emit.apply(this, args);\n  if (!delayed) callback();\n\n  return delayed;\n};\n","/*\n * Derby.js\n * Meant to be the entry point for the framework.\n *\n */\n\nvar EventEmitter = require('events').EventEmitter;\nvar racer = require('racer');\nvar App = require('./App');\nvar Page = require('./Page');\nvar components = require('./components');\n\nmodule.exports = Derby;\n\nfunction Derby() {}\nDerby.prototype = racer;\n\nDerby.prototype.App = App;\nDerby.prototype.Page = Page;\nDerby.prototype.Component = components.Component;\n\nDerby.prototype.createApp = function(name, filename) {\n  return new App(this, name, filename);\n};\n\nif (!racer.util.isServer) {\n  require('./documentListeners').add(document);\n}\n\nracer.util.serverRequire(module, './Derby.server');\n","module.exports = Dom;\n\nfunction Dom(controller) {\n  this.controller = controller;\n  this._listeners = null;\n}\n\nDom.prototype._initListeners = function() {\n  var dom = this;\n  this.controller.on('destroy', function domOnDestroy() {\n    var listeners = dom._listeners;\n    if (!listeners) return;\n    for (var i = listeners.length; i--;) {\n      listeners[i].remove();\n    }\n    dom._listeners = null;\n  });\n  return this._listeners = [];\n};\n\nDom.prototype._listenerIndex = function(domListener) {\n  var listeners = this._listeners;\n  if (!listeners) return -1;\n  for (var i = listeners.length; i--;) {\n    if (listeners[i].equals(domListener)) return i;\n  }\n  return -1;\n};\n\nDom.prototype.addListener = function(type, target, listener, useCapture) {\n  if (typeof target === 'function') {\n    useCapture = listener;\n    listener = target;\n    target = document;\n  }\n  var domListener = new DomListener(type, target, listener, useCapture);\n  if (-1 === this._listenerIndex(domListener)) {\n    var listeners = this._listeners || this._initListeners();\n    listeners.push(domListener);\n  }\n  domListener.add();\n};\nDom.prototype.on = Dom.prototype.addListener;\n\nDom.prototype.once = function(type, target, listener, useCapture) {\n  if (typeof target === 'function') {\n    useCapture = listener;\n    listener = target;\n    target = document;\n  }\n  this.addListener(type, target, wrappedListener, useCapture);\n  var dom = this;\n  function wrappedListener() {\n    dom.removeListener(type, target, wrappedListener, useCapture);\n    return listener.apply(this, arguments);\n  }\n};\n\nDom.prototype.removeListener = function(type, target, listener, useCapture) {\n  if (typeof target === 'function') {\n    useCapture = listener;\n    listener = target;\n    target = document;\n  }\n  var domListener = new DomListener(type, target, listener, useCapture);\n  domListener.remove();\n  var i = this._listenerIndex(domListener);\n  if (i > -1) this._listeners.splice(i, 1);\n};\n\nfunction DomListener(type, target, listener, useCapture) {\n  this.type = type;\n  this.target = target;\n  this.listener = listener;\n  this.useCapture = !!useCapture;\n}\nDomListener.prototype.equals = function(domListener) {\n  return this.listener === domListener.listener &&\n    this.target === domListener.target &&\n    this.type === domListener.type &&\n    this.useCapture === domListener.useCapture;\n};\nDomListener.prototype.add = function() {\n  this.target.addEventListener(this.type, this.listener, this.useCapture);\n};\nDomListener.prototype.remove = function() {\n  this.target.removeEventListener(this.type, this.listener, this.useCapture);\n};\n","(function (global){\nvar derbyTemplates = require('derby-templates');\nvar contexts = derbyTemplates.contexts;\nvar expressions = derbyTemplates.expressions;\nvar templates = derbyTemplates.templates;\nvar util = require('racer/lib/util');\nvar EventModel = require('./eventmodel');\nvar textDiff = require('./textDiff');\nvar Controller = require('./Controller');\nvar documentListeners = require('./documentListeners');\n\nmodule.exports = Page;\n\nfunction Page(app, model, req, res) {\n  Controller.call(this, app, this, model);\n  this.req = req;\n  this.res = res;\n  this.params = null;\n  if (this.init) this.init(model);\n  this.context = this._createContext();\n  this._eventModel = null;\n  this._removeModelListeners = null;\n  this._components = {};\n  this._addListeners();\n}\n\n// Inherit from the global object so that global functions and constructors are\n// available for use as template helpers.\n//\n// It's important that the page controller doesn't have a parent, since this\n// could cause an infinite loop in controller function lookup\nPage.prototype = Object.create(global, {parent: {value: null}});\n\nutil.mergeInto(Page.prototype, Controller.prototype);\n\nPage.prototype.$bodyClass = function(ns) {\n  if (!ns) return;\n  var classNames = [];\n  var segments = ns.split(':');\n  for (var i = 0, len = segments.length; i < len; i++) {\n    var className = segments.slice(0, i + 1).join('-');\n    classNames.push(className);\n  }\n  return classNames.join(' ');\n};\n\nPage.prototype.$preventDefault = function(e) {\n  e.preventDefault();\n};\n\nPage.prototype.$stopPropagation = function(e) {\n  e.stopPropagation();\n};\n\nPage.prototype._setRenderParams = function(ns) {\n  this.model.set('$render.ns', ns);\n  this.model.set('$render.params', this.params);\n  this.model.set('$render.url', this.params && this.params.url);\n  this.model.set('$render.query', this.params && this.params.query);\n};\n\nPage.prototype._setRenderPrefix = function(ns) {\n  var prefix = (ns) ? ns + ':' : '';\n  this.model.set('$render.prefix', prefix);\n};\n\nPage.prototype.get = function(viewName, ns, unescaped) {\n  this._setRenderPrefix(ns);\n  var view = this.getView(viewName, ns);\n  return view.get(this.context, unescaped);\n};\n\nPage.prototype.getFragment = function(viewName, ns) {\n  this._setRenderPrefix(ns);\n  var view = this.getView(viewName, ns);\n  return view.getFragment(this.context);\n};\n\nPage.prototype.getView = function(viewName, ns) {\n  return this.app.views.find(viewName, ns);\n};\n\nPage.prototype.render = function(ns) {\n  this.app.emit('render', this);\n  this.context.pause();\n  this._setRenderParams(ns);\n  var titleFragment = this.getFragment('TitleElement', ns);\n  var bodyFragment = this.getFragment('BodyElement', ns);\n  var titleElement = document.getElementsByTagName('title')[0];\n  titleElement.parentNode.replaceChild(titleFragment, titleElement);\n  document.body.parentNode.replaceChild(bodyFragment, document.body);\n  this.context.unpause();\n  this.app.emit('routeDone', this, 'render');\n};\n\nPage.prototype.attach = function() {\n  this.context.pause();\n  var ns = this.model.get('$render.ns');\n  var titleView = this.getView('TitleElement', ns);\n  var bodyView = this.getView('BodyElement', ns);\n  var titleElement = document.getElementsByTagName('title')[0];\n  titleView.attachTo(titleElement.parentNode, titleElement, this.context);\n  bodyView.attachTo(document.body.parentNode, document.body, this.context);\n  if (this.create) this.create(this.model, this.dom);\n  this.context.unpause();\n};\n\nPage.prototype._createContext = function() {\n  var contextMeta = new contexts.ContextMeta();\n  contextMeta.views = this.app && this.app.views;\n  var context = new contexts.Context(contextMeta, this);\n  context.expression = new expressions.PathExpression([]);\n  context.alias = '#root';\n  return context;\n};\n\nPage.prototype._addListeners = function() {\n  var eventModel = this._eventModel = new EventModel();\n  this._addModelListeners(eventModel);\n  this._addContextListeners(eventModel);\n};\n\nPage.prototype.destroy = function() {\n  this.emit('destroy');\n  this._removeModelListeners();\n  for (var id in this._components) {\n    var component = this._components[id];\n    component.destroy();\n  }\n  // Remove all data, refs, listeners, and reactive functions\n  // for the previous page\n  var silentModel = this.model.silent();\n  silentModel.destroy('_page');\n  silentModel.destroy('$components');\n  // Unfetch and unsubscribe from all queries and documents\n  silentModel.unloadAll();\n};\n\nPage.prototype._addModelListeners = function(eventModel) {\n  var model = this.model;\n  if (!model) return;\n\n  var context = this.context;\n  var changeListener = model.on('change', '**', function onChange(path, value, previous, pass) {\n    var segments = util.castSegments(path.split('.'));\n    // The pass parameter is passed in for special handling of updates\n    // resulting from stringInsert or stringRemove\n    context.pause();\n    pass.previous = previous;\n    eventModel.set(segments, pass);\n    context.unpause();\n  });\n  var loadListener = model.on('load', '**', function onLoad(path) {\n    var segments = util.castSegments(path.split('.'));\n    context.pause();\n    eventModel.set(segments);\n    context.unpause();\n  });\n  var unloadListener = model.on('unload', '**', function onUnload(path) {\n    var segments = util.castSegments(path.split('.'));\n    context.pause();\n    eventModel.set(segments);\n    context.unpause();\n  });\n  var insertListener = model.on('insert', '**', function onInsert(path, index, values) {\n    var segments = util.castSegments(path.split('.'));\n    context.pause();\n    var array = model.get(path);\n    if (values.length < array.length) {\n      eventModel.insert(segments, index, values.length);\n    } else {\n      eventModel.set(segments);\n    }\n    context.unpause();\n  });\n  var removeListener = model.on('remove', '**', function onRemove(path, index, values) {\n    var segments = util.castSegments(path.split('.'));\n    context.pause();\n    var array = model.get(path);\n    if (array && array.length) {\n      eventModel.remove(segments, index, values.length);\n    } else {\n      eventModel.set(segments);\n    }\n    context.unpause();\n  });\n  var moveListener = model.on('move', '**', function onMove(path, from, to, howMany) {\n    var segments = util.castSegments(path.split('.'));\n    context.pause();\n    eventModel.move(segments, from, to, howMany);\n    context.unpause();\n  });\n\n  this._removeModelListeners = function() {\n    model.removeListener('change', changeListener);\n    model.removeListener('load', loadListener);\n    model.removeListener('unload', unloadListener);\n    model.removeListener('insert', insertListener);\n    model.removeListener('remove', removeListener);\n    model.removeListener('move', moveListener);\n  };\n};\n\nPage.prototype._addContextListeners = function(eventModel) {\n  this.context.meta.addBinding = addBinding;\n  this.context.meta.removeBinding = removeBinding;\n  this.context.meta.removeNode = removeNode;\n  this.context.meta.addItemContext = addItemContext;\n  this.context.meta.removeItemContext = removeItemContext;\n\n  function addItemContext(context) {\n    var segments = context.expression.resolve(context);\n    eventModel.addItemContext(segments, context);\n  }\n  function removeItemContext(context) {\n    // TODO\n  }\n  function addBinding(binding) {\n    patchTextBinding(binding);\n    var expressions = binding.template.expressions;\n    if (expressions) {\n      for (var i = 0, len = expressions.length; i < len; i++) {\n        addDependencies(eventModel, expressions[i], binding);\n      }\n    } else {\n      var expression = binding.template.expression;\n      var blockType = expression.meta && expression.meta.blockType;\n      if (blockType === 'with') return;\n      addDependencies(eventModel, expression, binding);\n    }\n  }\n  function removeBinding(binding) {\n    eventModel.removeBinding(binding);\n  }\n  function removeNode(node) {\n    var component = node.$markComponent;\n    if (component && !component.singleton) {\n      component.destroy();\n    }\n  }\n};\n\nfunction addDependencies(eventModel, expression, binding) {\n  var dependencies = expression.dependencies(binding.context);\n  if (!dependencies) return;\n  for (var i = 0, len = dependencies.length; i < len; i++) {\n    var dependency = dependencies[i];\n    if (dependency) eventModel.addBinding(dependency, binding);\n  }\n}\n\nfunction patchTextBinding(binding) {\n  if (\n    binding instanceof templates.AttributeBinding &&\n    binding.name === 'value' &&\n    binding.element.tagName === 'INPUT' &&\n    documentListeners.inputSupportsSelection(binding.element) &&\n    binding.template.expression.resolve(binding.context)\n  ) {\n    binding.update = textInputUpdate;\n\n  } else if (\n    binding instanceof templates.NodeBinding &&\n    binding.node.parentNode.tagName === 'TEXTAREA' &&\n    binding.template.expression.resolve(binding.context)\n  ) {\n    binding.update = textAreaUpdate;\n  }\n}\n\nfunction textInputUpdate(pass) {\n  textUpdate(this, this.element, pass);\n}\nfunction textAreaUpdate(pass) {\n  var element = this.node.parentNode;\n  if (element) textUpdate(this, element, pass);\n}\nfunction textUpdate(binding, element, pass) {\n  if (pass) {\n    if (pass.$event && pass.$event.target === element) {\n      return;\n    } else if (pass.$type === 'stringInsert') {\n      return textDiff.onStringInsert(element, pass.previous, pass.index, pass.text);\n    } else if (pass.$type === 'stringRemove') {\n      return textDiff.onStringRemove(element, pass.previous, pass.index, pass.howMany);\n    }\n  }\n\n  if (element.tagName === 'TEXTAREA') {\n    var template = binding.template;\n    var value = template.expression.get(binding.context);\n    return element.value = template.stringify(value);\n  }\n\n  binding.template.update(binding.context, binding);\n}\n\nutil.serverRequire(module, './Page.server');\n\n}).call(this,typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})","/*DERBY_SERIALIZED_VIEWS*/module.exports = function(derbyTemplates, views) {var expressions = derbyTemplates.expressions;var templates = derbyTemplates.templates;views.register('TitleElement', '<title><view name=\"{{$render.prefix}}Title\"></view></title>').template = new templates.Template([new templates.Element('title', void 0, [new templates.DynamicViewInstance(new templates.Template([new templates.DynamicText(new expressions.PathExpression(['$render', 'prefix'], new expressions.ExpressionMeta('$render.prefix'))), new templates.Text('Title')]), {})], void 0, false)]);views.register('BodyElement', '<body class=\"{{$bodyClass($render.ns)}}\"><view name=\"{{$render.prefix}}Body\"></view>').template = new templates.Template([new templates.Element('body', {'class': new templates.DynamicAttribute(new expressions.FnExpression(['$bodyClass'], [new expressions.PathExpression(['$render', 'ns'])], void 0, new expressions.ExpressionMeta('$bodyClass($render.ns)')))}, [new templates.DynamicViewInstance(new templates.Template([new templates.DynamicText(new expressions.PathExpression(['$render', 'prefix'], new expressions.ExpressionMeta('$render.prefix'))), new templates.Text('Body')]), {})], void 0, false, true)]);views.register('Title', '\\n{{_page.title}}\\n').template = new templates.Template([new templates.DynamicText(new expressions.PathExpression(['_page', 'title'], new expressions.ExpressionMeta('_page.title')))]);views.register('Body', '\\n  <view name=\"header\"></view>\\n  <view name=\"{{$render.ns}}\"></view>\\n  <view name=\"footer\" year=\"2014\"></view>\\n  <div>sdfgsdfgsdfgsdfgsdf</div>\\n').template = new templates.Template([new templates.ViewInstance('header', {}), new templates.DynamicViewInstance(new expressions.PathExpression(['$render', 'ns'], new expressions.ExpressionMeta('$render.ns')), {}), new templates.ViewInstance('footer', {'year': '2014'}), new templates.Element('div', void 0, [new templates.Text('sdfgsdfgsdfgsdfgsdf')], void 0, false)]);views.register('Tail', '').template = new templates.Template([]);views.register('dropdown:index', '\\n  <div class=\"dropdown {{@class}}{{if open}} open{{/if}}\">\\n    <button\\n      as=\"toggleButton\"\\n      on-click=\"toggle()\"\\n      id=\"dropdown-toggle{{id}}\"\\n      class=\"btn {{@buttonClass || \\'btn-default\\'}} dropdown-toggle\"\\n      type=\"button\">\\n      {{label(value)}} <span class=\"caret\"></span>\\n    </button>\\n    <ul as=\"menu\" class=\"dropdown-menu {{@menuClass}}\" role=\"menu\" aria-labelledby=\"dropdown-toggle{{id}}\">\\n      {{each @options}}\\n        <li role=\"presentation\" class=\"{{this.class}}\">\\n          <a on-click=\"select(this)\" role=\"menuitem\" tabindex=\"-1\">{{this.content}}</a>\\n        </li>\\n      {{/each}}\\n    </ul>\\n  </div>\\n\\n', {'arrays': 'option/options', 'element': 'dropdown'}).template = new templates.Template([new templates.Comment('dropdown:index', [new templates.ComponentMarker()]), new templates.Element('div', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('dropdown '), new templates.DynamicText(new expressions.AttributePathExpression('class', [], new expressions.ExpressionMeta('@class'))), new templates.ConditionalBlock([new expressions.PathExpression(['open'], new expressions.ExpressionMeta('if open', 'if'))], [[new templates.Text(' open')]])]))}, [new templates.Element('button', {'id': new templates.DynamicAttribute(new templates.Template([new templates.Text('dropdown-toggle'), new templates.DynamicText(new expressions.PathExpression(['id'], new expressions.ExpressionMeta('id')))])), 'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('btn '), new templates.DynamicText(new expressions.OperatorExpression('||', [new expressions.AttributePathExpression('buttonClass', []), new expressions.LiteralExpression('btn-default')], void 0, new expressions.ExpressionMeta('@buttonClass || \\'btn-default\\''))), new templates.Text(' dropdown-toggle')])), 'type': new templates.Attribute('button')}, [new templates.DynamicText(new expressions.FnExpression(['label'], [new expressions.PathExpression(['value'])], void 0, new expressions.ExpressionMeta('label(value)'))), new templates.Text(' '), new templates.Element('span', {'class': new templates.Attribute('caret')}, [], void 0, false)], [new templates.MarkupAs(['toggleButton']), new templates.ElementOn('click', new expressions.FnExpression(['toggle'], []))], false), new templates.Element('ul', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('dropdown-menu '), new templates.DynamicText(new expressions.AttributePathExpression('menuClass', [], new expressions.ExpressionMeta('@menuClass')))])), 'role': new templates.Attribute('menu'), 'aria-labelledby': new templates.DynamicAttribute(new templates.Template([new templates.Text('dropdown-toggle'), new templates.DynamicText(new expressions.PathExpression(['id'], new expressions.ExpressionMeta('id')))]))}, [new templates.EachBlock(new expressions.AttributePathExpression('options', [], new expressions.ExpressionMeta('each @options', 'each')), [new templates.Element('li', {'role': new templates.Attribute('presentation'), 'class': new templates.DynamicAttribute(new expressions.RelativePathExpression(['class'], new expressions.ExpressionMeta('this.class')))}, [new templates.Element('a', {'role': new templates.Attribute('menuitem'), 'tabindex': new templates.Attribute('-1'), 'href': new templates.Attribute('#')}, [new templates.DynamicText(new expressions.RelativePathExpression(['content'], new expressions.ExpressionMeta('this.content')))], [new templates.ElementOn('click', new expressions.FnExpression(['select'], [new expressions.RelativePathExpression([])])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false)], void 0, false)])], [new templates.MarkupAs(['menu'])], false)], void 0, false)]);views.register('modal:index', '\\n  <div class=\"modal fade{{if faded}} in{{/if}}\" style=\"{{if show}}display: block{{/if}}\">\\n    <div on-click=\"hide(\\'backdrop\\')\" class=\"modal-backdrop fade{{if faded}} in{{/if}}\"></div>\\n    <div class=\"modal-dialog\">\\n      <div class=\"modal-content\">\\n        <div class=\"modal-header\">\\n          <button on-click=\"hide(\\'close\\')\" type=\"button\" class=\"close\" aria-hidden=\"true\">&times;</button>\\n          <h4 class=\"modal-title\">{{@title}}</h4>\\n        </div>\\n        <div class=\"modal-body\">\\n          {{@content}}\\n        </div>\\n        <div class=\"modal-footer\">\\n          {{each @actions}}\\n            <button\\n              on-click=\"hide(this.value || this.content)\"\\n              type=\"button\"\\n              class=\"btn {{this.class || \\'btn-default\\'}}\">\\n              {{this.content}}\\n            </button>\\n          {{/each}}\\n        </div>\\n      </div>\\n    </div>\\n  </div>\\n\\n', {'arrays': 'action/actions', 'attributes': 'title', 'element': 'modal'}).template = new templates.Template([new templates.Comment('modal:index', [new templates.ComponentMarker()]), new templates.Element('div', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('modal fade'), new templates.ConditionalBlock([new expressions.PathExpression(['faded'], new expressions.ExpressionMeta('if faded', 'if'))], [[new templates.Text(' in')]])])), 'style': new templates.DynamicAttribute(new templates.ConditionalBlock([new expressions.PathExpression(['show'], new expressions.ExpressionMeta('if show', 'if'))], [[new templates.Text('display: block')]]))}, [new templates.Element('div', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('modal-backdrop fade'), new templates.ConditionalBlock([new expressions.PathExpression(['faded'], new expressions.ExpressionMeta('if faded', 'if'))], [[new templates.Text(' in')]])]))}, [], [new templates.ElementOn('click', new expressions.FnExpression(['hide'], [new expressions.LiteralExpression('backdrop')]))], false), new templates.Element('div', {'class': new templates.Attribute('modal-dialog')}, [new templates.Element('div', {'class': new templates.Attribute('modal-content')}, [new templates.Element('div', {'class': new templates.Attribute('modal-header')}, [new templates.Element('button', {'type': new templates.Attribute('button'), 'class': new templates.Attribute('close'), 'aria-hidden': new templates.Attribute('true')}, [new templates.Text('×')], [new templates.ElementOn('click', new expressions.FnExpression(['hide'], [new expressions.LiteralExpression('close')]))], false), new templates.Element('h4', {'class': new templates.Attribute('modal-title')}, [new templates.DynamicText(new expressions.AttributePathExpression('title', [], new expressions.ExpressionMeta('@title')))], void 0, false)], void 0, false), new templates.Element('div', {'class': new templates.Attribute('modal-body')}, [new templates.DynamicText(new expressions.AttributePathExpression('content', [], new expressions.ExpressionMeta('@content')))], void 0, false), new templates.Element('div', {'class': new templates.Attribute('modal-footer')}, [new templates.EachBlock(new expressions.AttributePathExpression('actions', [], new expressions.ExpressionMeta('each @actions', 'each')), [new templates.Element('button', {'type': new templates.Attribute('button'), 'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('btn '), new templates.DynamicText(new expressions.OperatorExpression('||', [new expressions.RelativePathExpression(['class']), new expressions.LiteralExpression('btn-default')], void 0, new expressions.ExpressionMeta('this.class || \\'btn-default\\'')))]))}, [new templates.DynamicText(new expressions.RelativePathExpression(['content'], new expressions.ExpressionMeta('this.content')))], [new templates.ElementOn('click', new expressions.FnExpression(['hide'], [new expressions.OperatorExpression('||', [new expressions.RelativePathExpression(['value']), new expressions.RelativePathExpression(['content'])])]))], false)])], void 0, false)], void 0, false)], void 0, false)], void 0, false)]);views.register('tabs:index', '\\n  <ul class=\"nav nav-tabs\">\\n    {{each @panes as #pane, #i}}\\n      <li class=\"{{if selectedIndex === #i}}active{{/if}}\">\\n        <a on-click=\"select(#i)\">{{#pane.title}}</a>\\n      </li>\\n    {{/each}}\\n  </ul>\\n  <div class=\"tab-content\">\\n    {{each @panes as #pane, #i}}\\n      <div class=\"tab-pane{{if selectedIndex === #i}} active{{/if}}\">\\n        {{#pane.content}}\\n      </div>\\n    {{/each}}\\n  </div>\\n\\n', {'arrays': 'pane/panes', 'element': 'tabs'}).template = new templates.Template([new templates.Comment('tabs:index', [new templates.ComponentMarker()]), new templates.Element('ul', {'class': new templates.Attribute('nav nav-tabs')}, [new templates.EachBlock(new expressions.AttributePathExpression('panes', [], new expressions.ExpressionMeta('each @panes as #pane, #i', 'each', void 0, '#pane', '#i')), [new templates.Element('li', {'class': new templates.DynamicAttribute(new templates.ConditionalBlock([new expressions.OperatorExpression('===', [new expressions.PathExpression(['selectedIndex']), new expressions.AliasPathExpression('#i', [])], void 0, new expressions.ExpressionMeta('if selectedIndex === #i', 'if'))], [[new templates.Text('active')]]))}, [new templates.Element('a', {'href': new templates.Attribute('#')}, [new templates.DynamicText(new expressions.AliasPathExpression('#pane', ['title'], new expressions.ExpressionMeta('#pane.title')))], [new templates.ElementOn('click', new expressions.FnExpression(['select'], [new expressions.AliasPathExpression('#i', [])])), new templates.ElementOn('click', new expressions.FnExpression(['$preventDefault'], [new expressions.PathExpression(['$event'])]))], false)], void 0, false)])], void 0, false), new templates.Element('div', {'class': new templates.Attribute('tab-content')}, [new templates.EachBlock(new expressions.AttributePathExpression('panes', [], new expressions.ExpressionMeta('each @panes as #pane, #i', 'each', void 0, '#pane', '#i')), [new templates.Element('div', {'class': new templates.DynamicAttribute(new templates.Template([new templates.Text('tab-pane'), new templates.ConditionalBlock([new expressions.OperatorExpression('===', [new expressions.PathExpression(['selectedIndex']), new expressions.AliasPathExpression('#i', [])], void 0, new expressions.ExpressionMeta('if selectedIndex === #i', 'if'))], [[new templates.Text(' active')]])]))}, [new templates.DynamicText(new expressions.AliasPathExpression('#pane', ['content'], new expressions.ExpressionMeta('#pane.content')))], void 0, false)])], void 0, false)]);views.register('home:index', '\\n  <p>Home</p>\\n  <input value=\"{{_page.message}}\"/>\\n  <div>{{_page.message}}</div>\\n').template = new templates.Template([new templates.Element('p', void 0, [new templates.Text('Home')], void 0, false), new templates.Element('input', {'value': new templates.DynamicAttribute(new expressions.PathExpression(['_page', 'message'], new expressions.ExpressionMeta('_page.message')))}, null, void 0, true), new templates.Element('div', void 0, [new templates.DynamicText(new expressions.PathExpression(['_page', 'message'], new expressions.ExpressionMeta('_page.message')))], void 0, false)]);views.register('header', '\\n  <h1>Header</h1>\\n').template = new templates.Template([new templates.Element('h1', void 0, [new templates.Text('Header')], void 0, false)]);views.register('footer', '\\n  <p>Footer {{@year}}</p>\\n').template = new templates.Template([new templates.Element('p', void 0, [new templates.Text('Footer '), new templates.DynamicText(new expressions.AttributePathExpression('year', [], new expressions.ExpressionMeta('@year')))], void 0, false)]);};/*DERBY_SERIALIZED_VIEWS_END*/","/*\n * components.js\n *\n * Components associate custom script functionality with a view. They can be\n * distributed as standalone modules containing templates, scripts, and styles.\n * They can also be used to modularize application functionality.\n *\n */\n\nvar path = require('path');\nvar util = require('racer/lib/util');\nvar derbyTemplates = require('derby-templates');\nvar templates = derbyTemplates.templates;\nvar expressions = derbyTemplates.expressions;\nvar App = require('./App');\nvar Controller = require('./Controller');\n\nexports.Component = Component;\nexports.ComponentFactory = ComponentFactory;\nexports.SingletonComponentFactory = SingletonComponentFactory;\nexports.createFactory = createFactory;\n\nfunction Component(parent, context, id, scope) {\n  this.parent = parent;\n  this.context = context;\n  this.id = id;\n  this._scope = scope;\n}\n\nutil.mergeInto(Component.prototype, Controller.prototype);\n\nComponent.prototype.destroy = function() {\n  this.emit('destroy');\n  this.model.removeContextListeners();\n  this.model.destroy();\n  delete this.page._components[this.id];\n  var components = this.page._eventModel.object.$components;\n  if (components) delete components.object[this.id];\n};\n\nComponent.prototype.get = function(viewName, unescaped) {\n  var view = this.getView(viewName);\n  return view.get(this.context, unescaped);\n};\n\nComponent.prototype.getFragment = function(viewName) {\n  var view = this.getView(viewName);\n  return view.getFragment(this.context);\n};\n\nComponent.prototype.getView = function(viewName) {\n  var contextView = this.context.getView();\n  return (viewName) ?\n    this.app.views.find(viewName, contextView.namespace) : contextView;\n};\n\nComponent.prototype.getAttribute = function(key) {\n  var attributeContext = this.context.forAttribute(key);\n  if (!attributeContext) return;\n  var value = attributeContext.attributes[key];\n  return value && expressions.renderValue(value, attributeContext);\n};\n\nComponent.prototype.setAttribute = function(key, value) {\n  this.context.parent.attributes[key] = value;\n};\n\nComponent.prototype.setNullAttribute = function(key, value) {\n  var attributes = this.context.parent.attributes;\n  if (attributes[key] == null) attributes[key] = value;\n};\n\nfunction initComponent(context, component, parent, model, id, scope) {\n  // Do generic controller initialization\n  var componentContext = context.componentChild(component);\n  Controller.call(component, parent.app, parent.page, model);\n  Component.call(component, parent, componentContext, id, scope);\n\n  // Do the user-specific initialization. The component constructor should be\n  // an empty function and the actual initialization code should be done in the\n  // component's init method. This means that we don't have to rely on users\n  // properly calling the Component constructor method and avoids having to\n  // play nice with how CoffeeScript extends class constructors\n  emitHooks(context, component);\n  component.emit('init', component);\n  if (component.init) component.init(model);\n\n  return componentContext;\n}\n\nfunction setAttributes(context, model) {\n  if (!context.attributes) return;\n  // Set attribute values on component model\n  for (var key in context.attributes) {\n    var attribute = context.attributes[key];\n    var segments = (\n      attribute instanceof templates.ParentWrapper &&\n      attribute.expression &&\n      attribute.expression.pathSegments(context)\n    );\n    if (segments) {\n      model.root.ref(model._at + '.' + key, segments.join('.'));\n    } else {\n      model.set(key, attribute);\n    }\n  }\n}\n\nfunction emitHooks(context, component) {\n  if (!context.hooks) return;\n  // Kick off hooks if view pointer specified `on` or `as` attributes\n  for (var i = 0, len = context.hooks.length; i < len; i++) {\n    context.hooks[i].emit(context, component);\n  }\n}\n\nfunction createFactory(constructor) {\n  return (constructor.prototype.singleton) ?\n    new SingletonComponentFactory(constructor) :\n    new ComponentFactory(constructor);\n}\n\nfunction ComponentFactory(constructor) {\n  this.constructor = constructor;\n}\nComponentFactory.prototype.init = function(context) {\n  var component = new this.constructor();\n\n  var parent = context.controller;\n  var id = context.id();\n  var scope = ['$components', id];\n  var model = parent.model.root.eventContext(component);\n  model._at = scope.join('.');\n  model.set('id', id);\n  setAttributes(context, model);\n  // Store a reference to the component's scope such that the expression\n  // getters are relative to the component\n  model.data = model.get();\n  parent.page._components[id] = component;\n\n  return initComponent(context, component, parent, model, id, scope);\n};\nComponentFactory.prototype.create = function(context) {\n  var component = context.controller;\n  component.emit('create', component);\n  // Call the component's create function after its view is rendered\n  if (component.create) {\n    component.create(component.model, component.dom);\n  }\n};\n\nfunction SingletonComponentFactory(constructor) {\n  this.constructor = constructor;\n  this.component = null;\n}\nSingletonComponentFactory.prototype.init = function(context) {\n  var componentContext;\n  if (this.component) {\n    componentContext = context.componentChild(this.component);\n    emitHooks(context, this.component);\n  } else {\n    this.component = new this.constructor();\n    var parent = context.controller.page;\n    var model = parent.model;\n    componentContext = initComponent(context, this.component, parent, model);\n  }\n  return componentContext;\n};\n// Don't call the create method for singleton components\nSingletonComponentFactory.prototype.create = function() {};\n\nApp.prototype.component = function(viewName, constructor) {\n  if (typeof viewName === 'function') {\n    constructor = viewName;\n    viewName = null;\n  }\n\n  // Inherit from Component\n  extendComponent(constructor);\n\n  // Load template view from filename\n  if (constructor.prototype.view) {\n    var viewFilename = constructor.prototype.view;\n    viewName = constructor.prototype.name || basename(viewFilename, '.html');\n    this.loadViews(viewFilename, viewName);\n\n  } else if (!viewName) {\n    if (constructor.prototype.name) {\n      viewName = constructor.prototype.name;\n      var view = this.views.register(viewName);\n      view.template = templates.emptyTemplate;\n    } else {\n      throw new Error('No view name specified for component');\n    }\n  }\n\n  // Associate the appropriate view with the component type\n  var view = this.views.find(viewName);\n  if (!view) {\n    var message = this.views.findErrorMessage(viewName);\n    throw new Error(message);\n  }\n  view.componentFactory = createFactory(constructor);\n\n  // Make chainable\n  return this;\n};\n\nfunction extendComponent(constructor) {\n  // Don't do anything if the constructor already extends Component\n  if (constructor.prototype instanceof Component) return;\n  // Otherwise, replace its prototype with an instance of Component\n  var oldPrototype = constructor.prototype;\n  constructor.prototype = new Component();\n  util.mergeInto(constructor.prototype, oldPrototype);\n}\nfunction basename(filename, ext) { filename = filename.replace(/\\\\/g, '/'); return path.basename(filename, ext);}function basename(filename, ext) { filename = filename.replace(/\\\\/g, '/'); return path.basename(filename, ext);}","var textDiff = require('./textDiff');\n\nexports.add = addDocumentListeners;\nexports.inputSupportsSelection = inputSupportsSelection;\n\n// http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#do-not-apply\n// TODO: Date types support\nfunction inputSupportsSelection(input) {\n  var type = input.type;\n  return (\n    type === 'text' ||\n    type === 'search' ||\n    type === 'url' ||\n    type === 'tel' ||\n    type === 'password'\n  );\n}\nfunction inputIsNumberValue(input) {\n  var type = input.type;\n  return (type === 'number' || (type === 'range' && !input.multiple));\n}\nfunction inputValue(input) {\n  return inputIsNumberValue(input) ? input.valueAsNumber : input.value;\n}\n\nfunction addDocumentListeners(doc) {\n  doc.addEventListener('input', documentInput, true);\n  doc.addEventListener('change', documentChange, true);\n}\n\nfunction documentInput(e) {\n  var target = e.target;\n\n  if (target.tagName === 'INPUT') {\n    var binding = target.$bindAttributes && target.$bindAttributes.value;\n    if (!binding || binding.isUnbound()) return;\n\n    if (inputSupportsSelection(target)) {\n      var pass = {$event: e};\n      textDiffBinding(binding, target.value, pass);\n    } else {\n      var value = inputValue(target);\n      binding.template.expression.set(binding.context, value);\n    }\n\n  } else if (target.tagName === 'TEXTAREA' && target.childNodes.length === 1) {\n    var binding = target.firstChild && target.firstChild.$bindNode;\n    if (!binding || binding.isUnbound()) return;\n\n    var pass = {$event: e};\n    textDiffBinding(binding, target.value, pass);\n  }\n}\n\nfunction documentChange(e) {\n  var target = e.target;\n  var bindAttributes = target.$bindAttributes;\n\n  if (target.tagName === 'INPUT') {\n    var binding = target.$bindAttributes && target.$bindAttributes.checked;\n    if (!binding || binding.isUnbound()) return;\n    binding.template.expression.set(binding.context, target.checked);\n\n  } else if (target.tagName === 'SELECT') {\n    setOptionBindings(target);\n  }\n}\n\nfunction textDiffBinding(binding, value, pass) {\n  var expression = binding.template.expression;\n  var segments = expression.pathSegments(binding.context);\n  if (segments) {\n    var model = binding.context.controller.model.pass(pass);\n    textDiff.onTextInput(model, segments, value);\n  } else if (expression.set) {\n    expression.set(binding.context, value);\n  }\n}\n\nfunction setOptionBindings(parent) {\n  for (var node = parent.firstChild; node; node = node.nextSibling) {\n    if (node.tagName === 'OPTION') {\n      var binding = node.$bindAttributes && node.$bindAttributes.selected;\n      if (!binding || binding.isUnbound()) continue;\n      binding.template.expression.set(binding.context, node.selected);\n    } else if (node.hasChildNodes()) {\n      setOptionBindings(node);\n    }\n  }\n}\n","var expressions = require('derby-templates').expressions;\n\n// The many trees of bindings:\n//\n// - Model tree, containing your actual data. Eg:\n//    {users:{fred:{age:40}, wilma:{age:37}}}\n//\n// - Event model tree, whose structure mirrors the model tree. The event model\n//   tree lets us annotate the model tree with listeners which fire when events\n//   change. I think there are three types of listeners:\n//\n//   1. Reference binding binds to whatever is referred to by the path. Eg,\n//   {{each items as item}} binds item by reference as it goes through the\n//   list.\n//   2. Fixed path bindings explicitly bind to whatever is at that path\n//   regardless of how the model changes underneath the event model\n//   3. Listen on a subtree and fire when anything in the subtree changes. This\n//   is used for custom functions.\n//\n// {{foo.id}} would listen on the fixed path ['foo', 'id'].\n//\n//\n// - Context tree represents the changing (embedded) contexts of the templating\n//   engine. This maps to the tree of templates and allows templates to reference\n//   anything in any of their enclosing template scopes.\n//\n\nmodule.exports = EventModel;\n\n// The code here uses object-based set pattern where objects are keyed using\n// sequentially generated IDs.\nvar nextId = 1;\n\nfunction BindingMeta() {\n  this.id = nextId++;\n  this.removed = false;\n  this.eventModels = {};\n}\n\n\n// A binding object is something with update(), insert()/move()/remove() defined.\n\n\n// Given x[y] with model.get(y) == 5:\n//  item = 5\n//  segments = ['y']\n//  outside = the EventModel for x.\n//\n// Note that item could be a Context or another ModelRef - eg:\n//\n// {{ each foo as bar }} ... {{ x[bar] }}  -or-  {{ x[y[z]] }}\nfunction ModelRef(model, item, segments, outside) {\n  this.id = nextId++;\n\n  // We need a reference to the model & our segment list so we can update our\n  // value.\n  this.model = model;\n  this.segments = segments;\n\n  // Our current value.\n  this.item = item;\n\n  // outside is a reference to the EventModel of the thing on the lhs of the\n  // brackets. For example, in x[y].z, outside is the EventModel of x.\n  this.outside = outside;\n\n  // result is the EventModel of the evaluated version of the brackets. In\n  // x[y].z, its the EventModel of x[y].\n  this.result = outside.child(item).refChild(this);\n}\n\nModelRef.prototype.update = function() {\n  var segments = expressions.pathSegments(this.segments);\n  var newItem = expressions.lookup(segments, this.model.data);\n  if (this.item === newItem) return;\n\n  // First remove myself.\n  delete this.outside.child(this.item).refChildren[this.id];\n\n  this.item = newItem;\n\n  var container = this.outside.child(this.item);\n  // I want to just call refChild but that would create a new EM. Instead I\n  // want to just implant my current EM there.\n  if (!container.refChildren) container.refChildren = new RefChildrenMap();\n  container.refChildren[this.id] = this.result;\n\n  // Finally, update all the bindings in the tree.\n  this.result.update();\n};\n\n\nfunction RefOutMap() {}\nfunction RefChildrenMap() {}\nfunction BindingsMap() {}\nfunction ItemContextsMap() {}\n\nfunction EventModel() {\n  this.id = nextId++;\n\n  // Most of these won't ever be filled in, so I'm just leaving them null.\n  //\n  // These contain our EventModel children.\n  this.object = null;\n  this.array = null;\n\n  // This contains any EventModel children which have floating references.\n  this.arrayByReference = null;\n\n  // If the data stored here is ever used to lookup other values, this is an\n  // object mapping remote child ID -> ref.\n  //\n  // Eg given x[y], y.refOut[x.id] = <Binding>\n  this.refOut = null;\n\n  // This is a map from ref id -> event model for events bound to this\n  // EventModel but via a ref. We could just merge them into the main tree, but\n  // this way they're easy to move.\n  //\n  // Eg, given x[y] (y=1), x.1.refChildren[ref id] is an EventModel.\n  this.refChildren = null;\n\n  this.bindings = null;\n\n  // Item contexts are contexts which need their item number changed as this\n  // EventModel object moves around its surrounding list.\n  this.itemContexts = null;\n}\n\nEventModel.prototype.refChild = function(ref) {\n  if (!this.refChildren) this.refChildren = new RefChildrenMap();\n  var id = ref.id;\n\n  if (!this.refChildren[id]) {\n    this.refChildren[id] = new EventModel();\n  }\n  return this.refChildren[id];\n};\n\nEventModel.prototype.arrayLookup = function(model, segmentsBefore, segmentsInside) {\n  var segments = expressions.pathSegments(segmentsInside);\n  var item = expressions.lookup(segments, model.data);\n\n  var source = this.at(segmentsInside);\n\n  // What the array currently resolves to. Given x[y] with y=1, container is\n  // the EM for x\n  var container = this.at(segmentsBefore);\n\n  if (!source.refOut) source.refOut = new RefOutMap();\n\n  var ref = source.refOut[container.id];\n  if (ref == null) {\n    ref = new ModelRef(model, item, segmentsInside, container);\n    source.refOut[container.id] = ref;\n  }\n\n  return ref;\n};\n\n// Returns the EventModel node of the named child.\nEventModel.prototype.child = function(segment) {\n  var container;\n  if (typeof segment === 'string') {\n    // Object\n    if (!this.object) this.object = {};\n    container = this.object;\n\n  } else if (typeof segment === 'number') {\n    // Array by value\n    if (!this.array) this.array = [];\n    container = this.array;\n\n  } else if (segment instanceof ModelRef) {\n    // Array reference. We'll need to lookup the child with the right\n    // value, then look inside its ref children for the right EventModel\n    // (so we can update it later). This is pretty janky, but should be\n    // *correct* even in the face of recursive array accessors.\n    //\n    // This will calculate it based on the current segment values, but refs\n    // cache the EM anyway.\n    //return this.child(segment.item).refChild(segment);\n    return segment.result;\n\n  } else {\n    // Array by reference\n    if (!this.arrayByReference) this.arrayByReference = [];\n    container = this.arrayByReference;\n    segment = segment.item;\n  }\n\n  return container[segment] || (container[segment] = new EventModel());\n};\n\n// Returns the EventModel node at the given segments list. Note that although\n// EventModel nodes are unique, its possible for multiple EventModel nodes to\n// refer to the same section of the model because of references.\n//\n// If you want to update the bindings that refer to a specific path, use\n// each().\n//\n// EventModel objects are created as needed.\nEventModel.prototype.at = function(segments) {\n  // For unbound dependancies.\n  if (segments == null) return this;\n\n  var eventModel = this;\n\n  for (var i = 0; i < segments.length; i++) {\n    eventModel = eventModel.child(segments[i]);\n  }\n\n  return eventModel;\n};\n\nEventModel.prototype.isEmpty = function() {\n  if (hasKeys(this.dependancies)) return false;\n  if (hasKeys(this.itemContexts)) return false;\n\n  if (this.object) {\n    if (hasKeys(this.object)) return false;\n    this.object = null;\n  }\n\n  if (this.arrayByReference) {\n    for (var i = 0; i < this.arrayByReference.length; i++) {\n      if (this.arrayByReference[i] != null) return false;\n    }\n    this.arrayByReference = null;\n  }\n\n  if (this.array) {\n    for (var i = 0; i < this.array.length; i++) {\n      if (this.array[i] != null) return false;\n    }\n    this.array = null;\n  }\n\n  return true;\n};\n\nfunction hasKeys(object) {\n  for (var key in object) {\n    return true;\n  }\n  return false;\n}\n\n\n// **** Updating the EventModel\n\nEventModel.prototype._addItemContext = function(context) {\n  if (!context._id) context._id = nextId++;\n  if (!this.itemContexts) this.itemContexts = new ItemContextsMap();\n  this.itemContexts[context._id] = context;\n};\n\nEventModel.prototype._removeItemContext = function(context) {\n  if (this.itemContexts) {\n    delete this.itemContexts[context._id];\n  }\n};\n\nEventModel.prototype._addBinding = function(binding) {\n  var meta = binding.meta || (binding.meta = new BindingMeta());\n  var bindings = this.bindings || (this.bindings = new BindingsMap());\n  bindings[meta.id] = binding;\n  meta.eventModels[this.id] = this;\n};\n\n// This is the main hook to add bindings to the event model tree. It should\n// only be called on the root EventModel object.\nEventModel.prototype.addBinding = function(segments, binding) {\n  this.at(segments)._addBinding(binding);\n};\n\n// This is used for objects (contexts in derby's case) that have a .item\n// property which refers to an array index.\nEventModel.prototype.addItemContext = function(segments, context) {\n  this.at(segments)._addItemContext(context);\n};\n\nEventModel.prototype.removeBinding = function(binding) {\n  var meta = binding.meta;\n  if (!meta) return;\n  meta.removed = true;\n  for (var id in meta.eventModels) {\n    var eventModel = meta.eventModels[id];\n    if (eventModel.bindings) delete eventModel.bindings[meta.id];\n  }\n  meta.eventModels = null;\n};\n\nEventModel.prototype._each = function(segments, pos, fn) {\n  // Our refChildren are effectively merged into this object.\n  if (this.refChildren) {\n    for (var id in this.refChildren) {\n      this.refChildren[id]._each(segments, pos, fn);\n    }\n  }\n\n  if (segments.length === pos) {\n    fn(this);\n    return;\n  }\n\n  var segment = segments[pos];\n  var child;\n  if (typeof segment === 'string') {\n    // Object. Just recurse into our objects set. Its possible to rewrite this\n    // function to simply loop in the case of object lookups, but I don't think\n    // it'll buy us much.\n    child = this.object && this.object[segment];\n    if (child) child._each(segments, pos + 1, fn);\n\n  } else {\n    // Number. Recurse both into the fixed list and the reference list.\n    child = this.array && this.array[segment];\n    if (child) child._each(segments, pos + 1, fn);\n\n    child = this.arrayByReference && this.arrayByReference[segment];\n    if (child) child._each(segments, pos + 1, fn);\n  }\n};\n\n// Called when the scalar value at the path changes. This only calls update()\n// on this node. See update() below if you want to update entire\n// subtrees.\nEventModel.prototype.localUpdate = function(pass) {\n  if (this.bindings) {\n    for (var id in this.bindings) {\n      var binding = this.bindings[id];\n      if (!binding.removed) binding.update(pass);\n    }\n  }\n\n  // If our value changed, we also need to update anything that depends on it\n  // via refOut.\n  if (this.refOut) {\n    for (var id in this.refOut) {\n      var ref = this.refOut[id];\n      ref.update();\n    }\n  }\n};\n\n// This is used when an object subtree is replaced / removed.\nEventModel.prototype.update = function(pass) {\n  this.localUpdate(pass);\n\n  if (this.object) {\n    for (var key in this.object) {\n      this.object[key].update();\n    }\n  }\n\n  if (this.array) {\n    for (var i = 0; i < this.array.length; i++) {\n      if (this.array[i]) this.array[i].update();\n    }\n  }\n\n  if (this.arrayByReference) {\n    for (var i = 0; i < this.arrayByReference.length; i++) {\n      this.arrayByReference[i].update();\n    }\n  }\n};\n\n// Updates the indexes in itemContexts of our children in the range of\n// [from, to). from and to both optional.\nEventModel.prototype._updateChildItemContexts = function(from, to) {\n  if (!this.arrayByReference) return;\n\n  if (from == null) from = 0;\n  if (to == null) to = this.arrayByReference.length;\n\n  for (var i = from; i < to; i++) {\n    var contexts = this.arrayByReference[i] &&\n      this.arrayByReference[i].itemContexts;\n    if (contexts) {\n      for (var key in contexts) {\n        contexts[key].item = i;\n      }\n    }\n  }\n};\n\n// Updates our array-by-value values. They have to recursively update every\n// binding in their children. Sad.\nEventModel.prototype._updateArray = function(from, to) {\n  if (!this.array) return;\n\n  if (from == null) from = 0;\n  if (to == null) to = this.array.length;\n\n  for (var i = from; i < to; i++) {\n    if (this.array[i]) this.array[i].update();\n  }\n};\n\nEventModel.prototype._updateObject = function() {\n  if (this.object) {\n    for (var key in this.object) {\n      this.object[key].update();\n    }\n  }\n};\n\nEventModel.prototype._set = function(pass) {\n  // This just updates anything thats bound to the whole subtree. An alternate\n  // implementation could be passed in the new value at this node (which we\n  // cache), then compare with the old version and only update parts of the\n  // subtree which are relevant. I don't know if thats an important\n  // optimization - it really depends on your use case.\n  this.update(pass);\n};\n\n// Insert into this EventModel node.\nEventModel.prototype._insert = function(index, howMany) {\n  // Update fixed paths\n  this._updateArray(index);\n\n  // Update relative paths\n  if (this.arrayByReference && this.arrayByReference.length > index) {\n    // Shift the actual items in the array references array.\n\n    // This probably isn't the best way to implement insert. Other options are\n    // using concat() on slices or though constructing a temporary array and\n    // using splice.call. Hopefully if this method is slow it'll come up during\n    // profiling.\n    for (var i = 0; i < howMany; i++) {\n      this.arrayByReference.splice(index, 0, null);\n    }\n\n    // Update the path in the contexts\n    this._updateChildItemContexts(index + howMany);\n  }\n\n  // Finally call our bindings.\n  if (this.bindings) {\n    for (var id in this.bindings) {\n      var binding = this.bindings[id];\n      binding.insert(index, howMany);\n    }\n  }\n  this._updateObject();\n};\n\n// Remove howMany child elements from this EventModel at index.\nEventModel.prototype._remove = function(index, howMany) {\n  // Update fixed paths. Both the removed items and items after it may have changed.\n  this._updateArray(index);\n\n  if (this.arrayByReference) {\n    // Update relative paths. First throw away all the children which have been removed.\n    this.arrayByReference.splice(index, howMany);\n\n    this._updateChildItemContexts(index);\n  }\n\n  // Call bindings.\n  if (this.bindings) {\n    for (var id in this.bindings) {\n      var binding = this.bindings[id];\n      binding.remove(index, howMany);\n    }\n  }\n  this._updateObject();\n};\n\n// Move howMany items from `from` to `to`.\nEventModel.prototype._move = function(from, to, howMany) {\n  // first points to the first element that was moved. end points to the list\n  // element past the end of the changed region.\n  var first, end;\n  if (from < to) {\n    first = from;\n    end = to + howMany;\n  } else {\n    first = to;\n    end = from + howMany;\n  }\n\n  // Update fixed paths.\n  this._updateArray(first, end);\n\n  // Update relative paths\n  var arr = this.arrayByReference;\n  if (arr && arr.length > first) {\n    // Remove from the old location\n    var values = arr.splice(from, howMany);\n\n    // Insert at the new location\n    arr.splice.apply(arr, [to, 0].concat(values));\n\n    // Update the path in the contexts\n    this._updateChildItemContexts(first, end);\n  }\n\n  // Finally call our bindings.\n  if (this.bindings) {\n    for (var id in this.bindings) {\n      var binding = this.bindings[id];\n      binding.move(from, to, howMany);\n    }\n  }\n  this._updateObject();\n};\n\n\n// Helpers.\n\nEventModel.prototype.mutate = function(segments, fn) {\n  // This finds & returns a list of all event models which exist and could match\n  // the specified path. The path cannot contain contexts like derby expression\n  // segment lists (just because I don't think thats a useful feature and its not\n  // implemented)\n  this._each(segments, 0, fn);\n\n  // Also emit all mutations as sets on star paths, which are how dependencies\n  // for view helper functions are represented. They should react to a path\n  // or any child path being modified\n  for (var i = 0, len = segments.length; i++ < len;) {\n    var wildcardSegments = segments.slice(0, i);\n    wildcardSegments.push('*');\n    this._each(wildcardSegments, 0, childSetWildcard);\n  }\n};\n\nfunction childSetWildcard(child) {\n  child._set();\n}\n\nEventModel.prototype.set = function(segments, pass) {\n  this.mutate(segments, function childSet(child) {\n    child._set(pass);\n  });\n};\n\nEventModel.prototype.insert = function(segments, index, howMany) {\n  this.mutate(segments, function childInsert(child) {\n    child._insert(index, howMany);\n  });\n};\n\nEventModel.prototype.remove = function(segments, index, howMany) {\n  this.mutate(segments, function childRemove(child) {\n    child._remove(index, howMany);\n  });\n};\n\nEventModel.prototype.move = function(segments, from, to, howMany) {\n  this.mutate(segments, function childMove(child) {\n    child._move(from, to, howMany);\n  });\n};\n","exports.onStringInsert = onStringInsert;\nexports.onStringRemove = onStringRemove;\nexports.onTextInput = onTextInput;\n\nfunction onStringInsert(el, previous, index, text) {\n  function transformCursor(cursor) {\n    return (index < cursor) ? cursor + text.length : cursor;\n  }\n  previous || (previous = '');\n  var newText = previous.slice(0, index) + text + previous.slice(index);\n  replaceText(el, newText, transformCursor);\n}\n\nfunction onStringRemove(el, previous, index, howMany) {\n  function transformCursor(cursor) {\n    return (index < cursor) ? cursor - Math.min(howMany, cursor - index) : cursor;\n  }\n  previous || (previous = '');\n  var newText = previous.slice(0, index) + previous.slice(index + howMany);\n  replaceText(el, newText, transformCursor);\n}\n\nfunction replaceText(el, newText, transformCursor) {\n  var selectionStart = transformCursor(el.selectionStart);\n  var selectionEnd = transformCursor(el.selectionEnd);\n\n  var scrollTop = el.scrollTop;\n  el.value = newText;\n  if (el.scrollTop !== scrollTop) {\n    el.scrollTop = scrollTop;\n  }\n  if (document.activeElement === el) {\n    el.selectionStart = selectionStart;\n    el.selectionEnd = selectionEnd;\n  }\n}\n\nfunction onTextInput(model, segments, value) {\n  var previous = model._get(segments) || '';\n  if (previous === value) return;\n  var start = 0;\n  while (previous.charAt(start) === value.charAt(start)) {\n    start++;\n  }\n  var end = 0;\n  while (\n    previous.charAt(previous.length - 1 - end) === value.charAt(value.length - 1 - end) &&\n    end + start < previous.length &&\n    end + start < value.length\n  ) {\n    end++;\n  }\n\n  if (previous.length !== start + end) {\n    var howMany = previous.length - start - end;\n    model._stringRemove(segments, start, howMany);\n  }\n  if (value.length !== start + end) {\n    var inserted = value.slice(start, value.length - end);\n    model._stringInsert(segments, start, inserted);\n  }\n}\n","exports.contexts = require('./lib/contexts');\nexports.expressions = require('./lib/expressions');\nexports.operatorFns = require('./lib/operatorFns');\nexports.templates = require('./lib/templates');\n","exports.ContextMeta = ContextMeta;\nexports.Context = Context;\n\nfunction noop() {}\n\n// TODO:\n// Implement removeItemContext\n\nfunction ContextMeta() {\n  this.addBinding = noop;\n  this.removeBinding = noop;\n  this.removeNode = noop;\n  this.addItemContext = noop;\n  this.removeItemContext = noop;\n  this.views = null;\n  this.idNamespace = '';\n  this.idCount = 0;\n  this.pending = [];\n  this.pauseCount = 0;\n}\n\nfunction Context(meta, controller, parent, unbound, expression, item, view, attributes, hooks) {\n  // Required properties //\n\n  // Properties which are globally inherited for the entire page\n  this.meta = meta;\n  // The page or component. Must have a `model` property with a `data` property\n  this.controller = controller;\n\n  // Optional properties //\n\n  // Containing context\n  this.parent = parent;\n  // Boolean set to true when bindings should be ignored\n  this.unbound = unbound;\n  // The expression for a block\n  this.expression = expression;\n  // Alias name for the given expression\n  this.alias = expression && expression.meta.as;\n  // Alias name for the index or iterated key\n  this.keyAlias = expression && expression.meta.keyAs;\n\n  // For Context::eachChild\n  // The index of the each at render time\n  this.item = item;\n\n  // For Context::viewChild\n  // Reference to the current view\n  this.view = view;\n  // Attribute values passed to the view instance\n  this.attributes = attributes;\n  // MarkupHooks to be called on create of a component\n  this.hooks = hooks;\n\n  // Used in EventModel\n  this._id = null;\n}\n\nContext.prototype.id = function() {\n  var count = ++this.meta.idCount;\n  return this.meta.idNamespace + '_' + count.toString(36);\n};\n\nContext.prototype.addBinding = function(binding) {\n  var expression = binding.template.expression;\n  if (expression ? expression.isUnbound(this) : this.unbound) return;\n  this.meta.addBinding(binding);\n};\nContext.prototype.removeBinding = function(binding) {\n  this.meta.removeBinding(binding);\n};\nContext.prototype.removeNode = function(node) {\n  this.meta.removeNode(node);\n};\n\nContext.prototype.child = function(expression) {\n  // Set or inherit the binding mode\n  var blockType = expression.meta.blockType;\n  var unbound = (blockType === 'unbound') ? true :\n    (blockType === 'bound') ? false :\n    this.unbound;\n  return new Context(this.meta, this.controller, this, unbound, expression);\n};\n\nContext.prototype.componentChild = function(component) {\n  return new Context(this.meta, component, this, this.unbound);\n};\n\n// Make a context for an item in an each block\nContext.prototype.eachChild = function(index) {\n  var context = new Context(this.meta, this.controller, this, this.unbound, this.expression, index);\n  this.meta.addItemContext(context);\n  return context;\n};\n\nContext.prototype.viewChild = function(view, attributes, hooks) {\n  return new Context(this.meta, this.controller, this, this.unbound, null, null, view, attributes, hooks);\n};\n\nContext.prototype.forRelative = function(expression) {\n  return (expression.meta && expression.meta.blockType) ? this.parent : this;\n};\n\n// Returns the closest context which defined the named alias\nContext.prototype.forAlias = function(alias) {\n  var context = this;\n  while (context) {\n    if (context.alias === alias || context.keyAlias === alias) return context;\n    context = context.parent;\n  }\n};\n\n// Returns the closest containing context for a view attribute name or nothing\nContext.prototype.forAttribute = function(attribute) {\n  var context = this;\n  while (context) {\n    // Find the closest context associated with a view\n    if (context.view) {\n      var attributes = context.attributes;\n      if (!attributes) return;\n      if (attributes.hasOwnProperty(attribute)) return context;\n      // If the attribute isn't found, but the attributes inherit, continue\n      // looking in the next closest view context\n      if (!attributes.inherit && !attributes.extend) return;\n    }\n    context = context.parent;\n  }\n};\n\nContext.prototype.forViewParent = function() {\n  var context = this;\n  while (context) {\n    // Find the closest view\n    if (context.view) return context.parent;\n    context = context.parent;\n  }\n};\n\nContext.prototype.getView = function() {\n  var context = this;\n  while (context) {\n    // Find the closest view\n    if (context.view) return context.view;\n    context = context.parent;\n  }\n};\n\n// Returns the `this` value for a context\nContext.prototype.get = function() {\n  return (this.expression) ? this.expression.get(this) : this.controller.model.data;\n};\n\nContext.prototype.pause = function() {\n  this.meta.pauseCount++;\n};\n\nContext.prototype.unpause = function() {\n  if (--this.meta.pauseCount) return;\n  this.flush();\n};\n\nContext.prototype.flush = function() {\n  var pending = this.meta.pending;\n  var len = pending.length;\n  if (!len) return;\n  this.meta.pending = [];\n  for (var i = 0; i < len; i++) {\n    pending[i].run();\n  }\n};\n\nContext.prototype.queueCreate = function(object) {\n  this.meta.pending.push(new PendingCreate(object, this));\n};\n\nfunction PendingCreate(object, context) {\n  this.object = object;\n  this.context = context;\n}\nPendingCreate.prototype.run = function() {\n  this.object.create(this.context);\n};\n","(function (global){\nvar serializeObject = require('serialize-object');\nvar operatorFns = require('./operatorFns');\nvar templates = require('./templates');\n\nexports.lookup = lookup;\nexports.templateTruthy = templateTruthy;\nexports.pathSegments = pathSegments;\nexports.renderValue = renderValue;\nexports.ExpressionMeta = ExpressionMeta;\n\nexports.Expression = Expression;\nexports.LiteralExpression = LiteralExpression;\nexports.PathExpression = PathExpression;\nexports.RelativePathExpression = RelativePathExpression;\nexports.AliasPathExpression = AliasPathExpression;\nexports.AttributePathExpression = AttributePathExpression;\nexports.BracketsExpression = BracketsExpression;\nexports.FnExpression = FnExpression;\nexports.OperatorExpression = OperatorExpression;\nexports.NewExpression = NewExpression;\nexports.SequenceExpression = SequenceExpression;\n\nfunction lookup(segments, value) {\n  if (!segments) return value;\n\n  for (var i = 0, len = segments.length; i < len; i++) {\n    if (value == null) return value;\n    value = value[segments[i]];\n  }\n  return value;\n}\n\n// Unlike JS, `[]` is falsey. Otherwise, truthiness is the same as JS\nfunction templateTruthy(value) {\n  return (Array.isArray(value)) ? value.length > 0 : !!value;\n}\n\nfunction pathSegments(segments) {\n  var result = [];\n  for (var i = 0; i < segments.length; i++) {\n    var segment = segments[i];\n    result[i] = (typeof segment === 'object') ? segment.item : segment;\n  }\n  return result;\n}\n\nfunction renderValue(value, context) {\n  return (typeof value !== 'object') ? value :\n    (value instanceof templates.Template) ? renderTemplate(value, context) :\n    (Array.isArray(value)) ? renderArray(value, context) :\n    renderObject(value, context);\n}\nfunction renderTemplate(value, context) {\n  var i = 1000;\n  while (value instanceof templates.Template) {\n    if (!i--) throw new Error('Maximum template render passes exceeded');\n    value = value.get(context, true);\n  }\n  return value;\n}\nfunction renderArray(array, context) {\n  for (var i = 0, len = array.length; i < len; i++) {\n    if (hasTemplateProperty(array[i])) {\n      return renderArrayProperties(array, context);\n    }\n  }\n  return array;\n}\nfunction renderObject(object, context) {\n  return (hasTemplateProperty(object)) ?\n    renderObjectProperties(object, context) : object;\n}\nfunction hasTemplateProperty(object) {\n  if (typeof object !== 'object') return false;\n  if (global.Node && object instanceof global.Node) return false;\n  for (var key in object) {\n    if (object[key] instanceof templates.Template) return true;\n  }\n  return false;\n}\nfunction renderArrayProperties(array, context) {\n  var out = [];\n  for (var i = 0, len = array.length; i < len; i++) {\n    var item = renderObject(array[i], context);\n    out.push(item);\n  }\n  return out;\n}\nfunction renderObjectProperties(object, context) {\n  var out = {};\n  for (var key in object) {\n    var value = object[key];\n    out[key] = renderTemplate(value, context);\n  }\n  return out;\n}\n\nfunction ExpressionMeta(source, blockType, isEnd, as, keyAs, unescaped, bindType, valueType) {\n  this.source = source;\n  this.blockType = blockType;\n  this.isEnd = isEnd;\n  this.as = as;\n  this.keyAs = keyAs;\n  this.unescaped = unescaped;\n  this.bindType = bindType;\n  this.valueType = valueType;\n}\nExpressionMeta.prototype.module = 'expressions';\nExpressionMeta.prototype.type = 'ExpressionMeta';\nExpressionMeta.prototype.serialize = function() {\n  return serializeObject.instance(\n    this\n  , this.source\n  , this.blockType\n  , this.isEnd\n  , this.as\n  , this.keyAs\n  , this.unescaped\n  , this.bindType\n  , this.valueType\n  );\n};\n\nfunction Expression(meta) {\n  this.meta = meta;\n}\nExpression.prototype.module = 'expressions';\nExpression.prototype.type = 'Expression';\nExpression.prototype.serialize = function() {\n  return serializeObject.instance(this, this.meta);\n};\nExpression.prototype.toString = function() {\n  return this.meta && this.meta.source;\n};\nExpression.prototype.truthy = function(context) {\n  var blockType = this.meta.blockType;\n  if (blockType === 'else') return true;\n  var value = this.get(context, true);\n  var truthy = templateTruthy(value);\n  return (blockType === 'unless') ? !truthy : truthy;\n};\nExpression.prototype.get = function() {};\n// Return the expression's segment list with context objects\nExpression.prototype.resolve = function() {};\n// Return a list of segment lists or null\nExpression.prototype.dependencies = function() {};\n// Return the pathSegments that the expression currently resolves to or null\nExpression.prototype.pathSegments = function(context) {\n  var segments = this.resolve(context);\n  return segments && pathSegments(segments);\n};\nExpression.prototype.set = function(context, value) {\n  var segments = this.pathSegments(context);\n  if (!segments) throw new Error('Expression does not support setting');\n  context.controller.model._set(segments, value);\n};\nExpression.prototype._getPatch = function(context, value) {\n  if (this.meta && this.meta.blockType && value instanceof templates.Template) {\n    value = value.get(context, true);\n  }\n  return (context && context.expression === this && context.item != null) ?\n    value && value[context.item] : value;\n};\nExpression.prototype._resolvePatch = function(context, segments) {\n  return (context && context.expression === this && context.item != null) ?\n    segments.concat(context) : segments;\n};\nExpression.prototype.isUnbound = function(context) {\n  // If the template being rendered has an explicit bindType keyword, such as:\n  // {{unbound #item.text}}\n  var bindType = this.meta && this.meta.bindType;\n  if (bindType === 'unbound') return true;\n  if (bindType === 'bound') return false;\n  // Otherwise, inherit from the context\n  return context.unbound;\n};\n\n\nfunction LiteralExpression(value, meta) {\n  this.value = value;\n  this.meta = meta;\n}\nLiteralExpression.prototype = new Expression();\nLiteralExpression.prototype.type = 'LiteralExpression';\nLiteralExpression.prototype.serialize = function() {\n  return serializeObject.instance(this, this.value, this.meta);\n};\nLiteralExpression.prototype.get = function(context) {\n  return this._getPatch(context, this.value);\n};\n\nfunction PathExpression(segments, meta) {\n  this.segments = segments;\n  this.meta = meta;\n}\nPathExpression.prototype = new Expression();\nPathExpression.prototype.type = 'PathExpression';\nPathExpression.prototype.serialize = function() {\n  return serializeObject.instance(this, this.segments, this.meta);\n};\nPathExpression.prototype.get = function(context) {\n  var value = lookup(this.segments, context.controller.model.data);\n  return this._getPatch(context, value);\n};\nPathExpression.prototype.resolve = function(context) {\n  var segments = concat(context.controller._scope, this.segments);\n  return this._resolvePatch(context, segments);\n};\nPathExpression.prototype.dependencies = function(context, forInnerPath) {\n  return outerDependency(this, context, forInnerPath);\n};\n\nfunction RelativePathExpression(segments, meta) {\n  this.segments = segments;\n  this.meta = meta;\n}\nRelativePathExpression.prototype = new Expression();\nRelativePathExpression.prototype.type = 'RelativePathExpression';\nRelativePathExpression.prototype.serialize = function() {\n  return serializeObject.instance(this, this.segments, this.meta);\n};\nRelativePathExpression.prototype.get = function(context) {\n  var relativeContext = context.forRelative(this);\n  var value = relativeContext.get();\n  if (this.segments.length) {\n    if (value instanceof templates.Template) value = value.get(relativeContext, true);\n    value = lookup(this.segments, value);\n  }\n  return this._getPatch(context, value);\n};\nRelativePathExpression.prototype.resolve = function(context) {\n  var relativeContext = context.forRelative(this);\n  var base = (relativeContext.expression) ?\n    relativeContext.expression.resolve(relativeContext) :\n    [];\n  if (!base) return;\n  var segments = base.concat(this.segments);\n  return this._resolvePatch(relativeContext, segments);\n};\nRelativePathExpression.prototype.dependencies = function(context, forInnerPath) {\n  // Return inner dependencies from our ancestor\n  // (e.g., {{ with foo[bar] }} ... {{ this.x }} has 'bar' as a dependency.)\n  var relativeContext = context.forRelative(this);\n  var inner = relativeContext.expression &&\n    relativeContext.expression.dependencies(relativeContext, true);\n  var outer = outerDependency(this, context, forInnerPath);\n  return concat(outer, inner);\n};\n\nfunction AliasPathExpression(alias, segments, meta) {\n  this.alias = alias;\n  this.segments = segments;\n  this.meta = meta;\n}\nAliasPathExpression.prototype = new Expression();\nAliasPathExpression.prototype.type = 'AliasPathExpression';\nAliasPathExpression.prototype.serialize = function() {\n  return serializeObject.instance(this, this.alias, this.segments, this.meta);\n};\nAliasPathExpression.prototype.get = function(context) {\n  var aliasContext = context.forAlias(this.alias);\n  if (!aliasContext) return;\n  if (aliasContext.keyAlias === this.alias) {\n    return aliasContext.item;\n  }\n  var value = aliasContext.get();\n  if (this.segments.length) {\n    if (value instanceof templates.Template) value = value.get(aliasContext, true);\n    value = lookup(this.segments, value);\n  }\n  return this._getPatch(context, value);\n};\nAliasPathExpression.prototype.resolve = function(context) {\n  var aliasContext = context.forAlias(this.alias);\n  if (!aliasContext) return;\n  if (aliasContext.keyAlias === this.alias) return;\n  var base = aliasContext.expression.resolve(aliasContext);\n  if (!base) return;\n  var segments = base.concat(this.segments);\n  return this._resolvePatch(context, segments);\n};\nAliasPathExpression.prototype.dependencies = function(context, forInnerPath) {\n  var aliasContext = context.forAlias(this.alias);\n  if (!aliasContext) return;\n  var inner = aliasContext.expression.dependencies(aliasContext, true);\n  var outer = (aliasContext.keyAlias === this.alias) ?\n    // For keyAliases, use a dependency of the entire list, so that it will\n    // always update when the list changes in any way. This is over-binding,\n    // but this would otherwise need complex special casing\n    outerDependency(aliasContext.parent.expression, aliasContext.parent, forInnerPath) :\n    outerDependency(this, context, forInnerPath);\n  return concat(outer, inner);\n};\n\nfunction AttributePathExpression(attribute, segments, meta) {\n  this.attribute = attribute;\n  this.segments = segments;\n  this.meta = meta;\n}\nAttributePathExpression.prototype = new Expression();\nAttributePathExpression.prototype.type = 'AttributePathExpression';\nAttributePathExpression.prototype.serialize = function() {\n  return serializeObject.instance(this, this.attribute, this.segments, this.meta);\n};\nAttributePathExpression.prototype.get = function(context) {\n  var attributeContext = context.forAttribute(this.attribute);\n  if (!attributeContext) return;\n  var value = attributeContext.attributes[this.attribute];\n  if (this.segments.length) {\n    if (value instanceof templates.Template) value = value.get(attributeContext, true);\n    value = lookup(this.segments, value);\n  }\n  return this._getPatch(context, value);\n};\nAttributePathExpression.prototype.resolve = function(context) {\n  var attributeContext = context.forAttribute(this.attribute);\n  // Attributes are either a ParentWrapper or a literal value\n  var value = attributeContext && attributeContext.attributes[this.attribute];\n  var base = value && (typeof value.resolve === 'function') &&\n    value.resolve(attributeContext);\n  if (!base) return;\n  var segments = base.concat(this.segments);\n  return this._resolvePatch(context, segments);\n};\nAttributePathExpression.prototype.dependencies = function(context, forInnerPath) {\n  var attributeContext = context.forAttribute(this.attribute);\n  // Attributes are either a ParentWrapper or a literal value\n  var value = attributeContext && attributeContext.attributes[this.attribute];\n  var inner = value && (typeof value.dependencies === 'function') &&\n    value.dependencies(attributeContext, true);\n  var outer = outerDependency(this, context, forInnerPath);\n  return concat(outer, inner);\n};\n\nfunction BracketsExpression(before, inside, afterSegments, meta) {\n  this.before = before;\n  this.inside = inside;\n  this.afterSegments = afterSegments;\n  this.meta = meta;\n}\nBracketsExpression.prototype = new Expression();\nBracketsExpression.prototype.type = 'BracketsExpression';\nBracketsExpression.prototype.serialize = function() {\n  return serializeObject.instance(this, this.before, this.inside, this.afterSegments, this.meta);\n};\nBracketsExpression.prototype.get = function(context) {\n  var inside = this.inside.get(context);\n  if (inside == null) return;\n  var before = this.before.get(context);\n  if (!before) return;\n  var base = before[inside];\n  var value = (this.afterSegments) ? lookup(this.afterSegments, base) : base;\n  return this._getPatch(context, value);\n};\nBracketsExpression.prototype.resolve = function(context) {\n  // Get and split the current value of the expression inside the brackets\n  var inside = this.inside.get(context);\n  if (inside == null) return;\n\n  // Concat the before, inside, and optional after segments\n  var base = this.before.resolve(context);\n  if (!base) return;\n  var segments = (this.afterSegments) ?\n    base.concat(inside, this.afterSegments) :\n    base.concat(inside);\n  return this._resolvePatch(context, segments);\n};\nBracketsExpression.prototype.dependencies = function(context, forInnerPath) {\n  var before = this.before.dependencies(context, true);\n  var inner = this.inside.dependencies(context);\n  var outer = outerDependency(this, context, forInnerPath);\n  return concat(concat(outer, inner), before);\n};\n\nfunction FnExpression(segments, args, afterSegments, meta) {\n  this.segments = segments;\n  this.args = args;\n  this.afterSegments = afterSegments;\n  this.meta = meta;\n  var parentSegments = segments && segments.slice();\n  this.lastSegment = parentSegments && parentSegments.pop();\n  this.parentSegments = (parentSegments && parentSegments.length) ? parentSegments : null;\n}\nFnExpression.prototype = new Expression();\nFnExpression.prototype.type = 'FnExpression';\nFnExpression.prototype.serialize = function() {\n  return serializeObject.instance(this, this.segments, this.args, this.afterSegments, this.meta);\n};\nFnExpression.prototype.get = function(context) {\n  var value = this.apply(context);\n  // Lookup property underneath computed value if needed\n  if (this.afterSegments) {\n    value = lookup(this.afterSegments, value);\n  }\n  return this._getPatch(context, value);\n};\nFnExpression.prototype.apply = function(context, extraInputs) {\n  var controller = context.controller;\n  var fn, parent;\n  while (controller) {\n    parent = (this.parentSegments) ?\n      lookup(this.parentSegments, controller) :\n      controller;\n    fn = parent && parent[this.lastSegment];\n    if (fn) break;\n    controller = controller.parent;\n  }\n  if (!fn) throw new Error('Function not found for: ' + this.segments.join('.'));\n  var getFn = fn.get || fn;\n  var out = this._applyFn(getFn, context, extraInputs, parent);\n  return out;\n};\nFnExpression.prototype._getInputs = function(context) {\n  var inputs = [];\n  for (var i = 0, len = this.args.length; i < len; i++) {\n    var value = this.args[i].get(context);\n    inputs.push(renderValue(value, context));\n  }\n  return inputs;\n};\nFnExpression.prototype._applyFn = function(fn, context, extraInputs, thisArg) {\n  // Apply if there are no path inputs\n  if (!this.args) {\n    return (extraInputs) ?\n      fn.apply(thisArg, extraInputs) :\n      fn.call(thisArg);\n  }\n  // Otherwise, get the current value for path inputs and apply\n  var inputs = this._getInputs(context);\n  if (extraInputs) {\n    for (var i = 0, len = extraInputs.length; i < len; i++) {\n      inputs.push(extraInputs[i]);\n    }\n  }\n  return fn.apply(thisArg, inputs);\n};\nFnExpression.prototype.dependencies = function(context) {\n  var dependencies = [];\n  if (!this.args) return dependencies;\n  for (var i = 0, len = this.args.length; i < len; i++) {\n    var argDependencies = this.args[i].dependencies(context);\n    var firstDependency = argDependencies && argDependencies[0];\n    if (!firstDependency) continue;\n    if (firstDependency[firstDependency.length - 1] !== '*') {\n      argDependencies[0] = argDependencies[0].concat('*');\n    }\n    for (var j = 0, jLen = argDependencies.length; j < jLen; j++) {\n      dependencies.push(argDependencies[j]);\n    }\n  }\n  return dependencies;\n};\nFnExpression.prototype.set = function(context, value) {\n  var controller = context.controller;\n  var fn, parent;\n  while (controller) {\n    parent = (this.parentSegments) ?\n      lookup(this.parentSegments, controller) :\n      controller;\n    fn = parent && parent[this.lastSegment];\n    if (fn) break;\n    controller = controller.parent;\n  }\n  var setFn = fn && fn.set;\n  if (!setFn) throw new Error('No setter function for: ' + this.segments.join('.'));\n  var inputs = this._getInputs(context);\n  inputs.unshift(value);\n  var out = setFn.apply(parent, inputs);\n  for (var i in out) {\n    this.args[i].set(context, out[i]);\n  }\n};\n\nfunction NewExpression(segments, args, afterSegments, meta) {\n  FnExpression.call(this, segments, args, afterSegments, meta);\n}\nNewExpression.prototype = new FnExpression();\nNewExpression.prototype.type = 'NewExpression';\nNewExpression.prototype._applyFn = function(Fn, context) {\n  // Apply if there are no path inputs\n  if (!this.args) return new Fn();\n  // Otherwise, get the current value for path inputs and apply\n  var inputs = this._getInputs(context);\n  inputs.unshift(null);\n  return new (Fn.bind.apply(Fn, inputs))();\n};\n\nfunction OperatorExpression(name, args, afterSegments, meta) {\n  this.name = name;\n  this.args = args;\n  this.afterSegments = afterSegments;\n  this.meta = meta;\n  this.getFn = operatorFns.get[name];\n  this.setFn = operatorFns.set[name];\n}\nOperatorExpression.prototype = new FnExpression();\nOperatorExpression.prototype.type = 'OperatorExpression';\nOperatorExpression.prototype.serialize = function() {\n  return serializeObject.instance(this, this.name, this.args, this.afterSegments, this.meta);\n};\nOperatorExpression.prototype.apply = function(context) {\n  var inputs = this._getInputs(context);\n  return this.getFn.apply(null, inputs);\n};\nOperatorExpression.prototype.set = function(context, value) {\n  var inputs = this._getInputs(context);\n  inputs.unshift(value);\n  var out = this.setFn.apply(null, inputs);\n  for (var i in out) {\n    this.args[i].set(context, out[i]);\n  }\n};\n\nfunction SequenceExpression(args, afterSegments, meta) {\n  this.args = args;\n  this.afterSegments = afterSegments;\n  this.meta = meta;\n}\nSequenceExpression.prototype = new OperatorExpression();\nSequenceExpression.prototype.type = 'SequenceExpression';\nSequenceExpression.prototype.serialize = function() {\n  return serializeObject.instance(this, this.args, this.afterSegments, this.meta);\n};\nSequenceExpression.prototype.name = ',';\nSequenceExpression.prototype.getFn = operatorFns.get[','];\nSequenceExpression.prototype.resolve = function(context) {\n  var last = this.args[this.args.length - 1];\n  return last.resolve(context);\n};\nSequenceExpression.prototype.dependencies = function(context, forInnerPath) {\n  var last = this.args[this.args.length - 1];\n  return last.dependencies(context, forInnerPath);\n};\n\nfunction outerDependency(expression, context, forInnerPath) {\n  if (forInnerPath) return;\n  return [expression.resolve(context)];\n}\n\nfunction concat(a, b) {\n  if (!a) return b;\n  if (!b) return a;\n  return a.concat(b);\n}\n\n}).call(this,typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})","// `-` and `+` can be either unary or binary, so all unary operators are\n// postfixed with `U` to differentiate\n\nexports.get = {\n  // Unary operators\n  '!U': function(value) {\n    return !value;\n  }\n, '-U': function(value) {\n    return -value;\n  }\n, '+U': function(value) {\n    return +value;\n  }\n, '~U': function(value) {\n    return ~value;\n  }\n, 'typeofU': function(value) {\n    return typeof value;\n  }\n  // Binary operators\n, '||': function(left, right) {\n    return left || right;\n  }\n, '&&': function(left, right) {\n    return left && right;\n  }\n, '|': function(left, right) {\n    return left | right;\n  }\n, '^': function(left, right) {\n    return left ^ right;\n  }\n, '&': function(left, right) {\n    return left & right;\n  }\n, '==': function(left, right) {\n    return left == right; // jshint ignore:line\n  }\n, '!=': function(left, right) {\n    return left != right; // jshint ignore:line\n  }\n, '===': function(left, right) {\n    return left === right;\n  }\n, '!==': function(left, right) {\n    return left !== right;\n  }\n, '<': function(left, right) {\n    return left < right;\n  }\n, '>': function(left, right) {\n    return left > right;\n  }\n, '<=': function(left, right) {\n    return left <= right;\n  }\n, '>=': function(left, right) {\n    return left >= right;\n  }\n, 'instanceof': function(left, right) {\n    return left instanceof right;\n  }\n, 'in': function(left, right) {\n    return left in right;\n  }\n, '<<': function(left, right) {\n    return left << right;\n  }\n, '>>': function(left, right) {\n    return left >> right;\n  }\n, '>>>': function(left, right) {\n    return left >>> right;\n  }\n, '+': function(left, right) {\n    return left + right;\n  }\n, '-': function(left, right) {\n    return left - right;\n  }\n, '*': function(left, right) {\n    return left * right;\n  }\n, '/': function(left, right) {\n    return left / right;\n  }\n, '%': function(left, right) {\n    return left % right;\n  }\n  // Conditional operator\n, '?': function(test, consequent, alternate) {\n    return (test) ? consequent : alternate;\n  }\n, // Sequence\n  ',': function() {\n    return arguments[arguments.length - 1];\n  }\n  // Array literal\n, '[]': function() {\n    return Array.prototype.slice.call(arguments);\n  }\n  // Object literal\n, '{}': function() {\n    var value = {};\n    for (var i = 0, len = arguments.length; i < len; i += 2) {\n      var key = arguments[i];\n      value[key] = arguments[i + 1];\n    }\n    return value;\n  }\n};\n\nexports.set = {\n  // Unary operators\n  '!U': function(value) {\n    return [!value];\n  }\n, '-U': function(value) {\n    return [-value];\n  }\n  // Binary operators\n, '==': function(value, left, right) {\n    if (value) return [right];\n  }\n, '===': function(value, left, right) {\n    if (value) return [right];\n  }\n, 'in': function(value, left, right) {\n    right[left] = true;\n    return {1: right};\n  }\n, '+': function(value, left, right) {\n    return [value - right];\n  }\n, '-': function(value, left, right) {\n    return [value + right];\n  }\n, '*': function(value, left, right) {\n    return [value / right];\n  }\n, '/': function(value, left, right) {\n    return [value * right];\n  }\n};\n","var saddle = require('saddle');\nvar serializeObject = require('serialize-object');\n\n(function() {\n  for (var key in saddle) {\n    exports[key] = saddle[key];\n  }\n})();\n\nexports.View = View;\nexports.ViewInstance = ViewInstance;\nexports.DynamicViewInstance = DynamicViewInstance;\nexports.ParentWrapper = ParentWrapper;\n\nexports.Views = Views;\n\nexports.MarkupHook = MarkupHook;\nexports.ElementOn = ElementOn;\nexports.ComponentOn = ComponentOn;\nexports.ComponentMarker = ComponentMarker;\nexports.MarkupAs = MarkupAs;\n\nexports.emptyTemplate = new saddle.Template([]);\n\n// Add ::isUnbound to Template && Binding\nsaddle.Template.prototype.isUnbound = function(context) {\n  return context.unbound;\n};\nsaddle.Binding.prototype.isUnbound = function() {\n  return this.template.expression.isUnbound(this.context);\n};\n\n// Add Template::resolve\nsaddle.Template.prototype.resolve = function() {};\n\n// The Template::dependencies method is specific to how Derby bindings work,\n// so extend all of the Saddle Template types here\nsaddle.Template.prototype.dependencies = function(context) {\n  return getArrayDependencies(this.content, context);\n};\nsaddle.Doctype.prototype.dependencies = function() {};\nsaddle.Text.prototype.dependencies = function() {};\nsaddle.DynamicText.prototype.dependencies = function(context) {\n  return getDependencies(this.expression, context);\n};\nsaddle.Comment.prototype.dependencies = function() {};\nsaddle.DynamicComment.prototype.dependencies = function(context) {\n  return getDependencies(this.expression, context);\n};\nsaddle.Element.prototype.dependencies = function(context) {\n  var items = getMapDependencies(this.attributes, context);\n  return getArrayDependencies(this.content, context, items);\n};\nsaddle.Block.prototype.dependencies = function(context) {\n  var items = getDependencies(this.expression, context);\n  return getArrayDependencies(this.content, context, items);\n};\nsaddle.ConditionalBlock.prototype.dependencies = function(context) {\n  var items = getArrayDependencies(this.expressions, context);\n  return getArrayOfArrayDependencies(this.contents, context, items);\n};\nsaddle.EachBlock.prototype.dependencies = function(context) {\n  var items = getDependencies(this.expression, context);\n  items = getArrayDependencies(this.content, context, items);\n  return getArrayDependencies(this.elseContent, context, items);\n};\nsaddle.Attribute.prototype.dependencies = function() {};\nsaddle.DynamicAttribute.prototype.dependencies = function(context) {\n  return getDependencies(this.expression, context);\n};\n\nfunction getArrayOfArrayDependencies(expressions, context, items) {\n  if (!expressions) return items;\n  for (var i = 0, len = expressions.length; i < len; i++) {\n    items = getArrayDependencies(expressions[i], context, items);\n  }\n  return items;\n}\nfunction getArrayDependencies(expressions, context, items) {\n  if (!expressions) return items;\n  for (var i = 0, len = expressions.length; i < len; i++) {\n    items = getDependencies(expressions[i], context, items);\n  }\n  return items;\n}\nfunction getMapDependencies(expressions, context, items) {\n  if (!expressions) return items;\n  for (var key in expressions) {\n    items = getDependencies(expressions[key], context, items);\n  }\n  return items;\n}\nfunction getDependencies(expression, context, items) {\n  var dependencies = expression && expression.dependencies(context);\n  if (!dependencies) return items;\n  for (var i = 0, len = dependencies.length; i < len; i++) {\n    items || (items = []);\n    items.push(dependencies[i]);\n  }\n  return items;\n}\n\nfunction ViewAttributesMap(source) {\n  var items = source.split(/\\s+/);\n  for (var i = 0, len = items.length; i < len; i++) {\n    this[items[i]] = true;\n  }\n}\nfunction ViewArraysMap(source) {\n  var items = source.split(/\\s+/);\n  for (var i = 0, len = items.length; i < len; i++) {\n    var item = items[i].split('/');\n    this[item[0]] = item[1] || item[0];\n  }\n}\nfunction View(views, name, source, options) {\n  this.views = views;\n  this.name = name;\n  this.source = source;\n  this.options = options;\n\n  var nameSegments = (this.name || '').split(':');\n  var lastSegment = nameSegments.pop();\n  this.namespace = nameSegments.join(':');\n  this.registeredName = (lastSegment === 'index') ? this.namespace : this.name;\n\n  this.attributesMap = options && options.attributes &&\n    new ViewAttributesMap(options.attributes);\n  this.arraysMap = options && options.arrays &&\n    new ViewArraysMap(options.arrays);\n  // The empty string is considered true for easier HTML attribute parsing\n  this.unminified = options && (options.unminified || options.unminified === '');\n  this.string = options && (options.string || options.string === '');\n  this.template = null;\n  this.componentFactory = null;\n}\nView.prototype = new saddle.Template();\nView.prototype.type = 'View';\nView.prototype.serialize = function(options) {\n  if (options && !options.server && this.options && this.options.serverOnly) return '';\n  var template = this.template || this.parse();\n  return 'views.register(' + serializeObject.args([\n      this.name\n    , (options && options.minify) ? null : this.source\n    , (hasKeys(this.options)) ? this.options : null\n    ]) + ').template = ' + template.serialize() + ';';\n};\nView.prototype._isComponent = function(context) {\n  return this.componentFactory &&\n    context.attributes && !context.attributes.extend;\n};\nView.prototype._initComponent = function(context) {\n  return (this._isComponent(context)) ?\n    this.componentFactory.init(context) : context;\n};\nView.prototype._queueCreate = function(context, viewContext) {\n  if (this._isComponent(context)) {\n    viewContext.queueCreate(this.componentFactory);\n  }\n};\nView.prototype.get = function(context, unescaped) {\n  var viewContext = this._initComponent(context);\n  var template = this.template || this.parse();\n  return template.get(viewContext, unescaped);\n};\nView.prototype.getFragment = function(context, binding) {\n  var viewContext = this._initComponent(context);\n  var template = this.template || this.parse();\n  var fragment = template.getFragment(viewContext, binding);\n  this._queueCreate(context, viewContext);\n  return fragment;\n};\nView.prototype.appendTo = function(parent, context) {\n  var viewContext = this._initComponent(context);\n  var template = this.template || this.parse();\n  template.appendTo(parent, viewContext);\n  this._queueCreate(context, viewContext);\n};\nView.prototype.attachTo = function(parent, node, context) {\n  var viewContext = this._initComponent(context);\n  var template = this.template || this.parse();\n  var node = template.attachTo(parent, node, viewContext);\n  this._queueCreate(context, viewContext);\n  return node;\n};\nView.prototype.dependencies = function(context) {\n  var template = this.template || this.parse();\n  return template.dependencies(context);\n};\nView.prototype.parse = function() {\n  this._parse();\n  if (this.componentFactory) {\n    var hooks = [new ComponentMarker()];\n    var marker = new saddle.Comment(this.name, hooks);\n    this.template.content.unshift(marker);\n  }\n  return this.template;\n};\n// View.prototype._parse is defined in parsing.js, so that it doesn't have to\n// be included in the client if templates are all parsed server-side\nView.prototype._parse = function() {\n  throw new Error('View parsing not available');\n};\n\nfunction ViewInstance(name, attributes, hooks) {\n  this.name = name;\n  this.attributes = attributes;\n  this.hooks = hooks;\n  this.view = null;\n}\nViewInstance.prototype = new saddle.Template();\nViewInstance.prototype.type = 'ViewInstance';\nViewInstance.prototype.serialize = function() {\n  return serializeObject.instance(this, this.name, this.attributes, this.hooks);\n};\nViewInstance.prototype.get = function(context, unescaped) {\n  var view = this._find(context);\n  var viewContext = context.viewChild(view, this.attributes, this.hooks);\n  return view.get(viewContext, unescaped);\n};\nViewInstance.prototype.getFragment = function(context, binding) {\n  var view = this._find(context);\n  var viewContext = context.viewChild(view, this.attributes, this.hooks);\n  return view.getFragment(viewContext, binding);\n};\nViewInstance.prototype.appendTo = function(parent, context) {\n  var view = this._find(context);\n  var viewContext = context.viewChild(view, this.attributes, this.hooks);\n  view.appendTo(parent, viewContext);\n};\nViewInstance.prototype.attachTo = function(parent, node, context) {\n  var view = this._find(context);\n  var viewContext = context.viewChild(view, this.attributes, this.hooks);\n  return view.attachTo(parent, node, viewContext);\n};\nViewInstance.prototype.dependencies = function(context) {\n  var view = this._find(context);\n  var viewContext = context.viewChild(view, this.attributes, this.hooks);\n  return view.dependencies(viewContext);\n};\nViewInstance.prototype._find = function(context) {\n  if (this.view) return this.view;\n  var contextView = context.getView();\n  var namespace = contextView && contextView.namespace;\n  this.view = context.meta.views.find(this.name, namespace);\n  if (!this.view) {\n    var message = context.meta.views.findErrorMessage(this.name, contextView);\n    throw new Error(message);\n  }\n  return this.view;\n};\n\nfunction DynamicViewInstance(nameExpression, attributes, hooks) {\n  this.nameExpression = nameExpression;\n  this.attributes = attributes;\n  this.hooks = hooks;\n  this.optional = attributes && attributes.optional;\n}\nDynamicViewInstance.prototype = new ViewInstance();\nDynamicViewInstance.prototype.type = 'DynamicViewInstance';\nDynamicViewInstance.prototype.serialize = function() {\n  return serializeObject.instance(this, this.nameExpression, this.attributes, this.hooks);\n};\nDynamicViewInstance.prototype._find = function(context) {\n  var name = this.nameExpression.get(context);\n  var contextView = context.getView();\n  var namespace = contextView && contextView.namespace;\n  var view = name && context.meta.views.find(name, namespace);\n  if (!view) {\n    if (this.optional) return exports.emptyTemplate;\n    var message = context.meta.views.findErrorMessage(name, contextView);\n    throw new Error(message);\n  }\n  return view;\n};\n\nfunction ParentWrapper(template, expression) {\n  this.template = template;\n  this.expression = expression;\n}\nParentWrapper.prototype = new saddle.Template();\nParentWrapper.prototype.type = 'ParentWrapper';\nParentWrapper.prototype.serialize = function() {\n  return serializeObject.instance(this, this.template, this.expression);\n};\nParentWrapper.prototype.get = function(context, unescaped) {\n  return (this.expression || this.template).get(context.forViewParent(), unescaped);\n};\nParentWrapper.prototype.getFragment = function(context, binding) {\n  return this.template.getFragment(context.forViewParent(), binding);\n};\nParentWrapper.prototype.appendTo = function(parent, context) {\n  this.template.appendTo(parent, context.forViewParent());\n};\nParentWrapper.prototype.attachTo = function(parent, node, context) {\n  return this.template.attachTo(parent, node, context.forViewParent());\n};\nParentWrapper.prototype.resolve = function(context) {\n  return this.expression && this.expression.resolve(context.forViewParent());\n};\nParentWrapper.prototype.dependencies = function(context) {\n  return (this.expression || this.template).dependencies(context.forViewParent());\n};\n\nfunction ViewsMap() {}\nfunction Views() {\n  this.nameMap = new ViewsMap();\n  this.elementMap = new ViewsMap();\n}\nViews.prototype.find = function(name, namespace) {\n  var map = this.nameMap;\n\n  // Exact match lookup\n  var exactName = (namespace) ? namespace + ':' + name : name;\n  var match = map[exactName];\n  if (match) return match;\n\n  // Relative lookup\n  var segments = name.split(':');\n  var segmentsDepth = segments.length;\n  if (namespace) segments = namespace.split(':').concat(segments);\n  // Iterate through segments, leaving the `segmentsDepth` segments and\n  // removing the second to `segmentsDepth` segment to traverse up the\n  // namespaces. Decrease `segmentsDepth` if not found and repeat again.\n  while (segmentsDepth > 0) {\n    while (segments.length > segmentsDepth) {\n      segments.splice(-1 - segmentsDepth, 1);\n      var testName = segments.join(':');\n      var match = map[testName];\n      if (match) return match;\n    }\n    segmentsDepth--;\n  }\n};\nViews.prototype.register = function(name, source, options) {\n  var mapName = name.replace(/:index$/, '');\n  var view = this.nameMap[mapName];\n  if (view) {\n    // Recreate the view if it already exists. We re-apply the constructor\n    // instead of creating a new view object so that references to object\n    // can be cached after finding the first time\n    var componentFactory = view.componentFactory;\n    View.call(view, this, name, source, options);\n    view.componentFactory = componentFactory;\n  } else {\n    view = new View(this, name, source, options);\n  }\n  this.nameMap[mapName] = view;\n  if (options && options.element) this.elementMap[options.element] = view;\n  return view;\n};\nViews.prototype.serialize = function(options) {\n  var out = 'function(derbyTemplates, views) {' +\n    'var expressions = derbyTemplates.expressions;' +\n    'var templates = derbyTemplates.templates;';\n  for (var name in this.nameMap) {\n    out += this.nameMap[name].serialize(options);\n  }\n  return out + '}';\n};\nViews.prototype.findErrorMessage = function(name, contextView) {\n  var names = Object.keys(this.nameMap);\n  var message = 'Cannot find view \"' + name + '\" in' +\n    [''].concat(names).join('\\n  ') + '\\n';\n  if (contextView) {\n    message += '\\nWithin template \"' + contextView.name + '\":\\n' + contextView.source;\n  }\n  return message;\n};\n\n\nfunction MarkupHook() {}\nMarkupHook.prototype.module = saddle.Template.prototype.module;\n\nfunction ElementOn(name, expression) {\n  this.name = name;\n  this.expression = expression;\n}\nElementOn.prototype = new MarkupHook();\nElementOn.prototype.type = 'ElementOn';\nElementOn.prototype.serialize = function() {\n  return serializeObject.instance(this, this.name, this.expression);\n};\nElementOn.prototype.emit = function(context, element) {\n  var expression = this.expression;\n  element.addEventListener(this.name, function elementOnListener(event) {\n    var modelData = context.controller.model.data;\n    modelData.$event = event;\n    modelData.$element = element;\n    var out = expression.apply(context);\n    delete modelData.$event;\n    delete modelData.$element;\n    return out;\n  }, false);\n};\n\nfunction ComponentOn(name, expression) {\n  this.name = name;\n  this.expression = expression;\n}\nComponentOn.prototype = new MarkupHook();\nComponentOn.prototype.type = 'ComponentOn';\nComponentOn.prototype.serialize = function() {\n  return serializeObject.instance(this, this.name, this.expression);\n};\nComponentOn.prototype.emit = function(context, component) {\n  var expression = this.expression;\n  component.on(this.name, function componentOnListener() {\n    var args = arguments.length && Array.prototype.slice.call(arguments);\n    return expression.apply(context, args);\n  });\n};\n\nfunction ComponentMarker() {}\nComponentMarker.prototype = new MarkupHook();\nComponentMarker.prototype.type = 'ComponentMarker';\nComponentMarker.prototype.serialize = function() {\n  return serializeObject.instance(this);\n};\nComponentMarker.prototype.emit = function(context, node) {\n  node.$markComponent = context.controller;\n};\n\nfunction MarkupAs(segments) {\n  this.segments = segments;\n  this.lastSegment = segments.pop();\n}\nMarkupAs.prototype = new MarkupHook();\nMarkupAs.prototype.type = 'MarkupAs';\nMarkupAs.prototype.serialize = function() {\n  var segments = this.segments.concat(this.lastSegment);\n  return serializeObject.instance(this, segments);\n};\nMarkupAs.prototype.emit = function(context, target) {\n  var node = traverseAndCreate(context.controller, this.segments);\n  node[this.lastSegment] = target;\n};\n\nfunction traverseAndCreate(node, segments) {\n  var len = segments.length;\n  if (!len) return node;\n  for (var i = 0; i < len; i++) {\n    var segment = segments[i];\n    node = node[segment] || (node[segment] = {});\n  }\n  return node;\n}\n\nfunction hasKeys(value) {\n  if (!value) return false;\n  for (var key in value) {\n    return true;\n  }\n  return false;\n}\n","if (typeof require === 'function') {\n  var serializeObject = require('serialize-object');\n}\n\n// UPDATE_PROPERTIES map HTML attribute names to an Element DOM property that\n// should be used for setting on bindings updates instead of s'test'Attribute.\n//\n// https://github.com/jquery/jquery/blob/1.x-master/src/attributes/prop.js\n// https://github.com/jquery/jquery/blob/master/src/attributes/prop.js\n// http://webbugtrack.blogspot.com/2007/08/bug-242-setattribute-doesnt-always-work.html\nvar UPDATE_PROPERTIES = {\n  checked: 'checked'\n, disabled: 'disabled'\n, selected: 'selected'\n, type: 'type'\n, value: 'value'\n, 'class': 'className'\n, 'for': 'htmlFor'\n, tabindex: 'tabIndex'\n, readonly: 'readOnly'\n, maxlength: 'maxLength'\n, cellspacing: 'cellSpacing'\n, cellpadding: 'cellPadding'\n, rowspan: 'rowSpan'\n, colspan: 'colSpan'\n, usemap: 'useMap'\n, frameborder: 'frameBorder'\n, contenteditable: 'contentEditable'\n, enctype: 'encoding'\n, id: 'id'\n, title: 'title'\n};\n// CREATE_PROPERTIES map HTML attribute names to an Element DOM property that\n// should be used for setting on Element rendering instead of setAttribute.\n// input.defaultChecked and input.defaultValue affect the attribute, so we want\n// to use these for initial dynamic rendering. For binding updates,\n// input.checked and input.value are modified.\nvar CREATE_PROPERTIES = {};\nmergeInto(UPDATE_PROPERTIES, CREATE_PROPERTIES);\nCREATE_PROPERTIES.checked = 'defaultChecked';\nCREATE_PROPERTIES.value = 'defaultValue';\n\n// http://www.w3.org/html/wg/drafts/html/master/syntax.html#void-elements\nvar VOID_ELEMENTS = {\n  area: true\n, base: true\n, br: true\n, col: true\n, embed: true\n, hr: true\n, img: true\n, input: true\n, keygen: true\n, link: true\n, menuitem: true\n, meta: true\n, param: true\n, source: true\n, track: true\n, wbr: true\n};\n\nvar NAMESPACE_URIS = {\n  svg: 'http://www.w3.org/2000/svg'\n, xlink: 'http://www.w3.org/1999/xlink'\n, xmlns: 'http://www.w3.org/2000/xmlns/'\n};\n\nexports.CREATE_PROPERTIES = CREATE_PROPERTIES;\nexports.UPDATE_PROPERTIES = UPDATE_PROPERTIES;\nexports.VOID_ELEMENTS = VOID_ELEMENTS;\nexports.NAMESPACE_URIS = NAMESPACE_URIS;\n\n// Template Classes\nexports.Template = Template;\nexports.Doctype = Doctype;\nexports.Text = Text;\nexports.DynamicText = DynamicText;\nexports.Comment = Comment;\nexports.DynamicComment = DynamicComment;\nexports.Html = Html;\nexports.DynamicHtml = DynamicHtml;\nexports.Element = Element;\nexports.DynamicElement = DynamicElement;\nexports.Block = Block;\nexports.ConditionalBlock = ConditionalBlock;\nexports.EachBlock = EachBlock;\n\nexports.Attribute = Attribute;\nexports.DynamicAttribute = DynamicAttribute;\n\n// Binding Classes\nexports.Binding = Binding;\nexports.NodeBinding = NodeBinding;\nexports.AttributeBinding = AttributeBinding;\nexports.RangeBinding = RangeBinding;\n\nfunction Template(content) {\n  this.content = content;\n}\nTemplate.prototype.get = function(context, unescaped) {\n  return contentHtml(this.content, context, unescaped);\n};\nTemplate.prototype.getFragment = function(context, binding) {\n  var fragment = document.createDocumentFragment();\n  this.appendTo(fragment, context, binding);\n  return fragment;\n};\nTemplate.prototype.appendTo = function(parent, context) {\n  appendContent(parent, this.content, context);\n};\nTemplate.prototype.attachTo = function(parent, node, context) {\n  return attachContent(parent, node, this.content, context);\n};\nTemplate.prototype.update = function() {};\nTemplate.prototype.stringify = function(value) {\n  return (value == null) ? '' : value + '';\n};\nTemplate.prototype.module = 'templates';\nTemplate.prototype.type = 'Template';\nTemplate.prototype.serialize = function() {\n  return serializeObject.instance(this, this.content);\n};\n\n\nfunction Doctype(name, publicId, systemId) {\n  this.name = name;\n  this.publicId = publicId;\n  this.systemId = systemId;\n}\nDoctype.prototype = new Template();\nDoctype.prototype.get = function() {\n  var publicText = (this.publicId) ?\n    ' PUBLIC \"' + this.publicId  + '\"' :\n    '';\n  var systemText = (this.systemId) ?\n    (this.publicId) ?\n      ' \"' + this.systemId + '\"' :\n      ' SYSTEM \"' + this.systemId + '\"' :\n    '';\n  return '<!DOCTYPE ' + this.name + publicText + systemText + '>';\n};\nDoctype.prototype.appendTo = function() {\n  // Doctype could be created via:\n  //   document.implementation.createDocumentType(this.name, this.publicId, this.systemId)\n  // However, it does not appear possible or useful to append it to the\n  // document fragment. Therefore, just don't render it in the browser\n};\nDoctype.prototype.attachTo = function(parent, node) {\n  if (!node || node.nodeType !== 10) {\n    throw attachError(parent, node);\n  }\n  return node.nextSibling;\n};\nDoctype.prototype.type = 'Doctype';\nDoctype.prototype.serialize = function() {\n  return serializeObject.instance(this, this.name, this.publicId, this.systemId);\n};\n\nfunction Text(data) {\n  this.data = data;\n  this.escaped = escapeHtml(data);\n}\nText.prototype = new Template();\nText.prototype.get = function(context, unescaped) {\n  return (unescaped) ? this.data : this.escaped;\n};\nText.prototype.appendTo = function(parent) {\n  var node = document.createTextNode(this.data);\n  parent.appendChild(node);\n};\nText.prototype.attachTo = function(parent, node) {\n  return attachText(parent, node, this.data, this);\n};\nText.prototype.type = 'Text';\nText.prototype.serialize = function() {\n  return serializeObject.instance(this, this.data);\n};\n\nfunction DynamicText(expression) {\n  this.expression = expression;\n}\nDynamicText.prototype = new Template();\nDynamicText.prototype.get = function(context, unescaped) {\n  var value = this.expression.get(context);\n  if (value instanceof Template) {\n    do {\n      value = value.get(context, unescaped);\n    } while (value instanceof Template);\n    return value;\n  }\n  var data = this.stringify(value);\n  return (unescaped) ? data : escapeHtml(data);\n};\nDynamicText.prototype.appendTo = function(parent, context) {\n  var value = this.expression.get(context);\n  if (value instanceof Template) {\n    value.appendTo(parent, context);\n    return;\n  }\n  var data = this.stringify(value);\n  var node = document.createTextNode(data);\n  parent.appendChild(node);\n  addNodeBinding(this, context, node);\n};\nDynamicText.prototype.attachTo = function(parent, node, context) {\n  var value = this.expression.get(context);\n  if (value instanceof Template) {\n    return value.attachTo(parent, node, context);\n  }\n  var data = this.stringify(value);\n  return attachText(parent, node, data, this, context);\n};\nDynamicText.prototype.update = function(context, binding) {\n  binding.node.data = this.stringify(this.expression.get(context));\n};\nDynamicText.prototype.type = 'DynamicText';\nDynamicText.prototype.serialize = function() {\n  return serializeObject.instance(this, this.expression);\n};\n\nfunction attachText(parent, node, data, template, context) {\n  if (!node) {\n    var newNode = document.createTextNode(data);\n    parent.appendChild(newNode);\n    addNodeBinding(template, context, newNode);\n    return;\n  }\n  if (node.nodeType === 3) {\n    // Proceed if nodes already match\n    if (node.data === data) {\n      addNodeBinding(template, context, node);\n      return node.nextSibling;\n    }\n    data = normalizeLineBreaks(data);\n    // Split adjacent text nodes that would have been merged together in HTML\n    var nextNode = splitData(node, data.length);\n    if (node.data !== data) {\n      throw attachError(parent, node);\n    }\n    addNodeBinding(template, context, node);\n    return nextNode;\n  }\n  // An empty text node might not be created at the end of some text\n  if (data === '') {\n    var newNode = document.createTextNode('');\n    parent.insertBefore(newNode, node || null);\n    addNodeBinding(template, context, newNode);\n    return node;\n  }\n  throw attachError(parent, node);\n}\n\nfunction Comment(data, hooks) {\n  this.data = data;\n  this.hooks = hooks;\n}\nComment.prototype = new Template();\nComment.prototype.get = function() {\n  return '<!--' + this.data + '-->';\n};\nComment.prototype.appendTo = function(parent, context) {\n  var node = document.createComment(this.data);\n  emitHooks(this.hooks, context, node);\n  parent.appendChild(node);\n};\nComment.prototype.attachTo = function(parent, node, context) {\n  return attachComment(parent, node, this.data, this, context);\n};\nComment.prototype.type = 'Comment';\nComment.prototype.serialize = function() {\n  return serializeObject.instance(this, this.data, this.hooks);\n}\n\nfunction DynamicComment(expression, hooks) {\n  this.expression = expression;\n  this.hooks = hooks;\n}\nDynamicComment.prototype = new Template();\nDynamicComment.prototype.get = function(context) {\n  var value = getUnescapedValue(this.expression, context);\n  var data = this.stringify(value);\n  return '<!--' + data + '-->';\n};\nDynamicComment.prototype.appendTo = function(parent, context) {\n  var value = getUnescapedValue(this.expression, context);\n  var data = this.stringify(value);\n  var node = document.createComment(data);\n  parent.appendChild(node);\n  addNodeBinding(this, context, node);\n};\nDynamicComment.prototype.attachTo = function(parent, node, context) {\n  var value = getUnescapedValue(this.expression, context);\n  var data = this.stringify(value);\n  return attachComment(parent, node, data, this, context);\n};\nDynamicComment.prototype.update = function(context, binding) {\n  var value = getUnescapedValue(this.expression, context);\n  binding.node.data = this.stringify(value);\n};\nDynamicComment.prototype.type = 'DynamicComment';\nDynamicComment.prototype.serialize = function() {\n  return serializeObject.instance(this, this.expression, this.hooks);\n}\n\nfunction attachComment(parent, node, data, template, context) {\n  // Sometimes IE fails to create Comment nodes from HTML or innerHTML.\n  // This is an issue inside of <select> elements, for example.\n  if (!node || node.nodeType !== 8) {\n    var newNode = document.createComment(data);\n    parent.insertBefore(newNode, node || null);\n    addNodeBinding(template, context, newNode);\n    return node;\n  }\n  // Proceed if nodes already match\n  if (node.data === data) {\n    addNodeBinding(template, context, node);\n    return node.nextSibling;\n  }\n  throw attachError(parent, node);\n}\n\nfunction addNodeBinding(template, context, node) {\n  emitHooks(template.hooks, context, node);\n  if (template.expression) {\n    context.addBinding(new NodeBinding(template, context, node));\n  }\n}\n\nfunction Html(data) {\n  this.data = data;\n}\nHtml.prototype = new Template();\nHtml.prototype.get = function() {\n  return this.data;\n};\nHtml.prototype.appendTo = function(parent) {\n  var fragment = createHtmlFragment(parent, this.data);\n  parent.appendChild(fragment);\n};\nHtml.prototype.attachTo = function(parent, node) {\n  return attachHtml(parent, node, this.data);\n};\nHtml.prototype.type = \"Html\";\nHtml.prototype.serialize = function() {\n  return serializeObject.instance(this, this.data);\n};\n\nfunction DynamicHtml(expression) {\n  this.expression = expression;\n  this.ending = '/' + expression;\n}\nDynamicHtml.prototype = new Template();\nDynamicHtml.prototype.get = function(context) {\n  var value = getUnescapedValue(this.expression, context);\n  return this.stringify(value);\n};\nDynamicHtml.prototype.appendTo = function(parent, context, binding) {\n  var start = document.createComment(this.expression);\n  var end = document.createComment(this.ending);\n  var value = getUnescapedValue(this.expression, context);\n  var html = this.stringify(value);\n  var fragment = createHtmlFragment(parent, html);\n  parent.appendChild(start);\n  parent.appendChild(fragment);\n  parent.appendChild(end);\n  updateRange(context, binding, this, start, end);\n};\nDynamicHtml.prototype.attachTo = function(parent, node, context) {\n  var start = document.createComment(this.expression);\n  var end = document.createComment(this.ending);\n  var value = getUnescapedValue(this.expression, context);\n  var html = this.stringify(value);\n  parent.insertBefore(start, node || null);\n  node = attachHtml(parent, node, html);\n  parent.insertBefore(end, node || null);\n  updateRange(context, null, this, start, end);\n  return node;\n};\nDynamicHtml.prototype.update = function(context, binding) {\n  // Get start and end in advance, since binding is mutated in getFragment\n  var start = binding.start;\n  var end = binding.end;\n  var value = getUnescapedValue(this.expression, context);\n  var html = this.stringify(value);\n  var fragment = createHtmlFragment(binding.start.parentNode, html);\n  var innerOnly = true;\n  replaceRange(context, start, end, fragment, binding, innerOnly);\n};\nDynamicHtml.prototype.type = 'DynamicHtml';\nDynamicHtml.prototype.serialize = function() {\n  return serializeObject.instance(this, this.expression);\n};\n\nfunction createHtmlFragment(parent, html) {\n  if (parent.nodeType === 1) {\n    var range = document.createRange();\n    range.selectNodeContents(parent);\n    return range.createContextualFragment(html);\n  }\n  var div = document.createElement('div');\n  var range = document.createRange();\n  div.innerHTML = html;\n  range.selectNodeContents(div);\n  return range.extractContents();\n}\nfunction attachHtml(parent, node, html) {\n  var fragment = createHtmlFragment(parent, html);\n  for (var i = 0, len = fragment.childNodes.length; i < len; i++) {\n    if (!node) throw attachError(parent, node);\n    node = node.nextSibling;\n  }\n  return node;\n}\n\nfunction Attribute(data, ns) {\n  this.data = data;\n  this.ns = ns;\n}\nAttribute.prototype.get = Attribute.prototype.getBound = function(context) {\n  return this.data;\n};\nAttribute.prototype.module = Template.prototype.module;\nAttribute.prototype.type = 'Attribute';\nAttribute.prototype.serialize = function() {\n  return serializeObject.instance(this, this.data, this.ns);\n};\n\nfunction DynamicAttribute(expression, ns) {\n  // In attributes, expression may be an instance of Template or Expression\n  this.expression = expression;\n  this.ns = ns;\n  this.elementNs = null;\n}\nDynamicAttribute.prototype = new Attribute();\nDynamicAttribute.prototype.get = function(context) {\n  return getUnescapedValue(this.expression, context);\n};\nDynamicAttribute.prototype.getBound = function(context, element, name, elementNs) {\n  this.elementNs = elementNs;\n  context.addBinding(new AttributeBinding(this, context, element, name));\n  return getUnescapedValue(this.expression, context);\n};\nDynamicAttribute.prototype.update = function(context, binding) {\n  var value = getUnescapedValue(this.expression, context);\n  var element = binding.element;\n  var propertyName = !this.elementNs && UPDATE_PROPERTIES[binding.name];\n  if (propertyName) {\n    if (propertyName === 'value' && (element.value === value || element.valueAsNumber === value)) return;\n    if (value === void 0) value = null;\n    element[propertyName] = value;\n    return;\n  }\n  if (value === false || value == null) {\n    if (this.ns) {\n      element.removeAttributeNS(this.ns, binding.name);\n    } else {\n      element.removeAttribute(binding.name);\n    }\n    return;\n  }\n  if (value === true) value = binding.name;\n  if (this.ns) {\n    element.setAttributeNS(this.ns, binding.name, value);\n  } else {\n    element.setAttribute(binding.name, value);\n  }\n};\nDynamicAttribute.prototype.type = 'DynamicAttribute';\nDynamicAttribute.prototype.serialize = function() {\n  return serializeObject.instance(this, this.expression, this.ns);\n};\n\nfunction getUnescapedValue(expression, context) {\n  var unescaped = true;\n  var value = expression.get(context, unescaped);\n  while (value instanceof Template) {\n    value = value.get(context, unescaped);\n  }\n  return value;\n}\n\nfunction Element(tagName, attributes, content, hooks, selfClosing, notClosed, ns) {\n  this.tagName = tagName;\n  this.attributes = attributes;\n  this.content = content;\n  this.hooks = hooks;\n  this.selfClosing = selfClosing;\n  this.notClosed = notClosed;\n  this.ns = ns;\n\n  this.endTag = getEndTag(tagName, selfClosing, notClosed);\n  this.startClose = getStartClose(selfClosing);\n  var lowerTagName = tagName && tagName.toLowerCase();\n  this.unescapedContent = (lowerTagName === 'script' || lowerTagName === 'style');\n}\nElement.prototype = new Template();\nElement.prototype.getTagName = function() {\n  return this.tagName;\n};\nElement.prototype.getEndTag = function() {\n  return this.endTag;\n};\nElement.prototype.get = function(context) {\n  var tagName = this.getTagName(context);\n  var endTag = this.getEndTag(tagName);\n  var tagItems = [tagName];\n  for (var key in this.attributes) {\n    var value = this.attributes[key].get(context);\n    if (value === true) {\n      tagItems.push(key);\n    } else if (value !== false && value != null) {\n      tagItems.push(key + '=\"' + escapeAttribute(value) + '\"');\n    }\n  }\n  var startTag = '<' + tagItems.join(' ') + this.startClose;\n  if (this.content) {\n    var inner = contentHtml(this.content, context, this.unescapedContent);\n    return startTag + inner + endTag;\n  }\n  return startTag + endTag;\n};\nElement.prototype.appendTo = function(parent, context) {\n  var tagName = this.getTagName(context);\n  var element = (this.ns) ?\n    document.createElementNS(this.ns, tagName) :\n    document.createElement(tagName);\n  emitHooks(this.hooks, context, element);\n  for (var key in this.attributes) {\n    var attribute = this.attributes[key];\n    var value = attribute.getBound(context, element, key, this.ns);\n    if (value === false || value == null) continue;\n    var propertyName = !this.ns && CREATE_PROPERTIES[key];\n    if (propertyName) {\n      element[propertyName] = value;\n      continue;\n    }\n    if (value === true) value = key;\n    if (attribute.ns) {\n      element.setAttributeNS(attribute.ns, key, value);\n    } else {\n      element.setAttribute(key, value);\n    }\n  }\n  if (this.content) appendContent(element, this.content, context);\n  parent.appendChild(element);\n};\nElement.prototype.attachTo = function(parent, node, context) {\n  var tagName = this.getTagName(context);\n  if (\n    !node ||\n    node.nodeType !== 1 ||\n    node.tagName.toLowerCase() !== tagName.toLowerCase()\n  ) {\n    throw attachError(parent, node);\n  }\n  emitHooks(this.hooks, context, node);\n  for (var key in this.attributes) {\n    // Get each attribute to create bindings\n    this.attributes[key].getBound(context, node, key, this.ns);\n    // TODO: Ideally, this would also check that the node's current attributes\n    // are equivalent, but there are some tricky edge cases\n  }\n  if (this.content) attachContent(node, node.firstChild, this.content, context);\n  return node.nextSibling;\n};\nElement.prototype.type = 'Element';\nElement.prototype.serialize = function() {\n  return serializeObject.instance(\n    this\n  , this.tagName\n  , this.attributes\n  , this.content\n  , this.hooks\n  , this.selfClosing\n  , this.notClosed\n  , this.ns\n  );\n};\n\nfunction DynamicElement(tagName, attributes, content, hooks, selfClosing, notClosed, ns) {\n  this.tagName = tagName;\n  this.attributes = attributes;\n  this.content = content;\n  this.hooks = hooks;\n  this.selfClosing = selfClosing;\n  this.notClosed = notClosed;\n  this.ns = ns;\n\n  this.startClose = getStartClose(selfClosing);\n  this.unescapedContent = false;\n}\nDynamicElement.prototype = new Element();\nDynamicElement.prototype.getTagName = function(context) {\n  return getUnescapedValue(this.tagName, context);\n};\nDynamicElement.prototype.getEndTag = function(tagName) {\n  return getEndTag(tagName, this.selfClosing, this.notClosed);\n};\nDynamicElement.prototype.type = 'DynamicElement';\n\nfunction getStartClose(selfClosing) {\n  return (selfClosing) ? ' />' : '>';\n}\n\nfunction getEndTag(tagName, selfClosing, notClosed) {\n  var lowerTagName = tagName && tagName.toLowerCase();\n  var isVoid = VOID_ELEMENTS[lowerTagName];\n  return (isVoid || selfClosing || notClosed) ? '' : '</' + tagName + '>';\n}\n\nfunction getAttributeValue(element, name) {\n  var propertyName = UPDATE_PROPERTIES[name];\n  return (propertyName) ? element[propertyName] : element.getAttribute(name);\n}\n\nfunction emitHooks(hooks, context, value) {\n  if (!hooks) return;\n  for (var i = 0, len = hooks.length; i < len; i++) {\n    hooks[i].emit(context, value);\n  }\n}\n\nfunction Block(expression, content) {\n  this.expression = expression;\n  this.ending = '/' + expression;\n  this.content = content;\n}\nBlock.prototype = new Template();\nBlock.prototype.get = function(context, unescaped) {\n  var blockContext = context.child(this.expression);\n  return contentHtml(this.content, blockContext, unescaped);\n};\nBlock.prototype.appendTo = function(parent, context, binding) {\n  var blockContext = context.child(this.expression);\n  var start = document.createComment(this.expression);\n  var end = document.createComment(this.ending);\n  parent.appendChild(start);\n  appendContent(parent, this.content, blockContext);\n  parent.appendChild(end);\n  updateRange(context, binding, this, start, end);\n};\nBlock.prototype.attachTo = function(parent, node, context) {\n  var blockContext = context.child(this.expression);\n  var start = document.createComment(this.expression);\n  var end = document.createComment(this.ending);\n  parent.insertBefore(start, node || null);\n  node = attachContent(parent, node, this.content, blockContext);\n  parent.insertBefore(end, node || null);\n  updateRange(context, null, this, start, end);\n  return node;\n};\nBlock.prototype.type = 'Block';\nBlock.prototype.serialize = function() {\n  return serializeObject.instance(this, this.expression, this.content);\n};\nBlock.prototype.update = function(context, binding) {\n  // Get start and end in advance, since binding is mutated in getFragment\n  var start = binding.start;\n  var end = binding.end;\n  var fragment = this.getFragment(context, binding);\n  replaceRange(context, start, end, fragment, binding);\n};\n\nfunction ConditionalBlock(expressions, contents) {\n  this.expressions = expressions;\n  this.beginning = expressions.join('; ');\n  this.ending = '/' + this.beginning;\n  this.contents = contents;\n}\nConditionalBlock.prototype = new Block();\nConditionalBlock.prototype.get = function(context, unescaped) {\n  var condition = this.getCondition(context);\n  if (condition == null) return '';\n  var expression = this.expressions[condition];\n  var blockContext = context.child(expression);\n  return contentHtml(this.contents[condition], blockContext, unescaped);\n};\nConditionalBlock.prototype.appendTo = function(parent, context, binding) {\n  var start = document.createComment(this.beginning);\n  var end = document.createComment(this.ending);\n  parent.appendChild(start);\n  var condition = this.getCondition(context);\n  if (condition != null) {\n    var expression = this.expressions[condition];\n    var blockContext = context.child(expression);\n    appendContent(parent, this.contents[condition], blockContext);\n  }\n  parent.appendChild(end);\n  updateRange(context, binding, this, start, end, null, condition);\n};\nConditionalBlock.prototype.attachTo = function(parent, node, context) {\n  var start = document.createComment(this.beginning);\n  var end = document.createComment(this.ending);\n  parent.insertBefore(start, node || null);\n  var condition = this.getCondition(context);\n  if (condition != null) {\n    var expression = this.expressions[condition];\n    var blockContext = context.child(expression);\n    node = attachContent(parent, node, this.contents[condition], blockContext);\n  }\n  parent.insertBefore(end, node || null);\n  updateRange(context, null, this, start, end, null, condition);\n  return node;\n};\nConditionalBlock.prototype.type = 'ConditionalBlock';\nConditionalBlock.prototype.serialize = function() {\n  return serializeObject.instance(this, this.expressions, this.contents);\n};\nConditionalBlock.prototype.update = function(context, binding) {\n  var condition = this.getCondition(context);\n  if (condition === binding.condition) return;\n  binding.condition = condition;\n  // Get start and end in advance, since binding is mutated in getFragment\n  var start = binding.start;\n  var end = binding.end;\n  var fragment = this.getFragment(context, binding);\n  replaceRange(context, start, end, fragment, binding);\n};\nConditionalBlock.prototype.getCondition = function(context) {\n  for (var i = 0, len = this.expressions.length; i < len; i++) {\n    if (this.expressions[i].truthy(context)) {\n      return i;\n    }\n  }\n};\n\nfunction EachBlock(expression, content, elseContent) {\n  this.expression = expression;\n  this.ending = '/' + expression;\n  this.content = content;\n  this.elseContent = elseContent;\n}\nEachBlock.prototype = new Block();\nEachBlock.prototype.get = function(context, unescaped) {\n  var items = this.expression.get(context);\n  var listContext = context.child(this.expression);\n  if (items && items.length) {\n    var html = '';\n    for (var i = 0, len = items.length; i < len; i++) {\n      var itemContext = listContext.eachChild(i);\n      html += contentHtml(this.content, itemContext, unescaped);\n    }\n    return html;\n  } else if (this.elseContent) {\n    return contentHtml(this.elseContent, listContext, unescaped);\n  }\n  return '';\n};\nEachBlock.prototype.appendTo = function(parent, context, binding) {\n  var items = this.expression.get(context);\n  var listContext = context.child(this.expression);\n  var start = document.createComment(this.expression);\n  var end = document.createComment(this.ending);\n  parent.appendChild(start);\n  if (items && items.length) {\n    for (var i = 0, len = items.length; i < len; i++) {\n      var itemContext = listContext.eachChild(i);\n      this.appendItemTo(parent, itemContext, start);\n    }\n  } else if (this.elseContent) {\n    appendContent(parent, this.elseContent, listContext);\n  }\n  parent.appendChild(end);\n  updateRange(context, binding, this, start, end);\n};\nEachBlock.prototype.appendItemTo = function(parent, context, itemFor, binding) {\n  var before = parent.lastChild;\n  var start, end;\n  appendContent(parent, this.content, context);\n  if (before === parent.lastChild) {\n    start = end = document.createComment('empty');\n    parent.appendChild(start);\n  } else {\n    start = (before && before.nextSibling) || parent.firstChild;\n    end = parent.lastChild;\n  }\n  updateRange(context, binding, this, start, end, itemFor);\n};\nEachBlock.prototype.attachTo = function(parent, node, context) {\n  var items = this.expression.get(context);\n  var listContext = context.child(this.expression);\n  var start = document.createComment(this.expression);\n  var end = document.createComment(this.ending);\n  parent.insertBefore(start, node || null);\n  if (items && items.length) {\n    for (var i = 0, len = items.length; i < len; i++) {\n      var itemContext = listContext.eachChild(i);\n      node = this.attachItemTo(parent, node, itemContext, start);\n    }\n  } else if (this.elseContent) {\n    node = attachContent(parent, node, this.elseContent, listContext);\n  }\n  parent.insertBefore(end, node || null);\n  updateRange(context, null, this, start, end);\n  return node;\n};\nEachBlock.prototype.attachItemTo = function(parent, node, context, itemFor) {\n  var start, end;\n  var nextNode = attachContent(parent, node, this.content, context);\n  if (nextNode === node) {\n    start = end = document.createComment('empty');\n    parent.insertBefore(start, node || null);\n  } else {\n    start = node;\n    end = (nextNode && nextNode.previousSibling) || parent.lastChild;\n  }\n  updateRange(context, null, this, start, end, itemFor);\n  return nextNode;\n};\nEachBlock.prototype.update = function(context, binding) {\n  var start = binding.start;\n  var end = binding.end;\n  if (binding.itemFor) {\n    var fragment = document.createDocumentFragment();\n    this.appendItemTo(fragment, context, binding.itemFor, binding);\n  } else {\n    var fragment = this.getFragment(context, binding);\n  }\n  replaceRange(context, start, end, fragment, binding);\n};\nEachBlock.prototype.insert = function(context, binding, index, howMany) {\n  var items = this.expression.get(context);\n  var listContext = context.child(this.expression);\n  var node = indexStartNode(binding, index);\n  var fragment = document.createDocumentFragment();\n  for (var i = index, len = index + howMany; i < len; i++) {\n    var itemContext = listContext.eachChild(i);\n    this.appendItemTo(fragment, itemContext, binding.start);\n  }\n  binding.start.parentNode.insertBefore(fragment, node || null);\n};\nEachBlock.prototype.remove = function(context, binding, index, howMany) {\n  var node = indexStartNode(binding, index);\n  var i = 0;\n  var parent = binding.start.parentNode;\n  while (node) {\n    var nextNode = node.nextSibling;\n    parent.removeChild(node);\n    emitRemoved(context, node, binding);\n    if (node.$bindEnd && node.$bindEnd.itemFor === binding.start) {\n      if (howMany === ++i) return;\n    }\n    node = nextNode;\n  }\n};\nEachBlock.prototype.move = function(context, binding, from, to, howMany) {\n  var node = indexStartNode(binding, from);\n  var fragment = document.createDocumentFragment();\n  var i = 0;\n  while (node) {\n    var nextNode = node.nextSibling;\n    fragment.appendChild(node);\n    if (node.$bindEnd && node.$bindEnd.itemFor === binding.start) {\n      if (howMany === ++i) break;\n    }\n    node = nextNode;\n  }\n  node = indexStartNode(binding, to);\n  binding.start.parentNode.insertBefore(fragment, node || null);\n};\nEachBlock.prototype.type = 'EachBlock';\nEachBlock.prototype.serialize = function() {\n  return serializeObject.instance(this, this.expression, this.content, this.elseContent);\n};\n\nfunction indexStartNode(binding, index) {\n  var node = binding.start;\n  var i = 0;\n  while (node = node.nextSibling) {\n    if (node === binding.end) return node;\n    if (node.$bindStart && node.$bindStart.itemFor === binding.start) {\n      if (index === i) return node;\n      i++;\n    }\n  }\n}\n\nfunction updateRange(context, binding, template, start, end, itemFor, condition) {\n  if (binding) {\n    binding.start = start;\n    binding.end = end;\n    binding.condition = condition;\n    setNodeProperty(start, '$bindStart', binding);\n    setNodeProperty(end, '$bindEnd', binding);\n  } else {\n    context.addBinding(new RangeBinding(template, context, start, end, itemFor, condition));\n  }\n}\n\nfunction appendContent(parent, content, context) {\n  for (var i = 0, len = content.length; i < len; i++) {\n    content[i].appendTo(parent, context);\n  }\n}\nfunction attachContent(parent, node, content, context) {\n  for (var i = 0, len = content.length; i < len; i++) {\n    node = content[i].attachTo(parent, node, context);\n  }\n  return node;\n}\nfunction contentHtml(content, context, unescaped) {\n  var html = '';\n  for (var i = 0, len = content.length; i < len; i++) {\n    html += content[i].get(context, unescaped);\n  }\n  return html;\n}\nfunction replaceRange(context, start, end, fragment, binding, innerOnly) {\n  var parent = start.parentNode;\n  // This shouldn't happen if bindings are cleaned up properly, but check\n  // in case they aren't\n  if (!parent) return;\n  if (start === end) {\n    parent.replaceChild(fragment, start);\n    emitRemoved(context, start, binding);\n    return;\n  }\n  // Remove all nodes from start to end\n  var node = (innerOnly) ? start.nextSibling : start;\n  var nextNode;\n  while (node) {\n    nextNode = node.nextSibling;\n    emitRemoved(context, node, binding);\n    if (innerOnly && node === end) {\n      nextNode = end;\n      break;\n    }\n    parent.removeChild(node);\n    if (node === end) break;\n    node = nextNode;\n  }\n  // This also works if nextNode is null, by doing an append\n  parent.insertBefore(fragment, nextNode || null);\n}\nfunction emitRemoved(context, node, ignore) {\n  context.removeNode(node);\n  var binding = node.$bindNode;\n  if (binding && binding !== ignore) context.removeBinding(binding);\n  binding = node.$bindStart;\n  if (binding && binding !== ignore) context.removeBinding(binding);\n  var attributes = node.$bindAttributes;\n  if (attributes) {\n    for (var key in attributes) {\n      context.removeBinding(attributes[key]);\n    }\n  }\n  for (node = node.firstChild; node; node = node.nextSibling) {\n    emitRemoved(context, node, ignore);\n  }\n}\n\nfunction attachError(parent, node) {\n  if (typeof console !== 'undefined') {\n    console.error('Attach failed for', node, 'within', parent);\n  }\n  return new Error('Attaching bindings failed, because HTML structure ' +\n    'does not match client rendering.'\n  );\n}\n\nfunction Binding() {\n  this.meta = null;\n}\nBinding.prototype.type = 'Binding';\nBinding.prototype.update = function() {\n  this.template.update(this.context, this);\n};\nBinding.prototype.insert = function() {\n  this.update();\n};\nBinding.prototype.remove = function() {\n  this.update();\n};\nBinding.prototype.move = function() {\n  this.update();\n};\n\nfunction NodeBinding(template, context, node) {\n  this.template = template;\n  this.context = context;\n  this.node = node;\n  this.meta = null;\n  setNodeProperty(node, '$bindNode', this);\n}\nNodeBinding.prototype = new Binding();\nNodeBinding.prototype.type = 'NodeBinding';\n\nfunction AttributeBindingsMap() {}\nfunction AttributeBinding(template, context, element, name) {\n  this.template = template;\n  this.context = context;\n  this.element = element;\n  this.name = name;\n  this.meta = null;\n  var map = element.$bindAttributes ||\n    (element.$bindAttributes = new AttributeBindingsMap());\n  map[name] = this;\n}\nAttributeBinding.prototype = new Binding();\nAttributeBinding.prototype.type = 'AttributeBinding';\n\nfunction RangeBinding(template, context, start, end, itemFor, condition) {\n  this.template = template;\n  this.context = context;\n  this.start = start;\n  this.end = end;\n  this.itemFor = itemFor;\n  this.condition = condition;\n  this.meta = null;\n  setNodeProperty(start, '$bindStart', this);\n  setNodeProperty(end, '$bindEnd', this);\n}\nRangeBinding.prototype = new Binding();\nRangeBinding.prototype.type = 'RangeBinding';\nRangeBinding.prototype.insert = function(index, howMany) {\n  if (this.template.insert) {\n    this.template.insert(this.context, this, index, howMany);\n  } else {\n    this.template.update(this.context, this);\n  }\n};\nRangeBinding.prototype.remove = function(index, howMany) {\n  if (this.template.remove) {\n    this.template.remove(this.context, this, index, howMany);\n  } else {\n    this.template.update(this.context, this);\n  }\n};\nRangeBinding.prototype.move = function(from, to, howMany) {\n  if (this.template.move) {\n    this.template.move(this.context, this, from, to, howMany);\n  } else {\n    this.template.update(this.context, this);\n  }\n};\n\n\n//// Utility functions ////\n\nfunction noop() {}\n\nfunction mergeInto(from, to) {\n  for (var key in from) {\n    to[key] = from[key];\n  }\n}\n\nfunction escapeHtml(string) {\n  string = string + '';\n  return string.replace(/[&<]/g, function(match) {\n    return (match === '&') ? '&amp;' : '&lt;';\n  });\n}\n\nfunction escapeAttribute(string) {\n  string = string + '';\n  return string.replace(/[&\"]/g, function(match) {\n    return (match === '&') ? '&amp;' : '&quot;';\n  });\n}\n\n\n//// Shims & workarounds ////\n\n// General notes:\n//\n// In all cases, Node.insertBefore should have `|| null` after its second\n// argument. IE works correctly when the argument is ommitted or equal\n// to null, but it throws and error if it is equal to undefined.\n\nif (!Array.isArray) {\n  Array.isArray = function(value) {\n    return Object.prototype.toString.call(value) === '[object Array]';\n  };\n}\n\n// Equivalent to textNode.splitText, which is buggy in IE <=9\nfunction splitData(node, index) {\n  var newNode = node.cloneNode(false);\n  newNode.deleteData(0, index);\n  node.deleteData(index, node.length - index);\n  node.parentNode.insertBefore(newNode, node.nextSibling || null);\n  return newNode;\n}\n\n// Defined so that it can be overriden in IE <=8\nfunction setNodeProperty(node, key, value) {\n  return node[key] = value;\n}\n\nfunction normalizeLineBreaks(string) {\n  return string;\n}\n\n(function() {\n  // Don't try to shim in Node.js environment\n  if (typeof document === 'undefined') return;\n\n  var div = document.createElement('div');\n  div.innerHTML = '\\r\\n<br>\\n'\n  var windowsLength = div.firstChild.data.length;\n  var unixLength = div.lastChild.data.length;\n  if (windowsLength === 1 && unixLength === 1) {\n    normalizeLineBreaks = function(string) {\n      return string.replace(/\\r\\n/g, '\\n');\n    };\n  } else if (windowsLength === 2 && unixLength === 2) {\n    normalizeLineBreaks = function(string) {\n      return string.replace(/(^|[^\\r])(\\n+)/g, function(match, value, newLines) {\n        for (var i = newLines.length; i--;) {\n          value += '\\r\\n';\n        }\n        return value;\n      });\n    };\n  }\n\n  // TODO: Shim createHtmlFragment for old IE\n\n  // TODO: Shim setAttribute('style'), which doesn't work in IE <=7\n  // http://webbugtrack.blogspot.com/2007/10/bug-245-setattribute-style-does-not.html\n\n  // TODO: Investigate whether input name attribute works in IE <=7. We could\n  // override Element::appendTo to use IE's alternative createElement syntax:\n  // document.createElement('<input name=\"xxx\">')\n  // http://webbugtrack.blogspot.com/2007/10/bug-235-createelement-is-broken-in-ie.html\n\n  // In IE, input.defaultValue doesn't work correctly, so use input.value,\n  // which mistakenly but conveniently sets both the value property and attribute.\n  //\n  // Surprisingly, in IE <=7, input.defaultChecked must be used instead of\n  // input.checked before the input is in the document.\n  // http://webbugtrack.blogspot.com/2007/11/bug-299-setattribute-checked-does-not.html\n  var input = document.createElement('input');\n  input.defaultValue = 'x';\n  if (input.value !== 'x') {\n    CREATE_PROPERTIES.value = 'value';\n  }\n\n  try {\n    // TextNodes are not expando in IE <=8\n    document.createTextNode('').$try = 0;\n  } catch (err) {\n    setNodeProperty = function(node, key, value) {\n      // If trying to set a property on a TextNode, create a proxy CommentNode\n      // and set the property on that node instead. Put the proxy after the\n      // TextNode if marking the end of a range, and before otherwise.\n      if (node.nodeType === 3) {\n        var proxyNode;\n        if (key === '$bindEnd') {\n          proxyNode = node.nextSibling;\n          if (!proxyNode || proxyNode.$bindProxy !== node) {\n            proxyNode = document.createComment('proxy');\n            proxyNode.$bindProxy = node;\n            node.parentNode.insertBefore(proxyNode, node.nextSibling || null);\n          }\n        } else {\n          proxyNode = node.previousSibling;\n          if (!proxyNode || proxyNode.$bindProxy !== node) {\n            proxyNode = document.createComment('proxy');\n            proxyNode.$bindProxy = node;\n            node.parentNode.insertBefore(proxyNode, node || null);\n          }\n        }\n        return proxyNode[key] = value;\n      }\n      // Set the property directly on other node types\n      return node[key] = value;\n    };\n  }\n})();\n","exports.instance = serializeInstance;\nexports.args = serializeArgs;\nexports.value = serializeValue;\n\nfunction serializeInstance(instance) {\n  var args = Array.prototype.slice.call(arguments, 1);\n  return 'new ' + instance.module + '.' + instance.type +\n    '(' + serializeArgs(args) + ')';\n}\n\nfunction serializeArgs(args) {\n  // Map each argument into its string representation\n  var items = [];\n  for (var i = args.length; i--;) {\n    var item = serializeValue(args[i]);\n    items.unshift(item);\n  }\n  // Remove trailing null values, assuming they are optional\n  for (var i = items.length; i--;) {\n    var item = items[i];\n    if (item !== 'void 0' && item !== 'null') break;\n    items.pop();\n  }\n  return items.join(', ');\n}\n\nfunction serializeValue(input) {\n  if (input && input.serialize) {\n    return input.serialize();\n\n  } else if (typeof input === 'undefined') {\n    return 'void 0';\n\n  } else if (input === null) {\n    return 'null';\n\n  } else if (typeof input === 'string') {\n    return formatString(input);\n\n  } else if (typeof input === 'number' || typeof input === 'boolean') {\n    return input + '';\n\n  } else if (Array.isArray(input)) {\n    var items = [];\n    for (var i = 0; i < input.length; i++) {\n      var value = serializeValue(input[i]);\n      items.push(value);\n    }\n    return '[' + items.join(', ') + ']';\n\n  } else if (typeof input === 'object') {\n    var items = [];\n    for (var key in input) {\n      var value = serializeValue(input[key]);\n      items.push(formatString(key) + ': ' + value);\n    }\n    return '{' + items.join(', ') + '}';\n  }\n}\nfunction formatString(value) {\n  var escaped = value.replace(/['\\r\\n\\\\]/g, function(match) {\n    return (match === '\\'') ? '\\\\\\'' :\n      (match === '\\r') ? '\\\\r' :\n      (match === '\\n') ? '\\\\n' :\n      (match === '\\\\') ? '\\\\\\\\' :\n      '';\n  });\n  return '\\'' + escaped + '\\'';\n}\n","var qs = require('qs')\nvar parseUrl = require('url').parse\nvar resolveUrl = require('url').resolve\nvar router = require('./router')\nvar currentPath = window.location.pathname + window.location.search\n\n// Replace the initial state with the current URL immediately,\n// so that it will be rendered if the state is later popped\nif (window.history.replaceState) {\n  window.history.replaceState({\n    $render: true,\n    $method: 'get'\n  }, null, window.location.href)\n}\n\nmodule.exports = History\n\nfunction History(app, routes) {\n  this.app = app\n  this.routes = routes\n\n  if (window.history.pushState) {\n    addListeners(this)\n    return\n  }\n  this.push = function(url) {\n    window.location.assign(url)\n  }\n  this.replace = function(url) {\n    window.location.replace(url)\n  }\n}\n\nHistory.prototype.push = function(url, render, state, e) {\n  this._update('pushState', url, render, state, e)\n}\n\nHistory.prototype.replace = function(url, render, state, e) {\n  this._update('replaceState', url, render, state, e)\n}\n\n// Rerender the current url locally\nHistory.prototype.refresh = function() {\n  var path = routePath(window.location.href)\n  // Note that we don't pass previous to avoid triggering transitions\n  router.render(this, {url: path, method: 'get'})\n}\n\nHistory.prototype.back = function() {\n  window.history.back()\n}\n\nHistory.prototype.forward = function() {\n  window.history.forward()\n}\n\nHistory.prototype.go = function(i) {\n  window.history.go(i)\n}\n\nHistory.prototype._update = function(historyMethod, relativeUrl, render, state, e) {\n  var url = resolveUrl(window.location.href, relativeUrl)\n  var path = routePath(url)\n\n  // TODO: history.push should set the window.location with external urls\n  if (!path) return\n  if (render == null) render = true\n  if (state == null) state = {}\n\n  // Update the URL\n  var options = renderOptions(e, path)\n  state.$render = true\n  state.$method = options.method\n  window.history[historyMethod](state, null, options.url)\n  currentPath = window.location.pathname + window.location.search\n  if (render) router.render(this, options, e)\n}\n\nHistory.prototype.page = function() {\n  var page = this.app.createPage()\n  var history = this\n\n  function redirect(url) {\n    if (url === 'back') return history.back()\n    // TODO: Add support for `basepath` option like Express\n    if (url === 'home') url = '\\\\'\n    history.replace(url, true)\n  }\n\n  page.redirect = redirect\n  return page\n}\n\n// Get the pathname if it is on the same protocol and domain\nfunction routePath(url) {\n  var match = parseUrl(url)\n  return match &&\n    match.protocol === window.location.protocol &&\n    match.host === window.location.host &&\n    match.pathname + (match.search || '')\n}\n\nfunction renderOptions(e, path) {\n  // If this is a form submission, extract the form data and\n  // append it to the url for a get or params.body for a post\n  if (e && e.type === 'submit') {\n    var form = e.target\n    var elements = form.elements\n    var query = []\n    for (var i = 0, len = elements.length, el; i < len; i++) {\n      el = elements[i]\n      var name = el.name\n      if (!name) continue\n      var value = el.value\n      query.push(encodeURIComponent(name) + '=' + encodeURIComponent(value))\n      if (name === '_method') {\n        var override = value.toLowerCase()\n        if (override === 'delete') override = 'del'\n      }\n    }\n    query = query.join('&')\n    if (form.method.toLowerCase() === 'post') {\n      var method = override || 'post'\n      var body = qs.parse(query)\n    } else {\n      method = 'get'\n      path += '?' + query\n    }\n  } else {\n    method = 'get'\n  }\n  return {\n    method: method\n  , url: path\n  , previous: window.location.pathname + window.location.search\n  , body: body\n  , form: form\n  , link: e && e._tracksLink\n  }\n}\n\nfunction addListeners(history) {\n\n  // Detect clicks on links\n  function onClick(e) {\n    var el = e.target\n\n    // Ignore command click, control click, and non-left click\n    if (e.metaKey || e.which !== 1) return\n\n    // Ignore if already prevented\n    if (e.defaultPrevented) return\n\n    // Also look up for parent links (<a><img></a>)\n    while (el) {\n      var url = el.href\n      if (url) {\n\n        // Ignore if created by Tracks\n        if (el.hasAttribute && el.hasAttribute('data-router-ignore')) return\n\n        // Ignore links meant to open in a different window or frame\n        if (el.target && el.target !== '_self') return\n\n        // Ignore hash links to the same page\n        var hashIndex = url.indexOf('#')\n        if (~hashIndex && url.slice(0, hashIndex) === window.location.href.replace(/#.*/, '')) {\n          return\n        }\n\n        e._tracksLink = el\n        history.push(url, true, null, e)\n        return\n      }\n\n      el = el.parentNode\n    }\n  }\n\n  function onSubmit(e) {\n    var target = e.target\n\n    // Ignore if already prevented\n    if (e.defaultPrevented) return\n\n    // Only handle if emitted on a form element that isn't multipart\n    if (target.tagName.toLowerCase() !== 'form') return\n    if (target.enctype === 'multipart/form-data') return\n\n    // Ignore if created by Tracks\n    if (target.hasAttribute && target.hasAttribute('data-router-ignore')) return\n\n    // Use the url from the form action, defaulting to the current url\n    var url = target.action || window.location.href\n    history.push(url, true, null, e)\n  }\n\n  function onPopState(e) {\n    // HACK: Chrome sometimes does a pop state before the app is set up properly\n    if (!history.app.page) return\n\n    var previous = currentPath\n    var state = e.state\n    currentPath = window.location.pathname + window.location.search\n\n    var options = {\n      previous: previous\n    , url: currentPath\n    }\n\n    if (state) {\n      if (!state.$render) return\n      options.method = state.$method\n      // Note that the post body is only sent on the initial reqest\n      // and it is empty if the state is later popped\n      return router.render(history, options)\n    }\n\n    // The state object will be null for states created by jump links.\n    // window.location.hash cannot be used, because it returns nothing\n    // if the url ends in just a hash character\n    var url = window.location.href\n      , hashIndex = url.indexOf('#')\n      , el, id\n    if (~hashIndex && currentPath !== previous) {\n      options.method = 'get'\n      router.render(history, options)\n      id = url.slice(hashIndex + 1)\n      if (el = document.getElementById(id) || document.getElementsByName(id)[0]) {\n        el.scrollIntoView()\n      }\n    }\n  }\n\n  document.addEventListener('click', onClick, true)\n  document.addEventListener('submit', onSubmit, false)\n  window.addEventListener('popstate', onPopState, true)\n}\n","var Route = require('../vendor/express/router/route')\nvar History = require('./History')\nvar router = module.exports = require('./router')\n\nrouter.setup = setup\n\nfunction setup(app) {\n  var routes = {\n    queue: {}\n  , transitional: {}\n  , app: app\n  }\n  app.history = new History(app, routes)\n\n  ;['get', 'post', 'put', 'del', 'enter', 'exit'].forEach(function(method) {\n    var queue = routes.queue[method] = []\n    var transitional = routes.transitional[method] = []\n\n    app[method] = function(pattern, callback) {\n      if (Array.isArray(pattern)) {\n        pattern.forEach(function(item) {\n          app[method](item, callback)\n        })\n        return app\n      }\n\n      if (router.isTransitional(pattern)) {\n        var from = pattern.from\n        var to = pattern.to\n        var forward = pattern.forward || (callback && callback.forward) || callback\n        var back = pattern.back || (callback && callback.back)\n\n        var fromRoute = new Route(method, from, back)\n        var toRoute = new Route(method, to, forward)\n        fromRoute.isTransitional = true\n        toRoute.isTransitional = true\n        transitional.push({\n          from: fromRoute\n        , to: toRoute\n        })\n        if (back) transitional.push({\n          from: toRoute\n        , to: fromRoute\n        })\n\n        return app\n      }\n\n      queue.push(new Route(method, pattern, callback))\n      return app\n    }\n  })\n}\n","var qs = require('qs')\nvar nodeUrl = require('url');\n\nmodule.exports = {\n  render: render\n, isTransitional: isTransitional\n, mapRoute: mapRoute\n}\n\nfunction isTransitional(pattern) {\n  return pattern.hasOwnProperty('from') && pattern.hasOwnProperty('to')\n}\n\nfunction mapRoute(from, params) {\n  var i = params.url.indexOf('?')\n  var queryString = (~i) ? params.url.slice(i) : ''\n  // If the route looks like /:a/:b?/:c/:d?\n  // and :b and :d are missing, return /a/c\n  // Thus, skip the / if the value is missing\n  var i = 0\n  var path = from.replace(/\\/(?:(?:\\:([^?\\/:*(]+)(?:\\([^)]+\\))?)|\\*)(\\?)?/g, onMatch)\n  function onMatch(match, key, optional) {\n    var value = key ? params[key] : params[i++]\n    return (optional && value == null) ? '' : '/' + encodeURIComponent(value)\n  }\n  return path + queryString\n}\n\nfunction render(history, options, e) {\n  var req = new RenderReq(history.app.page, history.routes, options, e)\n  req.routeTransitional(0, function() {\n    req.page = history.page()\n    req.routeQueue(0, function() {\n      // Cancel rendering by this app if no routes match\n      req.cancel()\n    })\n  })\n}\n\nfunction RenderReq(page, routes, options, e) {\n  this.page = page\n  this.options = options\n  this.e = e\n  this.setUrl(options.url.replace(/#.*/, ''))\n  var queryString = nodeUrl.parse(this.url).query;\n  this.query = queryString ? qs.parse(queryString) : {}\n  this.method = options.method\n  this.body = options.body || {}\n  this.setPrevious(options.previous)\n  this.transitional = routes.transitional[this.method]\n  this.queue = routes.queue[this.method]\n  this.app = routes.app\n}\n\nRenderReq.prototype.cancel = function() {\n  var options = this.options\n  // Don't do anything if this is the result of an event, since the\n  // appropriate action will happen by default\n  if (this.e || options.noNavigate) return\n  // Otherwise, manually perform appropriate action\n  if (options.form) {\n    options.form.setAttribute('data-router-ignore', '')\n    options.form.submit()\n  } else {\n    window.location.assign(options.url)\n  }\n}\n\nRenderReq.prototype.setUrl = function(url) {\n  this.url = url\n  this.path = url.replace(/\\?.*/, '')\n}\nRenderReq.prototype.setPrevious = function(previous) {\n  this.previous = previous\n  this.previousPath = previous && previous.replace(/\\?.*/, '')\n}\n\nRenderReq.prototype.routeTransitional = function(i, next) {\n  i || (i = 0)\n  var item\n  while (item = this.transitional[i++]) {\n    if (!item.to.match(this.path) || !item.from.match(this.previousPath)) continue\n    var req = this\n    var params = this.routeParams(item.to)\n    // Even though we don't need to do anything after a done, pass a\n    // no op function, so that routes can expect it to be defined\n    function done() {}\n    this.onMatch(item.to, params, function(err) {\n      if (err) return req.cancel()\n      req.routeTransitional(i, next)\n    }, done)\n    return\n  }\n  next()\n}\n\nRenderReq.prototype.routeQueue = function(i, next) {\n  i || (i = 0)\n  var route\n  while (route = this.queue[i++]) {\n    if (!route.match(this.path)) continue\n    var req = this\n    var params = this.routeParams(route)\n    this.onMatch(route, params, function(err) {\n      if (err) return req.cancel()\n      req.routeQueue(i, next)\n    })\n    return\n  }\n  next()\n}\n\nRenderReq.prototype.onMatch = function(route, params, next, done) {\n  if (!this.page) return next()\n  // Stop the default browser action, such as clicking a link or submitting a form\n  if (this.e) {\n    this.e.preventDefault()\n    this.e = null\n  }\n  this.page.params = params\n  if (route.isTransitional) {\n    this.app.onRoute(route.callbacks, this.page, next, done)\n  } else {\n    this.app.onRoute(route.callbacks, this.page, next)\n  }\n}\n\nRenderReq.prototype.routeParams = function(route) {\n  var routeParams = route.params\n  var params = routeParams.slice()\n\n  for (var key in routeParams) {\n    params[key] = routeParams[key]\n  }\n  params.previous = this.previous\n  params.url = this.url\n  params.body = this.body\n  params.query = this.query\n  params.method = this.method\n  return params\n}\n","/**\n * Object#toString() ref for stringify().\n */\n\nvar toString = Object.prototype.toString;\n\n/**\n * Object#hasOwnProperty ref\n */\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\n/**\n * Array#indexOf shim.\n */\n\nvar indexOf = typeof Array.prototype.indexOf === 'function'\n  ? function(arr, el) { return arr.indexOf(el); }\n  : function(arr, el) {\n      for (var i = 0; i < arr.length; i++) {\n        if (arr[i] === el) return i;\n      }\n      return -1;\n    };\n\n/**\n * Array.isArray shim.\n */\n\nvar isArray = Array.isArray || function(arr) {\n  return toString.call(arr) == '[object Array]';\n};\n\n/**\n * Object.keys shim.\n */\n\nvar objectKeys = Object.keys || function(obj) {\n  var ret = [];\n  for (var key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      ret.push(key);\n    }\n  }\n  return ret;\n};\n\n/**\n * Array#forEach shim.\n */\n\nvar forEach = typeof Array.prototype.forEach === 'function'\n  ? function(arr, fn) { return arr.forEach(fn); }\n  : function(arr, fn) {\n      for (var i = 0; i < arr.length; i++) fn(arr[i]);\n    };\n\n/**\n * Array#reduce shim.\n */\n\nvar reduce = function(arr, fn, initial) {\n  if (typeof arr.reduce === 'function') return arr.reduce(fn, initial);\n  var res = initial;\n  for (var i = 0; i < arr.length; i++) res = fn(res, arr[i]);\n  return res;\n};\n\n/**\n * Cache non-integer test regexp.\n */\n\nvar isint = /^[0-9]+$/;\n\nfunction promote(parent, key) {\n  if (parent[key].length == 0) return parent[key] = {}\n  var t = {};\n  for (var i in parent[key]) {\n    if (hasOwnProperty.call(parent[key], i)) {\n      t[i] = parent[key][i];\n    }\n  }\n  parent[key] = t;\n  return t;\n}\n\nfunction parse(parts, parent, key, val) {\n  var part = parts.shift();\n  \n  // illegal\n  if (Object.getOwnPropertyDescriptor(Object.prototype, key)) return;\n  \n  // end\n  if (!part) {\n    if (isArray(parent[key])) {\n      parent[key].push(val);\n    } else if ('object' == typeof parent[key]) {\n      parent[key] = val;\n    } else if ('undefined' == typeof parent[key]) {\n      parent[key] = val;\n    } else {\n      parent[key] = [parent[key], val];\n    }\n    // array\n  } else {\n    var obj = parent[key] = parent[key] || [];\n    if (']' == part) {\n      if (isArray(obj)) {\n        if ('' != val) obj.push(val);\n      } else if ('object' == typeof obj) {\n        obj[objectKeys(obj).length] = val;\n      } else {\n        obj = parent[key] = [parent[key], val];\n      }\n      // prop\n    } else if (~indexOf(part, ']')) {\n      part = part.substr(0, part.length - 1);\n      if (!isint.test(part) && isArray(obj)) obj = promote(parent, key);\n      parse(parts, obj, part, val);\n      // key\n    } else {\n      if (!isint.test(part) && isArray(obj)) obj = promote(parent, key);\n      parse(parts, obj, part, val);\n    }\n  }\n}\n\n/**\n * Merge parent key/val pair.\n */\n\nfunction merge(parent, key, val){\n  if (~indexOf(key, ']')) {\n    var parts = key.split('[')\n      , len = parts.length\n      , last = len - 1;\n    parse(parts, parent, 'base', val);\n    // optimize\n  } else {\n    if (!isint.test(key) && isArray(parent.base)) {\n      var t = {};\n      for (var k in parent.base) t[k] = parent.base[k];\n      parent.base = t;\n    }\n    set(parent.base, key, val);\n  }\n\n  return parent;\n}\n\n/**\n * Compact sparse arrays.\n */\n\nfunction compact(obj) {\n  if ('object' != typeof obj) return obj;\n\n  if (isArray(obj)) {\n    var ret = [];\n\n    for (var i in obj) {\n      if (hasOwnProperty.call(obj, i)) {\n        ret.push(obj[i]);\n      }\n    }\n\n    return ret;\n  }\n\n  for (var key in obj) {\n    obj[key] = compact(obj[key]);\n  }\n\n  return obj;\n}\n\n/**\n * Parse the given obj.\n */\n\nfunction parseObject(obj){\n  var ret = { base: {} };\n\n  forEach(objectKeys(obj), function(name){\n    merge(ret, name, obj[name]);\n  });\n\n  return compact(ret.base);\n}\n\n/**\n * Parse the given str.\n */\n\nfunction parseString(str){\n  var ret = reduce(String(str).split('&'), function(ret, pair){\n    var eql = indexOf(pair, '=')\n      , brace = lastBraceInKey(pair)\n      , key = pair.substr(0, brace || eql)\n      , val = pair.substr(brace || eql, pair.length)\n      , val = val.substr(indexOf(val, '=') + 1, val.length);\n\n    // ?foo\n    if ('' == key) key = pair, val = '';\n    if ('' == key) return ret;\n\n    return merge(ret, decode(key), decode(val));\n  }, { base: {} }).base;\n\n  return compact(ret);\n}\n\n/**\n * Parse the given query `str` or `obj`, returning an object.\n *\n * @param {String} str | {Object} obj\n * @return {Object}\n * @api public\n */\n\nexports.parse = function(str){\n  if (null == str || '' == str) return {};\n  return 'object' == typeof str\n    ? parseObject(str)\n    : parseString(str);\n};\n\n/**\n * Turn the given `obj` into a query string\n *\n * @param {Object} obj\n * @return {String}\n * @api public\n */\n\nvar stringify = exports.stringify = function(obj, prefix) {\n  if (isArray(obj)) {\n    return stringifyArray(obj, prefix);\n  } else if ('[object Object]' == toString.call(obj)) {\n    return stringifyObject(obj, prefix);\n  } else if ('string' == typeof obj) {\n    return stringifyString(obj, prefix);\n  } else {\n    return prefix + '=' + encodeURIComponent(String(obj));\n  }\n};\n\n/**\n * Stringify the given `str`.\n *\n * @param {String} str\n * @param {String} prefix\n * @return {String}\n * @api private\n */\n\nfunction stringifyString(str, prefix) {\n  if (!prefix) throw new TypeError('stringify expects an object');\n  return prefix + '=' + encodeURIComponent(str);\n}\n\n/**\n * Stringify the given `arr`.\n *\n * @param {Array} arr\n * @param {String} prefix\n * @return {String}\n * @api private\n */\n\nfunction stringifyArray(arr, prefix) {\n  var ret = [];\n  if (!prefix) throw new TypeError('stringify expects an object');\n  for (var i = 0; i < arr.length; i++) {\n    ret.push(stringify(arr[i], prefix + '[' + i + ']'));\n  }\n  return ret.join('&');\n}\n\n/**\n * Stringify the given `obj`.\n *\n * @param {Object} obj\n * @param {String} prefix\n * @return {String}\n * @api private\n */\n\nfunction stringifyObject(obj, prefix) {\n  var ret = []\n    , keys = objectKeys(obj)\n    , key;\n\n  for (var i = 0, len = keys.length; i < len; ++i) {\n    key = keys[i];\n    if ('' == key) continue;\n    if (null == obj[key]) {\n      ret.push(encodeURIComponent(key) + '=');\n    } else {\n      ret.push(stringify(obj[key], prefix\n        ? prefix + '[' + encodeURIComponent(key) + ']'\n        : encodeURIComponent(key)));\n    }\n  }\n\n  return ret.join('&');\n}\n\n/**\n * Set `obj`'s `key` to `val` respecting\n * the weird and wonderful syntax of a qs,\n * where \"foo=bar&foo=baz\" becomes an array.\n *\n * @param {Object} obj\n * @param {String} key\n * @param {String} val\n * @api private\n */\n\nfunction set(obj, key, val) {\n  var v = obj[key];\n  if (Object.getOwnPropertyDescriptor(Object.prototype, key)) return;\n  if (undefined === v) {\n    obj[key] = val;\n  } else if (isArray(v)) {\n    v.push(val);\n  } else {\n    obj[key] = [v, val];\n  }\n}\n\n/**\n * Locate last brace in `str` within the key.\n *\n * @param {String} str\n * @return {Number}\n * @api private\n */\n\nfunction lastBraceInKey(str) {\n  var len = str.length\n    , brace\n    , c;\n  for (var i = 0; i < len; ++i) {\n    c = str[i];\n    if (']' == c) brace = false;\n    if ('[' == c) brace = true;\n    if ('=' == c && !brace) return i;\n  }\n}\n\n/**\n * Decode `str`.\n *\n * @param {String} str\n * @return {String}\n * @api private\n */\n\nfunction decode(str) {\n  try {\n    return decodeURIComponent(str.replace(/\\+/g, ' '));\n  } catch (err) {\n    return str;\n  }\n}\n","\n/**\n * Module dependencies.\n */\n\nvar utils = require('../utils');\n\n/**\n * Expose `Route`.\n */\n\nmodule.exports = Route;\n\n/**\n * Initialize `Route` with the given HTTP `method`, `path`,\n * and an array of `callbacks` and `options`.\n *\n * Options:\n *\n *   - `sensitive`    enable case-sensitive routes\n *   - `strict`       enable strict matching for trailing slashes\n *\n * @param {String} method\n * @param {String} path\n * @param {Array} callbacks\n * @param {Object} options.\n * @api private\n */\n\nfunction Route(method, path, callbacks, options) {\n  options = options || {};\n  this.path = path;\n  this.method = method;\n  this.callbacks = callbacks;\n  this.regexp = utils.pathRegexp(path\n    , this.keys = []\n    , options.sensitive\n    , options.strict);\n}\n\n/**\n * Check if this route matches `path`, if so\n * populate `.params`.\n *\n * @param {String} path\n * @return {Boolean}\n * @api private\n */\n\nRoute.prototype.match = function(path){\n  var keys = this.keys\n    , params = this.params = []\n    , m = this.regexp.exec(path);\n\n  if (!m) return false;\n\n  for (var i = 1, len = m.length; i < len; ++i) {\n    var key = keys[i - 1];\n\n    var val = 'string' == typeof m[i]\n      ? decodeURIComponent(m[i])\n      : m[i];\n\n    if (key) {\n      params[key.name] = val;\n    } else {\n      params.push(val);\n    }\n  }\n\n  return true;\n};\n","\n/**\n * Module dependencies.\n */\n\n/**\n * toString ref.\n */\n\nvar toString = {}.toString;\n\n/**\n * Return ETag for `body`.\n *\n * @param {String|Buffer} body\n * @return {String}\n * @api private\n */\n\nexports.etag = function(body){\n  return '\"' + crc32.signed(body) + '\"';\n};\n\n/**\n * Make `locals()` bound to the given `obj`.\n *\n * This is used for `app.locals` and `res.locals`.\n *\n * @param {Object} obj\n * @return {Function}\n * @api private\n */\n\nexports.locals = function(obj){\n  function locals(obj){\n    for (var key in obj) locals[key] = obj[key];\n    return obj;\n  };\n\n  return locals;\n};\n\n/**\n * Check if `path` looks absolute.\n *\n * @param {String} path\n * @return {Boolean}\n * @api private\n */\n\nexports.isAbsolute = function(path){\n  if ('/' == path[0]) return true;\n  if (':' == path[1] && '\\\\' == path[2]) return true;\n};\n\n/**\n * Flatten the given `arr`.\n *\n * @param {Array} arr\n * @return {Array}\n * @api private\n */\n\nexports.flatten = function(arr, ret){\n  var ret = ret || []\n    , len = arr.length;\n  for (var i = 0; i < len; ++i) {\n    if (Array.isArray(arr[i])) {\n      exports.flatten(arr[i], ret);\n    } else {\n      ret.push(arr[i]);\n    }\n  }\n  return ret;\n};\n\n/**\n * Normalize the given `type`, for example \"html\" becomes \"text/html\".\n *\n * @param {String} type\n * @return {Object}\n * @api private\n */\n\nexports.normalizeType = function(type){\n  return ~type.indexOf('/')\n    ? acceptParams(type)\n    : { value: mime.lookup(type), params: {} };\n};\n\n/**\n * Normalize `types`, for example \"html\" becomes \"text/html\".\n *\n * @param {Array} types\n * @return {Array}\n * @api private\n */\n\nexports.normalizeTypes = function(types){\n  var ret = [];\n\n  for (var i = 0; i < types.length; ++i) {\n    ret.push(exports.normalizeType(types[i]));\n  }\n\n  return ret;\n};\n\n/**\n * Return the acceptable type in `types`, if any.\n *\n * @param {Array} types\n * @param {String} str\n * @return {String}\n * @api private\n */\n\nexports.acceptsArray = function(types, str){\n  // accept anything when Accept is not present\n  if (!str) return types[0];\n\n  // parse\n  var accepted = exports.parseAccept(str)\n    , normalized = exports.normalizeTypes(types)\n    , len = accepted.length;\n\n  for (var i = 0; i < len; ++i) {\n    for (var j = 0, jlen = types.length; j < jlen; ++j) {\n      if (exports.accept(normalized[j], accepted[i])) {\n        return types[j];\n      }\n    }\n  }\n};\n\n/**\n * Check if `type(s)` are acceptable based on\n * the given `str`.\n *\n * @param {String|Array} type(s)\n * @param {String} str\n * @return {Boolean|String}\n * @api private\n */\n\nexports.accepts = function(type, str){\n  if ('string' == typeof type) type = type.split(/ *, */);\n  return exports.acceptsArray(type, str);\n};\n\n/**\n * Check if `type` array is acceptable for `other`.\n *\n * @param {Object} type\n * @param {Object} other\n * @return {Boolean}\n * @api private\n */\n\nexports.accept = function(type, other){\n  var t = type.value.split('/');\n  return (t[0] == other.type || '*' == other.type)\n    && (t[1] == other.subtype || '*' == other.subtype)\n    && paramsEqual(type.params, other.params);\n};\n\n/**\n * Check if accept params are equal.\n *\n * @param {Object} a\n * @param {Object} b\n * @return {Boolean}\n * @api private\n */\n\nfunction paramsEqual(a, b){\n  return !Object.keys(a).some(function(k) {\n    return a[k] != b[k];\n  });\n}\n\n/**\n * Parse accept `str`, returning\n * an array objects containing\n * `.type` and `.subtype` along\n * with the values provided by\n * `parseQuality()`.\n *\n * @param {Type} name\n * @return {Type}\n * @api private\n */\n\nexports.parseAccept = function(str){\n  return exports\n    .parseParams(str)\n    .map(function(obj){\n      var parts = obj.value.split('/');\n      obj.type = parts[0];\n      obj.subtype = parts[1];\n      return obj;\n    });\n};\n\n/**\n * Parse quality `str`, returning an\n * array of objects with `.value`,\n * `.quality` and optional `.params`\n *\n * @param {String} str\n * @return {Array}\n * @api private\n */\n\nexports.parseParams = function(str){\n  return str\n    .split(/ *, */)\n    .map(acceptParams)\n    .filter(function(obj){\n      return obj.quality;\n    })\n    .sort(function(a, b){\n      if (a.quality === b.quality) {\n        return a.originalIndex - b.originalIndex;\n      } else {\n        return b.quality - a.quality;\n      }\n    });\n};\n\n/**\n * Parse accept params `str` returning an\n * object with `.value`, `.quality` and `.params`.\n * also includes `.originalIndex` for stable sorting\n *\n * @param {String} str\n * @return {Object}\n * @api private\n */\n\nfunction acceptParams(str, index) {\n  var parts = str.split(/ *; */);\n  var ret = { value: parts[0], quality: 1, params: {}, originalIndex: index };\n\n  for (var i = 1; i < parts.length; ++i) {\n    var pms = parts[i].split(/ *= */);\n    if ('q' == pms[0]) {\n      ret.quality = parseFloat(pms[1]);\n    } else {\n      ret.params[pms[0]] = pms[1];\n    }\n  }\n\n  return ret;\n}\n\n/**\n * Escape special characters in the given string of html.\n *\n * @param  {String} html\n * @return {String}\n * @api private\n */\n\nexports.escape = function(html) {\n  return String(html)\n    .replace(/&/g, '&amp;')\n    .replace(/\"/g, '&quot;')\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;');\n};\n\n/**\n * Normalize the given path string,\n * returning a regular expression.\n *\n * An empty array should be passed,\n * which will contain the placeholder\n * key names. For example \"/user/:id\" will\n * then contain [\"id\"].\n *\n * @param  {String|RegExp|Array} path\n * @param  {Array} keys\n * @param  {Boolean} sensitive\n * @param  {Boolean} strict\n * @return {RegExp}\n * @api private\n */\n\nexports.pathRegexp = function(path, keys, sensitive, strict) {\n  if (toString.call(path) == '[object RegExp]') return path;\n  if (Array.isArray(path)) path = '(' + path.join('|') + ')';\n  path = path\n    .concat(strict ? '' : '/?')\n    .replace(/\\/\\(/g, '(?:/')\n    .replace(/(\\/)?(\\.)?:(\\w+)(?:(\\(.*?\\)))?(\\?)?(\\*)?/g, function(_, slash, format, key, capture, optional, star){\n      keys.push({ name: key, optional: !! optional });\n      slash = slash || '';\n      return ''\n        + (optional ? '' : slash)\n        + '(?:'\n        + (optional ? slash : '')\n        + (format || '') + (capture || (format && '([^/.]+?)' || '([^/]+?)')) + ')'\n        + (optional || '')\n        + (star ? '(/*)?' : '');\n    })\n    .replace(/([\\/.])/g, '\\\\$1')\n    .replace(/\\*/g, '(.*)');\n  return new RegExp('^' + path + '$', sensitive ? '' : 'i');\n}\n","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\n\nvar base64 = require('base64-js')\nvar ieee754 = require('ieee754')\n\nexports.Buffer = Buffer\nexports.SlowBuffer = Buffer\nexports.INSPECT_MAX_BYTES = 50\nBuffer.poolSize = 8192\n\n/**\n * If `Buffer._useTypedArrays`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (compatible down to IE6)\n */\nBuffer._useTypedArrays = (function () {\n  // Detect if browser supports Typed Arrays. Supported browsers are IE 10+, Firefox 4+,\n  // Chrome 7+, Safari 5.1+, Opera 11.6+, iOS 4.2+. If the browser does not support adding\n  // properties to `Uint8Array` instances, then that's the same as no `Uint8Array` support\n  // because we need to be able to add all the node Buffer API methods. This is an issue\n  // in Firefox 4-29. Now fixed: https://bugzilla.mozilla.org/show_bug.cgi?id=695438\n  try {\n    var buf = new ArrayBuffer(0)\n    var arr = new Uint8Array(buf)\n    arr.foo = function () { return 42 }\n    return 42 === arr.foo() &&\n        typeof arr.subarray === 'function' // Chrome 9-10 lack `subarray`\n  } catch (e) {\n    return false\n  }\n})()\n\n/**\n * Class: Buffer\n * =============\n *\n * The Buffer constructor returns instances of `Uint8Array` that are augmented\n * with function properties for all the node `Buffer` API functions. We use\n * `Uint8Array` so that square bracket notation works as expected -- it returns\n * a single octet.\n *\n * By augmenting the instances, we can avoid modifying the `Uint8Array`\n * prototype.\n */\nfunction Buffer (subject, encoding, noZero) {\n  if (!(this instanceof Buffer))\n    return new Buffer(subject, encoding, noZero)\n\n  var type = typeof subject\n\n  // Workaround: node's base64 implementation allows for non-padded strings\n  // while base64-js does not.\n  if (encoding === 'base64' && type === 'string') {\n    subject = stringtrim(subject)\n    while (subject.length % 4 !== 0) {\n      subject = subject + '='\n    }\n  }\n\n  // Find the length\n  var length\n  if (type === 'number')\n    length = coerce(subject)\n  else if (type === 'string')\n    length = Buffer.byteLength(subject, encoding)\n  else if (type === 'object')\n    length = coerce(subject.length) // assume that object is array-like\n  else\n    throw new Error('First argument needs to be a number, array or string.')\n\n  var buf\n  if (Buffer._useTypedArrays) {\n    // Preferred: Return an augmented `Uint8Array` instance for best performance\n    buf = Buffer._augment(new Uint8Array(length))\n  } else {\n    // Fallback: Return THIS instance of Buffer (created by `new`)\n    buf = this\n    buf.length = length\n    buf._isBuffer = true\n  }\n\n  var i\n  if (Buffer._useTypedArrays && typeof subject.byteLength === 'number') {\n    // Speed optimization -- use set if we're copying from a typed array\n    buf._set(subject)\n  } else if (isArrayish(subject)) {\n    // Treat array-ish objects as a byte array\n    for (i = 0; i < length; i++) {\n      if (Buffer.isBuffer(subject))\n        buf[i] = subject.readUInt8(i)\n      else\n        buf[i] = subject[i]\n    }\n  } else if (type === 'string') {\n    buf.write(subject, 0, encoding)\n  } else if (type === 'number' && !Buffer._useTypedArrays && !noZero) {\n    for (i = 0; i < length; i++) {\n      buf[i] = 0\n    }\n  }\n\n  return buf\n}\n\n// STATIC METHODS\n// ==============\n\nBuffer.isEncoding = function (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'binary':\n    case 'base64':\n    case 'raw':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.isBuffer = function (b) {\n  return !!(b !== null && b !== undefined && b._isBuffer)\n}\n\nBuffer.byteLength = function (str, encoding) {\n  var ret\n  str = str + ''\n  switch (encoding || 'utf8') {\n    case 'hex':\n      ret = str.length / 2\n      break\n    case 'utf8':\n    case 'utf-8':\n      ret = utf8ToBytes(str).length\n      break\n    case 'ascii':\n    case 'binary':\n    case 'raw':\n      ret = str.length\n      break\n    case 'base64':\n      ret = base64ToBytes(str).length\n      break\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      ret = str.length * 2\n      break\n    default:\n      throw new Error('Unknown encoding')\n  }\n  return ret\n}\n\nBuffer.concat = function (list, totalLength) {\n  assert(isArray(list), 'Usage: Buffer.concat(list, [totalLength])\\n' +\n      'list should be an Array.')\n\n  if (list.length === 0) {\n    return new Buffer(0)\n  } else if (list.length === 1) {\n    return list[0]\n  }\n\n  var i\n  if (typeof totalLength !== 'number') {\n    totalLength = 0\n    for (i = 0; i < list.length; i++) {\n      totalLength += list[i].length\n    }\n  }\n\n  var buf = new Buffer(totalLength)\n  var pos = 0\n  for (i = 0; i < list.length; i++) {\n    var item = list[i]\n    item.copy(buf, pos)\n    pos += item.length\n  }\n  return buf\n}\n\n// BUFFER INSTANCE METHODS\n// =======================\n\nfunction _hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  assert(strLen % 2 === 0, 'Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; i++) {\n    var byte = parseInt(string.substr(i * 2, 2), 16)\n    assert(!isNaN(byte), 'Invalid hex string')\n    buf[offset + i] = byte\n  }\n  Buffer._charsWritten = i * 2\n  return i\n}\n\nfunction _utf8Write (buf, string, offset, length) {\n  var charsWritten = Buffer._charsWritten =\n    blitBuffer(utf8ToBytes(string), buf, offset, length)\n  return charsWritten\n}\n\nfunction _asciiWrite (buf, string, offset, length) {\n  var charsWritten = Buffer._charsWritten =\n    blitBuffer(asciiToBytes(string), buf, offset, length)\n  return charsWritten\n}\n\nfunction _binaryWrite (buf, string, offset, length) {\n  return _asciiWrite(buf, string, offset, length)\n}\n\nfunction _base64Write (buf, string, offset, length) {\n  var charsWritten = Buffer._charsWritten =\n    blitBuffer(base64ToBytes(string), buf, offset, length)\n  return charsWritten\n}\n\nfunction _utf16leWrite (buf, string, offset, length) {\n  var charsWritten = Buffer._charsWritten =\n    blitBuffer(utf16leToBytes(string), buf, offset, length)\n  return charsWritten\n}\n\nBuffer.prototype.write = function (string, offset, length, encoding) {\n  // Support both (string, offset, length, encoding)\n  // and the legacy (string, encoding, offset, length)\n  if (isFinite(offset)) {\n    if (!isFinite(length)) {\n      encoding = length\n      length = undefined\n    }\n  } else {  // legacy\n    var swap = encoding\n    encoding = offset\n    offset = length\n    length = swap\n  }\n\n  offset = Number(offset) || 0\n  var remaining = this.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n  encoding = String(encoding || 'utf8').toLowerCase()\n\n  var ret\n  switch (encoding) {\n    case 'hex':\n      ret = _hexWrite(this, string, offset, length)\n      break\n    case 'utf8':\n    case 'utf-8':\n      ret = _utf8Write(this, string, offset, length)\n      break\n    case 'ascii':\n      ret = _asciiWrite(this, string, offset, length)\n      break\n    case 'binary':\n      ret = _binaryWrite(this, string, offset, length)\n      break\n    case 'base64':\n      ret = _base64Write(this, string, offset, length)\n      break\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      ret = _utf16leWrite(this, string, offset, length)\n      break\n    default:\n      throw new Error('Unknown encoding')\n  }\n  return ret\n}\n\nBuffer.prototype.toString = function (encoding, start, end) {\n  var self = this\n\n  encoding = String(encoding || 'utf8').toLowerCase()\n  start = Number(start) || 0\n  end = (end !== undefined)\n    ? Number(end)\n    : end = self.length\n\n  // Fastpath empty strings\n  if (end === start)\n    return ''\n\n  var ret\n  switch (encoding) {\n    case 'hex':\n      ret = _hexSlice(self, start, end)\n      break\n    case 'utf8':\n    case 'utf-8':\n      ret = _utf8Slice(self, start, end)\n      break\n    case 'ascii':\n      ret = _asciiSlice(self, start, end)\n      break\n    case 'binary':\n      ret = _binarySlice(self, start, end)\n      break\n    case 'base64':\n      ret = _base64Slice(self, start, end)\n      break\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      ret = _utf16leSlice(self, start, end)\n      break\n    default:\n      throw new Error('Unknown encoding')\n  }\n  return ret\n}\n\nBuffer.prototype.toJSON = function () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function (target, target_start, start, end) {\n  var source = this\n\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (!target_start) target_start = 0\n\n  // Copy 0 bytes; we're done\n  if (end === start) return\n  if (target.length === 0 || source.length === 0) return\n\n  // Fatal error conditions\n  assert(end >= start, 'sourceEnd < sourceStart')\n  assert(target_start >= 0 && target_start < target.length,\n      'targetStart out of bounds')\n  assert(start >= 0 && start < source.length, 'sourceStart out of bounds')\n  assert(end >= 0 && end <= source.length, 'sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length)\n    end = this.length\n  if (target.length - target_start < end - start)\n    end = target.length - target_start + start\n\n  var len = end - start\n\n  if (len < 100 || !Buffer._useTypedArrays) {\n    for (var i = 0; i < len; i++)\n      target[i + target_start] = this[i + start]\n  } else {\n    target._set(this.subarray(start, start + len), target_start)\n  }\n}\n\nfunction _base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction _utf8Slice (buf, start, end) {\n  var res = ''\n  var tmp = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; i++) {\n    if (buf[i] <= 0x7F) {\n      res += decodeUtf8Char(tmp) + String.fromCharCode(buf[i])\n      tmp = ''\n    } else {\n      tmp += '%' + buf[i].toString(16)\n    }\n  }\n\n  return res + decodeUtf8Char(tmp)\n}\n\nfunction _asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; i++)\n    ret += String.fromCharCode(buf[i])\n  return ret\n}\n\nfunction _binarySlice (buf, start, end) {\n  return _asciiSlice(buf, start, end)\n}\n\nfunction _hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; i++) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction _utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i+1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function (start, end) {\n  var len = this.length\n  start = clamp(start, len, 0)\n  end = clamp(end, len, len)\n\n  if (Buffer._useTypedArrays) {\n    return Buffer._augment(this.subarray(start, end))\n  } else {\n    var sliceLen = end - start\n    var newBuf = new Buffer(sliceLen, undefined, true)\n    for (var i = 0; i < sliceLen; i++) {\n      newBuf[i] = this[i + start]\n    }\n    return newBuf\n  }\n}\n\n// `get` will be removed in Node 0.13+\nBuffer.prototype.get = function (offset) {\n  console.log('.get() is deprecated. Access using array indexes instead.')\n  return this.readUInt8(offset)\n}\n\n// `set` will be removed in Node 0.13+\nBuffer.prototype.set = function (v, offset) {\n  console.log('.set() is deprecated. Access using array indexes instead.')\n  return this.writeUInt8(v, offset)\n}\n\nBuffer.prototype.readUInt8 = function (offset, noAssert) {\n  if (!noAssert) {\n    assert(offset !== undefined && offset !== null, 'missing offset')\n    assert(offset < this.length, 'Trying to read beyond buffer length')\n  }\n\n  if (offset >= this.length)\n    return\n\n  return this[offset]\n}\n\nfunction _readUInt16 (buf, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')\n    assert(offset !== undefined && offset !== null, 'missing offset')\n    assert(offset + 1 < buf.length, 'Trying to read beyond buffer length')\n  }\n\n  var len = buf.length\n  if (offset >= len)\n    return\n\n  var val\n  if (littleEndian) {\n    val = buf[offset]\n    if (offset + 1 < len)\n      val |= buf[offset + 1] << 8\n  } else {\n    val = buf[offset] << 8\n    if (offset + 1 < len)\n      val |= buf[offset + 1]\n  }\n  return val\n}\n\nBuffer.prototype.readUInt16LE = function (offset, noAssert) {\n  return _readUInt16(this, offset, true, noAssert)\n}\n\nBuffer.prototype.readUInt16BE = function (offset, noAssert) {\n  return _readUInt16(this, offset, false, noAssert)\n}\n\nfunction _readUInt32 (buf, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')\n    assert(offset !== undefined && offset !== null, 'missing offset')\n    assert(offset + 3 < buf.length, 'Trying to read beyond buffer length')\n  }\n\n  var len = buf.length\n  if (offset >= len)\n    return\n\n  var val\n  if (littleEndian) {\n    if (offset + 2 < len)\n      val = buf[offset + 2] << 16\n    if (offset + 1 < len)\n      val |= buf[offset + 1] << 8\n    val |= buf[offset]\n    if (offset + 3 < len)\n      val = val + (buf[offset + 3] << 24 >>> 0)\n  } else {\n    if (offset + 1 < len)\n      val = buf[offset + 1] << 16\n    if (offset + 2 < len)\n      val |= buf[offset + 2] << 8\n    if (offset + 3 < len)\n      val |= buf[offset + 3]\n    val = val + (buf[offset] << 24 >>> 0)\n  }\n  return val\n}\n\nBuffer.prototype.readUInt32LE = function (offset, noAssert) {\n  return _readUInt32(this, offset, true, noAssert)\n}\n\nBuffer.prototype.readUInt32BE = function (offset, noAssert) {\n  return _readUInt32(this, offset, false, noAssert)\n}\n\nBuffer.prototype.readInt8 = function (offset, noAssert) {\n  if (!noAssert) {\n    assert(offset !== undefined && offset !== null,\n        'missing offset')\n    assert(offset < this.length, 'Trying to read beyond buffer length')\n  }\n\n  if (offset >= this.length)\n    return\n\n  var neg = this[offset] & 0x80\n  if (neg)\n    return (0xff - this[offset] + 1) * -1\n  else\n    return this[offset]\n}\n\nfunction _readInt16 (buf, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')\n    assert(offset !== undefined && offset !== null, 'missing offset')\n    assert(offset + 1 < buf.length, 'Trying to read beyond buffer length')\n  }\n\n  var len = buf.length\n  if (offset >= len)\n    return\n\n  var val = _readUInt16(buf, offset, littleEndian, true)\n  var neg = val & 0x8000\n  if (neg)\n    return (0xffff - val + 1) * -1\n  else\n    return val\n}\n\nBuffer.prototype.readInt16LE = function (offset, noAssert) {\n  return _readInt16(this, offset, true, noAssert)\n}\n\nBuffer.prototype.readInt16BE = function (offset, noAssert) {\n  return _readInt16(this, offset, false, noAssert)\n}\n\nfunction _readInt32 (buf, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')\n    assert(offset !== undefined && offset !== null, 'missing offset')\n    assert(offset + 3 < buf.length, 'Trying to read beyond buffer length')\n  }\n\n  var len = buf.length\n  if (offset >= len)\n    return\n\n  var val = _readUInt32(buf, offset, littleEndian, true)\n  var neg = val & 0x80000000\n  if (neg)\n    return (0xffffffff - val + 1) * -1\n  else\n    return val\n}\n\nBuffer.prototype.readInt32LE = function (offset, noAssert) {\n  return _readInt32(this, offset, true, noAssert)\n}\n\nBuffer.prototype.readInt32BE = function (offset, noAssert) {\n  return _readInt32(this, offset, false, noAssert)\n}\n\nfunction _readFloat (buf, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')\n    assert(offset + 3 < buf.length, 'Trying to read beyond buffer length')\n  }\n\n  return ieee754.read(buf, offset, littleEndian, 23, 4)\n}\n\nBuffer.prototype.readFloatLE = function (offset, noAssert) {\n  return _readFloat(this, offset, true, noAssert)\n}\n\nBuffer.prototype.readFloatBE = function (offset, noAssert) {\n  return _readFloat(this, offset, false, noAssert)\n}\n\nfunction _readDouble (buf, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')\n    assert(offset + 7 < buf.length, 'Trying to read beyond buffer length')\n  }\n\n  return ieee754.read(buf, offset, littleEndian, 52, 8)\n}\n\nBuffer.prototype.readDoubleLE = function (offset, noAssert) {\n  return _readDouble(this, offset, true, noAssert)\n}\n\nBuffer.prototype.readDoubleBE = function (offset, noAssert) {\n  return _readDouble(this, offset, false, noAssert)\n}\n\nBuffer.prototype.writeUInt8 = function (value, offset, noAssert) {\n  if (!noAssert) {\n    assert(value !== undefined && value !== null, 'missing value')\n    assert(offset !== undefined && offset !== null, 'missing offset')\n    assert(offset < this.length, 'trying to write beyond buffer length')\n    verifuint(value, 0xff)\n  }\n\n  if (offset >= this.length) return\n\n  this[offset] = value\n}\n\nfunction _writeUInt16 (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    assert(value !== undefined && value !== null, 'missing value')\n    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')\n    assert(offset !== undefined && offset !== null, 'missing offset')\n    assert(offset + 1 < buf.length, 'trying to write beyond buffer length')\n    verifuint(value, 0xffff)\n  }\n\n  var len = buf.length\n  if (offset >= len)\n    return\n\n  for (var i = 0, j = Math.min(len - offset, 2); i < j; i++) {\n    buf[offset + i] =\n        (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n            (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function (value, offset, noAssert) {\n  _writeUInt16(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeUInt16BE = function (value, offset, noAssert) {\n  _writeUInt16(this, value, offset, false, noAssert)\n}\n\nfunction _writeUInt32 (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    assert(value !== undefined && value !== null, 'missing value')\n    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')\n    assert(offset !== undefined && offset !== null, 'missing offset')\n    assert(offset + 3 < buf.length, 'trying to write beyond buffer length')\n    verifuint(value, 0xffffffff)\n  }\n\n  var len = buf.length\n  if (offset >= len)\n    return\n\n  for (var i = 0, j = Math.min(len - offset, 4); i < j; i++) {\n    buf[offset + i] =\n        (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function (value, offset, noAssert) {\n  _writeUInt32(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeUInt32BE = function (value, offset, noAssert) {\n  _writeUInt32(this, value, offset, false, noAssert)\n}\n\nBuffer.prototype.writeInt8 = function (value, offset, noAssert) {\n  if (!noAssert) {\n    assert(value !== undefined && value !== null, 'missing value')\n    assert(offset !== undefined && offset !== null, 'missing offset')\n    assert(offset < this.length, 'Trying to write beyond buffer length')\n    verifsint(value, 0x7f, -0x80)\n  }\n\n  if (offset >= this.length)\n    return\n\n  if (value >= 0)\n    this.writeUInt8(value, offset, noAssert)\n  else\n    this.writeUInt8(0xff + value + 1, offset, noAssert)\n}\n\nfunction _writeInt16 (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    assert(value !== undefined && value !== null, 'missing value')\n    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')\n    assert(offset !== undefined && offset !== null, 'missing offset')\n    assert(offset + 1 < buf.length, 'Trying to write beyond buffer length')\n    verifsint(value, 0x7fff, -0x8000)\n  }\n\n  var len = buf.length\n  if (offset >= len)\n    return\n\n  if (value >= 0)\n    _writeUInt16(buf, value, offset, littleEndian, noAssert)\n  else\n    _writeUInt16(buf, 0xffff + value + 1, offset, littleEndian, noAssert)\n}\n\nBuffer.prototype.writeInt16LE = function (value, offset, noAssert) {\n  _writeInt16(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeInt16BE = function (value, offset, noAssert) {\n  _writeInt16(this, value, offset, false, noAssert)\n}\n\nfunction _writeInt32 (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    assert(value !== undefined && value !== null, 'missing value')\n    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')\n    assert(offset !== undefined && offset !== null, 'missing offset')\n    assert(offset + 3 < buf.length, 'Trying to write beyond buffer length')\n    verifsint(value, 0x7fffffff, -0x80000000)\n  }\n\n  var len = buf.length\n  if (offset >= len)\n    return\n\n  if (value >= 0)\n    _writeUInt32(buf, value, offset, littleEndian, noAssert)\n  else\n    _writeUInt32(buf, 0xffffffff + value + 1, offset, littleEndian, noAssert)\n}\n\nBuffer.prototype.writeInt32LE = function (value, offset, noAssert) {\n  _writeInt32(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeInt32BE = function (value, offset, noAssert) {\n  _writeInt32(this, value, offset, false, noAssert)\n}\n\nfunction _writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    assert(value !== undefined && value !== null, 'missing value')\n    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')\n    assert(offset !== undefined && offset !== null, 'missing offset')\n    assert(offset + 3 < buf.length, 'Trying to write beyond buffer length')\n    verifIEEE754(value, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n\n  var len = buf.length\n  if (offset >= len)\n    return\n\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n}\n\nBuffer.prototype.writeFloatLE = function (value, offset, noAssert) {\n  _writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function (value, offset, noAssert) {\n  _writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction _writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    assert(value !== undefined && value !== null, 'missing value')\n    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')\n    assert(offset !== undefined && offset !== null, 'missing offset')\n    assert(offset + 7 < buf.length,\n        'Trying to write beyond buffer length')\n    verifIEEE754(value, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n\n  var len = buf.length\n  if (offset >= len)\n    return\n\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n}\n\nBuffer.prototype.writeDoubleLE = function (value, offset, noAssert) {\n  _writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function (value, offset, noAssert) {\n  _writeDouble(this, value, offset, false, noAssert)\n}\n\n// fill(value, start=0, end=buffer.length)\nBuffer.prototype.fill = function (value, start, end) {\n  if (!value) value = 0\n  if (!start) start = 0\n  if (!end) end = this.length\n\n  if (typeof value === 'string') {\n    value = value.charCodeAt(0)\n  }\n\n  assert(typeof value === 'number' && !isNaN(value), 'value is not a number')\n  assert(end >= start, 'end < start')\n\n  // Fill 0 bytes; we're done\n  if (end === start) return\n  if (this.length === 0) return\n\n  assert(start >= 0 && start < this.length, 'start out of bounds')\n  assert(end >= 0 && end <= this.length, 'end out of bounds')\n\n  for (var i = start; i < end; i++) {\n    this[i] = value\n  }\n}\n\nBuffer.prototype.inspect = function () {\n  var out = []\n  var len = this.length\n  for (var i = 0; i < len; i++) {\n    out[i] = toHex(this[i])\n    if (i === exports.INSPECT_MAX_BYTES) {\n      out[i + 1] = '...'\n      break\n    }\n  }\n  return '<Buffer ' + out.join(' ') + '>'\n}\n\n/**\n * Creates a new `ArrayBuffer` with the *copied* memory of the buffer instance.\n * Added in Node 0.12. Only available in browsers that support ArrayBuffer.\n */\nBuffer.prototype.toArrayBuffer = function () {\n  if (typeof Uint8Array !== 'undefined') {\n    if (Buffer._useTypedArrays) {\n      return (new Buffer(this)).buffer\n    } else {\n      var buf = new Uint8Array(this.length)\n      for (var i = 0, len = buf.length; i < len; i += 1)\n        buf[i] = this[i]\n      return buf.buffer\n    }\n  } else {\n    throw new Error('Buffer.toArrayBuffer not supported in this browser')\n  }\n}\n\n// HELPER FUNCTIONS\n// ================\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nvar BP = Buffer.prototype\n\n/**\n * Augment a Uint8Array *instance* (not the Uint8Array class!) with Buffer methods\n */\nBuffer._augment = function (arr) {\n  arr._isBuffer = true\n\n  // save reference to original Uint8Array get/set methods before overwriting\n  arr._get = arr.get\n  arr._set = arr.set\n\n  // deprecated, will be removed in node 0.13+\n  arr.get = BP.get\n  arr.set = BP.set\n\n  arr.write = BP.write\n  arr.toString = BP.toString\n  arr.toLocaleString = BP.toString\n  arr.toJSON = BP.toJSON\n  arr.copy = BP.copy\n  arr.slice = BP.slice\n  arr.readUInt8 = BP.readUInt8\n  arr.readUInt16LE = BP.readUInt16LE\n  arr.readUInt16BE = BP.readUInt16BE\n  arr.readUInt32LE = BP.readUInt32LE\n  arr.readUInt32BE = BP.readUInt32BE\n  arr.readInt8 = BP.readInt8\n  arr.readInt16LE = BP.readInt16LE\n  arr.readInt16BE = BP.readInt16BE\n  arr.readInt32LE = BP.readInt32LE\n  arr.readInt32BE = BP.readInt32BE\n  arr.readFloatLE = BP.readFloatLE\n  arr.readFloatBE = BP.readFloatBE\n  arr.readDoubleLE = BP.readDoubleLE\n  arr.readDoubleBE = BP.readDoubleBE\n  arr.writeUInt8 = BP.writeUInt8\n  arr.writeUInt16LE = BP.writeUInt16LE\n  arr.writeUInt16BE = BP.writeUInt16BE\n  arr.writeUInt32LE = BP.writeUInt32LE\n  arr.writeUInt32BE = BP.writeUInt32BE\n  arr.writeInt8 = BP.writeInt8\n  arr.writeInt16LE = BP.writeInt16LE\n  arr.writeInt16BE = BP.writeInt16BE\n  arr.writeInt32LE = BP.writeInt32LE\n  arr.writeInt32BE = BP.writeInt32BE\n  arr.writeFloatLE = BP.writeFloatLE\n  arr.writeFloatBE = BP.writeFloatBE\n  arr.writeDoubleLE = BP.writeDoubleLE\n  arr.writeDoubleBE = BP.writeDoubleBE\n  arr.fill = BP.fill\n  arr.inspect = BP.inspect\n  arr.toArrayBuffer = BP.toArrayBuffer\n\n  return arr\n}\n\n// slice(start, end)\nfunction clamp (index, len, defaultValue) {\n  if (typeof index !== 'number') return defaultValue\n  index = ~~index;  // Coerce to integer.\n  if (index >= len) return len\n  if (index >= 0) return index\n  index += len\n  if (index >= 0) return index\n  return 0\n}\n\nfunction coerce (length) {\n  // Coerce length to a number (possibly NaN), round up\n  // in case it's fractional (e.g. 123.456) then do a\n  // double negate to coerce a NaN to 0. Easy, right?\n  length = ~~Math.ceil(+length)\n  return length < 0 ? 0 : length\n}\n\nfunction isArray (subject) {\n  return (Array.isArray || function (subject) {\n    return Object.prototype.toString.call(subject) === '[object Array]'\n  })(subject)\n}\n\nfunction isArrayish (subject) {\n  return isArray(subject) || Buffer.isBuffer(subject) ||\n      subject && typeof subject === 'object' &&\n      typeof subject.length === 'number'\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; i++) {\n    var b = str.charCodeAt(i)\n    if (b <= 0x7F)\n      byteArray.push(str.charCodeAt(i))\n    else {\n      var start = i\n      if (b >= 0xD800 && b <= 0xDFFF) i++\n      var h = encodeURIComponent(str.slice(start, i+1)).substr(1).split('%')\n      for (var j = 0; j < h.length; j++)\n        byteArray.push(parseInt(h[j], 16))\n    }\n  }\n  return byteArray\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; i++) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; i++) {\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(str)\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  var pos\n  for (var i = 0; i < length; i++) {\n    if ((i + offset >= dst.length) || (i >= src.length))\n      break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\nfunction decodeUtf8Char (str) {\n  try {\n    return decodeURIComponent(str)\n  } catch (err) {\n    return String.fromCharCode(0xFFFD) // UTF 8 invalid char\n  }\n}\n\n/*\n * We have to make sure that the value is a valid integer. This means that it\n * is non-negative. It has no fractional component and that it does not\n * exceed the maximum allowed value.\n */\nfunction verifuint (value, max) {\n  assert(typeof value === 'number', 'cannot write a non-number as a number')\n  assert(value >= 0, 'specified a negative value for writing an unsigned value')\n  assert(value <= max, 'value is larger than maximum value for type')\n  assert(Math.floor(value) === value, 'value has a fractional component')\n}\n\nfunction verifsint (value, max, min) {\n  assert(typeof value === 'number', 'cannot write a non-number as a number')\n  assert(value <= max, 'value larger than maximum allowed value')\n  assert(value >= min, 'value smaller than minimum allowed value')\n  assert(Math.floor(value) === value, 'value has a fractional component')\n}\n\nfunction verifIEEE754 (value, max, min) {\n  assert(typeof value === 'number', 'cannot write a non-number as a number')\n  assert(value <= max, 'value larger than maximum allowed value')\n  assert(value >= min, 'value smaller than minimum allowed value')\n}\n\nfunction assert (test, message) {\n  if (!test) throw new Error(message || 'Failed assertion')\n}\n","var lookup = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n\n;(function (exports) {\n\t'use strict';\n\n  var Arr = (typeof Uint8Array !== 'undefined')\n    ? Uint8Array\n    : Array\n\n\tvar PLUS   = '+'.charCodeAt(0)\n\tvar SLASH  = '/'.charCodeAt(0)\n\tvar NUMBER = '0'.charCodeAt(0)\n\tvar LOWER  = 'a'.charCodeAt(0)\n\tvar UPPER  = 'A'.charCodeAt(0)\n\n\tfunction decode (elt) {\n\t\tvar code = elt.charCodeAt(0)\n\t\tif (code === PLUS)\n\t\t\treturn 62 // '+'\n\t\tif (code === SLASH)\n\t\t\treturn 63 // '/'\n\t\tif (code < NUMBER)\n\t\t\treturn -1 //no match\n\t\tif (code < NUMBER + 10)\n\t\t\treturn code - NUMBER + 26 + 26\n\t\tif (code < UPPER + 26)\n\t\t\treturn code - UPPER\n\t\tif (code < LOWER + 26)\n\t\t\treturn code - LOWER + 26\n\t}\n\n\tfunction b64ToByteArray (b64) {\n\t\tvar i, j, l, tmp, placeHolders, arr\n\n\t\tif (b64.length % 4 > 0) {\n\t\t\tthrow new Error('Invalid string. Length must be a multiple of 4')\n\t\t}\n\n\t\t// the number of equal signs (place holders)\n\t\t// if there are two placeholders, than the two characters before it\n\t\t// represent one byte\n\t\t// if there is only one, then the three characters before it represent 2 bytes\n\t\t// this is just a cheap hack to not do indexOf twice\n\t\tvar len = b64.length\n\t\tplaceHolders = '=' === b64.charAt(len - 2) ? 2 : '=' === b64.charAt(len - 1) ? 1 : 0\n\n\t\t// base64 is 4/3 + up to two characters of the original data\n\t\tarr = new Arr(b64.length * 3 / 4 - placeHolders)\n\n\t\t// if there are placeholders, only get up to the last complete 4 chars\n\t\tl = placeHolders > 0 ? b64.length - 4 : b64.length\n\n\t\tvar L = 0\n\n\t\tfunction push (v) {\n\t\t\tarr[L++] = v\n\t\t}\n\n\t\tfor (i = 0, j = 0; i < l; i += 4, j += 3) {\n\t\t\ttmp = (decode(b64.charAt(i)) << 18) | (decode(b64.charAt(i + 1)) << 12) | (decode(b64.charAt(i + 2)) << 6) | decode(b64.charAt(i + 3))\n\t\t\tpush((tmp & 0xFF0000) >> 16)\n\t\t\tpush((tmp & 0xFF00) >> 8)\n\t\t\tpush(tmp & 0xFF)\n\t\t}\n\n\t\tif (placeHolders === 2) {\n\t\t\ttmp = (decode(b64.charAt(i)) << 2) | (decode(b64.charAt(i + 1)) >> 4)\n\t\t\tpush(tmp & 0xFF)\n\t\t} else if (placeHolders === 1) {\n\t\t\ttmp = (decode(b64.charAt(i)) << 10) | (decode(b64.charAt(i + 1)) << 4) | (decode(b64.charAt(i + 2)) >> 2)\n\t\t\tpush((tmp >> 8) & 0xFF)\n\t\t\tpush(tmp & 0xFF)\n\t\t}\n\n\t\treturn arr\n\t}\n\n\tfunction uint8ToBase64 (uint8) {\n\t\tvar i,\n\t\t\textraBytes = uint8.length % 3, // if we have 1 byte left, pad 2 bytes\n\t\t\toutput = \"\",\n\t\t\ttemp, length\n\n\t\tfunction encode (num) {\n\t\t\treturn lookup.charAt(num)\n\t\t}\n\n\t\tfunction tripletToBase64 (num) {\n\t\t\treturn encode(num >> 18 & 0x3F) + encode(num >> 12 & 0x3F) + encode(num >> 6 & 0x3F) + encode(num & 0x3F)\n\t\t}\n\n\t\t// go through the array every three bytes, we'll deal with trailing stuff later\n\t\tfor (i = 0, length = uint8.length - extraBytes; i < length; i += 3) {\n\t\t\ttemp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])\n\t\t\toutput += tripletToBase64(temp)\n\t\t}\n\n\t\t// pad the end with zeros, but make sure to not forget the extra bytes\n\t\tswitch (extraBytes) {\n\t\t\tcase 1:\n\t\t\t\ttemp = uint8[uint8.length - 1]\n\t\t\t\toutput += encode(temp >> 2)\n\t\t\t\toutput += encode((temp << 4) & 0x3F)\n\t\t\t\toutput += '=='\n\t\t\t\tbreak\n\t\t\tcase 2:\n\t\t\t\ttemp = (uint8[uint8.length - 2] << 8) + (uint8[uint8.length - 1])\n\t\t\t\toutput += encode(temp >> 10)\n\t\t\t\toutput += encode((temp >> 4) & 0x3F)\n\t\t\t\toutput += encode((temp << 2) & 0x3F)\n\t\t\t\toutput += '='\n\t\t\t\tbreak\n\t\t}\n\n\t\treturn output\n\t}\n\n\texports.toByteArray = b64ToByteArray\n\texports.fromByteArray = uint8ToBase64\n}(typeof exports === 'undefined' ? (this.base64js = {}) : exports))\n","exports.read = function(buffer, offset, isLE, mLen, nBytes) {\n  var e, m,\n      eLen = nBytes * 8 - mLen - 1,\n      eMax = (1 << eLen) - 1,\n      eBias = eMax >> 1,\n      nBits = -7,\n      i = isLE ? (nBytes - 1) : 0,\n      d = isLE ? -1 : 1,\n      s = buffer[offset + i];\n\n  i += d;\n\n  e = s & ((1 << (-nBits)) - 1);\n  s >>= (-nBits);\n  nBits += eLen;\n  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8);\n\n  m = e & ((1 << (-nBits)) - 1);\n  e >>= (-nBits);\n  nBits += mLen;\n  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8);\n\n  if (e === 0) {\n    e = 1 - eBias;\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity);\n  } else {\n    m = m + Math.pow(2, mLen);\n    e = e - eBias;\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen);\n};\n\nexports.write = function(buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c,\n      eLen = nBytes * 8 - mLen - 1,\n      eMax = (1 << eLen) - 1,\n      eBias = eMax >> 1,\n      rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0),\n      i = isLE ? 0 : (nBytes - 1),\n      d = isLE ? 1 : -1,\n      s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;\n\n  value = Math.abs(value);\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0;\n    e = eMax;\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2);\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--;\n      c *= 2;\n    }\n    if (e + eBias >= 1) {\n      value += rt / c;\n    } else {\n      value += rt * Math.pow(2, 1 - eBias);\n    }\n    if (value * c >= 2) {\n      e++;\n      c /= 2;\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0;\n      e = eMax;\n    } else if (e + eBias >= 1) {\n      m = (value * c - 1) * Math.pow(2, mLen);\n      e = e + eBias;\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);\n      e = 0;\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8);\n\n  e = (e << mLen) | m;\n  eLen += mLen;\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8);\n\n  buffer[offset + i - d] |= s * 128;\n};\n","var Buffer = require('buffer').Buffer;\nvar intSize = 4;\nvar zeroBuffer = new Buffer(intSize); zeroBuffer.fill(0);\nvar chrsz = 8;\n\nfunction toArray(buf, bigEndian) {\n  if ((buf.length % intSize) !== 0) {\n    var len = buf.length + (intSize - (buf.length % intSize));\n    buf = Buffer.concat([buf, zeroBuffer], len);\n  }\n\n  var arr = [];\n  var fn = bigEndian ? buf.readInt32BE : buf.readInt32LE;\n  for (var i = 0; i < buf.length; i += intSize) {\n    arr.push(fn.call(buf, i));\n  }\n  return arr;\n}\n\nfunction toBuffer(arr, size, bigEndian) {\n  var buf = new Buffer(size);\n  var fn = bigEndian ? buf.writeInt32BE : buf.writeInt32LE;\n  for (var i = 0; i < arr.length; i++) {\n    fn.call(buf, arr[i], i * 4, true);\n  }\n  return buf;\n}\n\nfunction hash(buf, fn, hashSize, bigEndian) {\n  if (!Buffer.isBuffer(buf)) buf = new Buffer(buf);\n  var arr = fn(toArray(buf, bigEndian), buf.length * chrsz);\n  return toBuffer(arr, hashSize, bigEndian);\n}\n\nmodule.exports = { hash: hash };\n","var Buffer = require('buffer').Buffer\nvar sha = require('./sha')\nvar sha256 = require('./sha256')\nvar rng = require('./rng')\nvar md5 = require('./md5')\n\nvar algorithms = {\n  sha1: sha,\n  sha256: sha256,\n  md5: md5\n}\n\nvar blocksize = 64\nvar zeroBuffer = new Buffer(blocksize); zeroBuffer.fill(0)\nfunction hmac(fn, key, data) {\n  if(!Buffer.isBuffer(key)) key = new Buffer(key)\n  if(!Buffer.isBuffer(data)) data = new Buffer(data)\n\n  if(key.length > blocksize) {\n    key = fn(key)\n  } else if(key.length < blocksize) {\n    key = Buffer.concat([key, zeroBuffer], blocksize)\n  }\n\n  var ipad = new Buffer(blocksize), opad = new Buffer(blocksize)\n  for(var i = 0; i < blocksize; i++) {\n    ipad[i] = key[i] ^ 0x36\n    opad[i] = key[i] ^ 0x5C\n  }\n\n  var hash = fn(Buffer.concat([ipad, data]))\n  return fn(Buffer.concat([opad, hash]))\n}\n\nfunction hash(alg, key) {\n  alg = alg || 'sha1'\n  var fn = algorithms[alg]\n  var bufs = []\n  var length = 0\n  if(!fn) error('algorithm:', alg, 'is not yet supported')\n  return {\n    update: function (data) {\n      if(!Buffer.isBuffer(data)) data = new Buffer(data)\n        \n      bufs.push(data)\n      length += data.length\n      return this\n    },\n    digest: function (enc) {\n      var buf = Buffer.concat(bufs)\n      var r = key ? hmac(fn, key, buf) : fn(buf)\n      bufs = null\n      return enc ? r.toString(enc) : r\n    }\n  }\n}\n\nfunction error () {\n  var m = [].slice.call(arguments).join(' ')\n  throw new Error([\n    m,\n    'we accept pull requests',\n    'http://github.com/dominictarr/crypto-browserify'\n    ].join('\\n'))\n}\n\nexports.createHash = function (alg) { return hash(alg) }\nexports.createHmac = function (alg, key) { return hash(alg, key) }\nexports.randomBytes = function(size, callback) {\n  if (callback && callback.call) {\n    try {\n      callback.call(this, undefined, new Buffer(rng(size)))\n    } catch (err) { callback(err) }\n  } else {\n    return new Buffer(rng(size))\n  }\n}\n\nfunction each(a, f) {\n  for(var i in a)\n    f(a[i], i)\n}\n\n// the least I can do is make error messages for the rest of the node.js/crypto api.\neach(['createCredentials'\n, 'createCipher'\n, 'createCipheriv'\n, 'createDecipher'\n, 'createDecipheriv'\n, 'createSign'\n, 'createVerify'\n, 'createDiffieHellman'\n, 'pbkdf2'], function (name) {\n  exports[name] = function () {\n    error('sorry,', name, 'is not implemented yet')\n  }\n})\n","/*\r\n * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message\r\n * Digest Algorithm, as defined in RFC 1321.\r\n * Version 2.1 Copyright (C) Paul Johnston 1999 - 2002.\r\n * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\r\n * Distributed under the BSD License\r\n * See http://pajhome.org.uk/crypt/md5 for more info.\r\n */\r\n\r\nvar helpers = require('./helpers');\r\n\r\n/*\r\n * Perform a simple self-test to see if the VM is working\r\n */\r\nfunction md5_vm_test()\r\n{\r\n  return hex_md5(\"abc\") == \"900150983cd24fb0d6963f7d28e17f72\";\r\n}\r\n\r\n/*\r\n * Calculate the MD5 of an array of little-endian words, and a bit length\r\n */\r\nfunction core_md5(x, len)\r\n{\r\n  /* append padding */\r\n  x[len >> 5] |= 0x80 << ((len) % 32);\r\n  x[(((len + 64) >>> 9) << 4) + 14] = len;\r\n\r\n  var a =  1732584193;\r\n  var b = -271733879;\r\n  var c = -1732584194;\r\n  var d =  271733878;\r\n\r\n  for(var i = 0; i < x.length; i += 16)\r\n  {\r\n    var olda = a;\r\n    var oldb = b;\r\n    var oldc = c;\r\n    var oldd = d;\r\n\r\n    a = md5_ff(a, b, c, d, x[i+ 0], 7 , -680876936);\r\n    d = md5_ff(d, a, b, c, x[i+ 1], 12, -389564586);\r\n    c = md5_ff(c, d, a, b, x[i+ 2], 17,  606105819);\r\n    b = md5_ff(b, c, d, a, x[i+ 3], 22, -1044525330);\r\n    a = md5_ff(a, b, c, d, x[i+ 4], 7 , -176418897);\r\n    d = md5_ff(d, a, b, c, x[i+ 5], 12,  1200080426);\r\n    c = md5_ff(c, d, a, b, x[i+ 6], 17, -1473231341);\r\n    b = md5_ff(b, c, d, a, x[i+ 7], 22, -45705983);\r\n    a = md5_ff(a, b, c, d, x[i+ 8], 7 ,  1770035416);\r\n    d = md5_ff(d, a, b, c, x[i+ 9], 12, -1958414417);\r\n    c = md5_ff(c, d, a, b, x[i+10], 17, -42063);\r\n    b = md5_ff(b, c, d, a, x[i+11], 22, -1990404162);\r\n    a = md5_ff(a, b, c, d, x[i+12], 7 ,  1804603682);\r\n    d = md5_ff(d, a, b, c, x[i+13], 12, -40341101);\r\n    c = md5_ff(c, d, a, b, x[i+14], 17, -1502002290);\r\n    b = md5_ff(b, c, d, a, x[i+15], 22,  1236535329);\r\n\r\n    a = md5_gg(a, b, c, d, x[i+ 1], 5 , -165796510);\r\n    d = md5_gg(d, a, b, c, x[i+ 6], 9 , -1069501632);\r\n    c = md5_gg(c, d, a, b, x[i+11], 14,  643717713);\r\n    b = md5_gg(b, c, d, a, x[i+ 0], 20, -373897302);\r\n    a = md5_gg(a, b, c, d, x[i+ 5], 5 , -701558691);\r\n    d = md5_gg(d, a, b, c, x[i+10], 9 ,  38016083);\r\n    c = md5_gg(c, d, a, b, x[i+15], 14, -660478335);\r\n    b = md5_gg(b, c, d, a, x[i+ 4], 20, -405537848);\r\n    a = md5_gg(a, b, c, d, x[i+ 9], 5 ,  568446438);\r\n    d = md5_gg(d, a, b, c, x[i+14], 9 , -1019803690);\r\n    c = md5_gg(c, d, a, b, x[i+ 3], 14, -187363961);\r\n    b = md5_gg(b, c, d, a, x[i+ 8], 20,  1163531501);\r\n    a = md5_gg(a, b, c, d, x[i+13], 5 , -1444681467);\r\n    d = md5_gg(d, a, b, c, x[i+ 2], 9 , -51403784);\r\n    c = md5_gg(c, d, a, b, x[i+ 7], 14,  1735328473);\r\n    b = md5_gg(b, c, d, a, x[i+12], 20, -1926607734);\r\n\r\n    a = md5_hh(a, b, c, d, x[i+ 5], 4 , -378558);\r\n    d = md5_hh(d, a, b, c, x[i+ 8], 11, -2022574463);\r\n    c = md5_hh(c, d, a, b, x[i+11], 16,  1839030562);\r\n    b = md5_hh(b, c, d, a, x[i+14], 23, -35309556);\r\n    a = md5_hh(a, b, c, d, x[i+ 1], 4 , -1530992060);\r\n    d = md5_hh(d, a, b, c, x[i+ 4], 11,  1272893353);\r\n    c = md5_hh(c, d, a, b, x[i+ 7], 16, -155497632);\r\n    b = md5_hh(b, c, d, a, x[i+10], 23, -1094730640);\r\n    a = md5_hh(a, b, c, d, x[i+13], 4 ,  681279174);\r\n    d = md5_hh(d, a, b, c, x[i+ 0], 11, -358537222);\r\n    c = md5_hh(c, d, a, b, x[i+ 3], 16, -722521979);\r\n    b = md5_hh(b, c, d, a, x[i+ 6], 23,  76029189);\r\n    a = md5_hh(a, b, c, d, x[i+ 9], 4 , -640364487);\r\n    d = md5_hh(d, a, b, c, x[i+12], 11, -421815835);\r\n    c = md5_hh(c, d, a, b, x[i+15], 16,  530742520);\r\n    b = md5_hh(b, c, d, a, x[i+ 2], 23, -995338651);\r\n\r\n    a = md5_ii(a, b, c, d, x[i+ 0], 6 , -198630844);\r\n    d = md5_ii(d, a, b, c, x[i+ 7], 10,  1126891415);\r\n    c = md5_ii(c, d, a, b, x[i+14], 15, -1416354905);\r\n    b = md5_ii(b, c, d, a, x[i+ 5], 21, -57434055);\r\n    a = md5_ii(a, b, c, d, x[i+12], 6 ,  1700485571);\r\n    d = md5_ii(d, a, b, c, x[i+ 3], 10, -1894986606);\r\n    c = md5_ii(c, d, a, b, x[i+10], 15, -1051523);\r\n    b = md5_ii(b, c, d, a, x[i+ 1], 21, -2054922799);\r\n    a = md5_ii(a, b, c, d, x[i+ 8], 6 ,  1873313359);\r\n    d = md5_ii(d, a, b, c, x[i+15], 10, -30611744);\r\n    c = md5_ii(c, d, a, b, x[i+ 6], 15, -1560198380);\r\n    b = md5_ii(b, c, d, a, x[i+13], 21,  1309151649);\r\n    a = md5_ii(a, b, c, d, x[i+ 4], 6 , -145523070);\r\n    d = md5_ii(d, a, b, c, x[i+11], 10, -1120210379);\r\n    c = md5_ii(c, d, a, b, x[i+ 2], 15,  718787259);\r\n    b = md5_ii(b, c, d, a, x[i+ 9], 21, -343485551);\r\n\r\n    a = safe_add(a, olda);\r\n    b = safe_add(b, oldb);\r\n    c = safe_add(c, oldc);\r\n    d = safe_add(d, oldd);\r\n  }\r\n  return Array(a, b, c, d);\r\n\r\n}\r\n\r\n/*\r\n * These functions implement the four basic operations the algorithm uses.\r\n */\r\nfunction md5_cmn(q, a, b, x, s, t)\r\n{\r\n  return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s),b);\r\n}\r\nfunction md5_ff(a, b, c, d, x, s, t)\r\n{\r\n  return md5_cmn((b & c) | ((~b) & d), a, b, x, s, t);\r\n}\r\nfunction md5_gg(a, b, c, d, x, s, t)\r\n{\r\n  return md5_cmn((b & d) | (c & (~d)), a, b, x, s, t);\r\n}\r\nfunction md5_hh(a, b, c, d, x, s, t)\r\n{\r\n  return md5_cmn(b ^ c ^ d, a, b, x, s, t);\r\n}\r\nfunction md5_ii(a, b, c, d, x, s, t)\r\n{\r\n  return md5_cmn(c ^ (b | (~d)), a, b, x, s, t);\r\n}\r\n\r\n/*\r\n * Add integers, wrapping at 2^32. This uses 16-bit operations internally\r\n * to work around bugs in some JS interpreters.\r\n */\r\nfunction safe_add(x, y)\r\n{\r\n  var lsw = (x & 0xFFFF) + (y & 0xFFFF);\r\n  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\r\n  return (msw << 16) | (lsw & 0xFFFF);\r\n}\r\n\r\n/*\r\n * Bitwise rotate a 32-bit number to the left.\r\n */\r\nfunction bit_rol(num, cnt)\r\n{\r\n  return (num << cnt) | (num >>> (32 - cnt));\r\n}\r\n\r\nmodule.exports = function md5(buf) {\r\n  return helpers.hash(buf, core_md5, 16);\r\n};\r\n","// Original code adapted from Robert Kieffer.\n// details at https://github.com/broofa/node-uuid\n(function() {\n  var _global = this;\n\n  var mathRNG, whatwgRNG;\n\n  // NOTE: Math.random() does not guarantee \"cryptographic quality\"\n  mathRNG = function(size) {\n    var bytes = new Array(size);\n    var r;\n\n    for (var i = 0, r; i < size; i++) {\n      if ((i & 0x03) == 0) r = Math.random() * 0x100000000;\n      bytes[i] = r >>> ((i & 0x03) << 3) & 0xff;\n    }\n\n    return bytes;\n  }\n\n  if (_global.crypto && crypto.getRandomValues) {\n    whatwgRNG = function(size) {\n      var bytes = new Uint8Array(size);\n      crypto.getRandomValues(bytes);\n      return bytes;\n    }\n  }\n\n  module.exports = whatwgRNG || mathRNG;\n\n}())\n","/*\n * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined\n * in FIPS PUB 180-1\n * Version 2.1a Copyright Paul Johnston 2000 - 2002.\n * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n * Distributed under the BSD License\n * See http://pajhome.org.uk/crypt/md5 for details.\n */\n\nvar helpers = require('./helpers');\n\n/*\n * Calculate the SHA-1 of an array of big-endian words, and a bit length\n */\nfunction core_sha1(x, len)\n{\n  /* append padding */\n  x[len >> 5] |= 0x80 << (24 - len % 32);\n  x[((len + 64 >> 9) << 4) + 15] = len;\n\n  var w = Array(80);\n  var a =  1732584193;\n  var b = -271733879;\n  var c = -1732584194;\n  var d =  271733878;\n  var e = -1009589776;\n\n  for(var i = 0; i < x.length; i += 16)\n  {\n    var olda = a;\n    var oldb = b;\n    var oldc = c;\n    var oldd = d;\n    var olde = e;\n\n    for(var j = 0; j < 80; j++)\n    {\n      if(j < 16) w[j] = x[i + j];\n      else w[j] = rol(w[j-3] ^ w[j-8] ^ w[j-14] ^ w[j-16], 1);\n      var t = safe_add(safe_add(rol(a, 5), sha1_ft(j, b, c, d)),\n                       safe_add(safe_add(e, w[j]), sha1_kt(j)));\n      e = d;\n      d = c;\n      c = rol(b, 30);\n      b = a;\n      a = t;\n    }\n\n    a = safe_add(a, olda);\n    b = safe_add(b, oldb);\n    c = safe_add(c, oldc);\n    d = safe_add(d, oldd);\n    e = safe_add(e, olde);\n  }\n  return Array(a, b, c, d, e);\n\n}\n\n/*\n * Perform the appropriate triplet combination function for the current\n * iteration\n */\nfunction sha1_ft(t, b, c, d)\n{\n  if(t < 20) return (b & c) | ((~b) & d);\n  if(t < 40) return b ^ c ^ d;\n  if(t < 60) return (b & c) | (b & d) | (c & d);\n  return b ^ c ^ d;\n}\n\n/*\n * Determine the appropriate additive constant for the current iteration\n */\nfunction sha1_kt(t)\n{\n  return (t < 20) ?  1518500249 : (t < 40) ?  1859775393 :\n         (t < 60) ? -1894007588 : -899497514;\n}\n\n/*\n * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n * to work around bugs in some JS interpreters.\n */\nfunction safe_add(x, y)\n{\n  var lsw = (x & 0xFFFF) + (y & 0xFFFF);\n  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n  return (msw << 16) | (lsw & 0xFFFF);\n}\n\n/*\n * Bitwise rotate a 32-bit number to the left.\n */\nfunction rol(num, cnt)\n{\n  return (num << cnt) | (num >>> (32 - cnt));\n}\n\nmodule.exports = function sha1(buf) {\n  return helpers.hash(buf, core_sha1, 20, true);\n};\n","\n/**\n * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined\n * in FIPS 180-2\n * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.\n * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n *\n */\n\nvar helpers = require('./helpers');\n\nvar safe_add = function(x, y) {\n  var lsw = (x & 0xFFFF) + (y & 0xFFFF);\n  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n  return (msw << 16) | (lsw & 0xFFFF);\n};\n\nvar S = function(X, n) {\n  return (X >>> n) | (X << (32 - n));\n};\n\nvar R = function(X, n) {\n  return (X >>> n);\n};\n\nvar Ch = function(x, y, z) {\n  return ((x & y) ^ ((~x) & z));\n};\n\nvar Maj = function(x, y, z) {\n  return ((x & y) ^ (x & z) ^ (y & z));\n};\n\nvar Sigma0256 = function(x) {\n  return (S(x, 2) ^ S(x, 13) ^ S(x, 22));\n};\n\nvar Sigma1256 = function(x) {\n  return (S(x, 6) ^ S(x, 11) ^ S(x, 25));\n};\n\nvar Gamma0256 = function(x) {\n  return (S(x, 7) ^ S(x, 18) ^ R(x, 3));\n};\n\nvar Gamma1256 = function(x) {\n  return (S(x, 17) ^ S(x, 19) ^ R(x, 10));\n};\n\nvar core_sha256 = function(m, l) {\n  var K = new Array(0x428A2F98,0x71374491,0xB5C0FBCF,0xE9B5DBA5,0x3956C25B,0x59F111F1,0x923F82A4,0xAB1C5ED5,0xD807AA98,0x12835B01,0x243185BE,0x550C7DC3,0x72BE5D74,0x80DEB1FE,0x9BDC06A7,0xC19BF174,0xE49B69C1,0xEFBE4786,0xFC19DC6,0x240CA1CC,0x2DE92C6F,0x4A7484AA,0x5CB0A9DC,0x76F988DA,0x983E5152,0xA831C66D,0xB00327C8,0xBF597FC7,0xC6E00BF3,0xD5A79147,0x6CA6351,0x14292967,0x27B70A85,0x2E1B2138,0x4D2C6DFC,0x53380D13,0x650A7354,0x766A0ABB,0x81C2C92E,0x92722C85,0xA2BFE8A1,0xA81A664B,0xC24B8B70,0xC76C51A3,0xD192E819,0xD6990624,0xF40E3585,0x106AA070,0x19A4C116,0x1E376C08,0x2748774C,0x34B0BCB5,0x391C0CB3,0x4ED8AA4A,0x5B9CCA4F,0x682E6FF3,0x748F82EE,0x78A5636F,0x84C87814,0x8CC70208,0x90BEFFFA,0xA4506CEB,0xBEF9A3F7,0xC67178F2);\n  var HASH = new Array(0x6A09E667, 0xBB67AE85, 0x3C6EF372, 0xA54FF53A, 0x510E527F, 0x9B05688C, 0x1F83D9AB, 0x5BE0CD19);\n    var W = new Array(64);\n    var a, b, c, d, e, f, g, h, i, j;\n    var T1, T2;\n  /* append padding */\n  m[l >> 5] |= 0x80 << (24 - l % 32);\n  m[((l + 64 >> 9) << 4) + 15] = l;\n  for (var i = 0; i < m.length; i += 16) {\n    a = HASH[0]; b = HASH[1]; c = HASH[2]; d = HASH[3]; e = HASH[4]; f = HASH[5]; g = HASH[6]; h = HASH[7];\n    for (var j = 0; j < 64; j++) {\n      if (j < 16) {\n        W[j] = m[j + i];\n      } else {\n        W[j] = safe_add(safe_add(safe_add(Gamma1256(W[j - 2]), W[j - 7]), Gamma0256(W[j - 15])), W[j - 16]);\n      }\n      T1 = safe_add(safe_add(safe_add(safe_add(h, Sigma1256(e)), Ch(e, f, g)), K[j]), W[j]);\n      T2 = safe_add(Sigma0256(a), Maj(a, b, c));\n      h = g; g = f; f = e; e = safe_add(d, T1); d = c; c = b; b = a; a = safe_add(T1, T2);\n    }\n    HASH[0] = safe_add(a, HASH[0]); HASH[1] = safe_add(b, HASH[1]); HASH[2] = safe_add(c, HASH[2]); HASH[3] = safe_add(d, HASH[3]);\n    HASH[4] = safe_add(e, HASH[4]); HASH[5] = safe_add(f, HASH[5]); HASH[6] = safe_add(g, HASH[6]); HASH[7] = safe_add(h, HASH[7]);\n  }\n  return HASH;\n};\n\nmodule.exports = function sha256(buf) {\n  return helpers.hash(buf, core_sha256, 32, true);\n};\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nfunction EventEmitter() {\n  this._events = this._events || {};\n  this._maxListeners = this._maxListeners || undefined;\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nEventEmitter.defaultMaxListeners = 10;\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function(n) {\n  if (!isNumber(n) || n < 0 || isNaN(n))\n    throw TypeError('n must be a positive number');\n  this._maxListeners = n;\n  return this;\n};\n\nEventEmitter.prototype.emit = function(type) {\n  var er, handler, len, args, i, listeners;\n\n  if (!this._events)\n    this._events = {};\n\n  // If there is no 'error' event listener then throw.\n  if (type === 'error') {\n    if (!this._events.error ||\n        (isObject(this._events.error) && !this._events.error.length)) {\n      er = arguments[1];\n      if (er instanceof Error) {\n        throw er; // Unhandled 'error' event\n      } else {\n        throw TypeError('Uncaught, unspecified \"error\" event.');\n      }\n      return false;\n    }\n  }\n\n  handler = this._events[type];\n\n  if (isUndefined(handler))\n    return false;\n\n  if (isFunction(handler)) {\n    switch (arguments.length) {\n      // fast cases\n      case 1:\n        handler.call(this);\n        break;\n      case 2:\n        handler.call(this, arguments[1]);\n        break;\n      case 3:\n        handler.call(this, arguments[1], arguments[2]);\n        break;\n      // slower\n      default:\n        len = arguments.length;\n        args = new Array(len - 1);\n        for (i = 1; i < len; i++)\n          args[i - 1] = arguments[i];\n        handler.apply(this, args);\n    }\n  } else if (isObject(handler)) {\n    len = arguments.length;\n    args = new Array(len - 1);\n    for (i = 1; i < len; i++)\n      args[i - 1] = arguments[i];\n\n    listeners = handler.slice();\n    len = listeners.length;\n    for (i = 0; i < len; i++)\n      listeners[i].apply(this, args);\n  }\n\n  return true;\n};\n\nEventEmitter.prototype.addListener = function(type, listener) {\n  var m;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events)\n    this._events = {};\n\n  // To avoid recursion in the case that type === \"newListener\"! Before\n  // adding it to the listeners, first emit \"newListener\".\n  if (this._events.newListener)\n    this.emit('newListener', type,\n              isFunction(listener.listener) ?\n              listener.listener : listener);\n\n  if (!this._events[type])\n    // Optimize the case of one listener. Don't need the extra array object.\n    this._events[type] = listener;\n  else if (isObject(this._events[type]))\n    // If we've already got an array, just append.\n    this._events[type].push(listener);\n  else\n    // Adding the second element, need to change to array.\n    this._events[type] = [this._events[type], listener];\n\n  // Check for listener leak\n  if (isObject(this._events[type]) && !this._events[type].warned) {\n    var m;\n    if (!isUndefined(this._maxListeners)) {\n      m = this._maxListeners;\n    } else {\n      m = EventEmitter.defaultMaxListeners;\n    }\n\n    if (m && m > 0 && this._events[type].length > m) {\n      this._events[type].warned = true;\n      console.error('(node) warning: possible EventEmitter memory ' +\n                    'leak detected. %d listeners added. ' +\n                    'Use emitter.setMaxListeners() to increase limit.',\n                    this._events[type].length);\n      if (typeof console.trace === 'function') {\n        // not supported in IE 10\n        console.trace();\n      }\n    }\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.once = function(type, listener) {\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  var fired = false;\n\n  function g() {\n    this.removeListener(type, g);\n\n    if (!fired) {\n      fired = true;\n      listener.apply(this, arguments);\n    }\n  }\n\n  g.listener = listener;\n  this.on(type, g);\n\n  return this;\n};\n\n// emits a 'removeListener' event iff the listener was removed\nEventEmitter.prototype.removeListener = function(type, listener) {\n  var list, position, length, i;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events || !this._events[type])\n    return this;\n\n  list = this._events[type];\n  length = list.length;\n  position = -1;\n\n  if (list === listener ||\n      (isFunction(list.listener) && list.listener === listener)) {\n    delete this._events[type];\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n\n  } else if (isObject(list)) {\n    for (i = length; i-- > 0;) {\n      if (list[i] === listener ||\n          (list[i].listener && list[i].listener === listener)) {\n        position = i;\n        break;\n      }\n    }\n\n    if (position < 0)\n      return this;\n\n    if (list.length === 1) {\n      list.length = 0;\n      delete this._events[type];\n    } else {\n      list.splice(position, 1);\n    }\n\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.removeAllListeners = function(type) {\n  var key, listeners;\n\n  if (!this._events)\n    return this;\n\n  // not listening for removeListener, no need to emit\n  if (!this._events.removeListener) {\n    if (arguments.length === 0)\n      this._events = {};\n    else if (this._events[type])\n      delete this._events[type];\n    return this;\n  }\n\n  // emit removeListener for all listeners on all events\n  if (arguments.length === 0) {\n    for (key in this._events) {\n      if (key === 'removeListener') continue;\n      this.removeAllListeners(key);\n    }\n    this.removeAllListeners('removeListener');\n    this._events = {};\n    return this;\n  }\n\n  listeners = this._events[type];\n\n  if (isFunction(listeners)) {\n    this.removeListener(type, listeners);\n  } else {\n    // LIFO order\n    while (listeners.length)\n      this.removeListener(type, listeners[listeners.length - 1]);\n  }\n  delete this._events[type];\n\n  return this;\n};\n\nEventEmitter.prototype.listeners = function(type) {\n  var ret;\n  if (!this._events || !this._events[type])\n    ret = [];\n  else if (isFunction(this._events[type]))\n    ret = [this._events[type]];\n  else\n    ret = this._events[type].slice();\n  return ret;\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  var ret;\n  if (!emitter._events || !emitter._events[type])\n    ret = 0;\n  else if (isFunction(emitter._events[type]))\n    ret = 1;\n  else\n    ret = emitter._events[type].length;\n  return ret;\n};\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\n","(function (process){\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// resolves . and .. elements in a path array with directory names there\n// must be no slashes, empty elements, or device names (c:\\) in the array\n// (so also no leading and trailing slashes - it does not distinguish\n// relative and absolute paths)\nfunction normalizeArray(parts, allowAboveRoot) {\n  // if the path tries to go above the root, `up` ends up > 0\n  var up = 0;\n  for (var i = parts.length - 1; i >= 0; i--) {\n    var last = parts[i];\n    if (last === '.') {\n      parts.splice(i, 1);\n    } else if (last === '..') {\n      parts.splice(i, 1);\n      up++;\n    } else if (up) {\n      parts.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (allowAboveRoot) {\n    for (; up--; up) {\n      parts.unshift('..');\n    }\n  }\n\n  return parts;\n}\n\n// Split a filename into [root, dir, basename, ext], unix version\n// 'root' is just a slash, or nothing.\nvar splitPathRe =\n    /^(\\/?|)([\\s\\S]*?)((?:\\.{1,2}|[^\\/]+?|)(\\.[^.\\/]*|))(?:[\\/]*)$/;\nvar splitPath = function(filename) {\n  return splitPathRe.exec(filename).slice(1);\n};\n\n// path.resolve([from ...], to)\n// posix version\nexports.resolve = function() {\n  var resolvedPath = '',\n      resolvedAbsolute = false;\n\n  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n    var path = (i >= 0) ? arguments[i] : process.cwd();\n\n    // Skip empty and invalid entries\n    if (typeof path !== 'string') {\n      throw new TypeError('Arguments to path.resolve must be strings');\n    } else if (!path) {\n      continue;\n    }\n\n    resolvedPath = path + '/' + resolvedPath;\n    resolvedAbsolute = path.charAt(0) === '/';\n  }\n\n  // At this point the path should be resolved to a full absolute path, but\n  // handle relative paths to be safe (might happen when process.cwd() fails)\n\n  // Normalize the path\n  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {\n    return !!p;\n  }), !resolvedAbsolute).join('/');\n\n  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';\n};\n\n// path.normalize(path)\n// posix version\nexports.normalize = function(path) {\n  var isAbsolute = exports.isAbsolute(path),\n      trailingSlash = substr(path, -1) === '/';\n\n  // Normalize the path\n  path = normalizeArray(filter(path.split('/'), function(p) {\n    return !!p;\n  }), !isAbsolute).join('/');\n\n  if (!path && !isAbsolute) {\n    path = '.';\n  }\n  if (path && trailingSlash) {\n    path += '/';\n  }\n\n  return (isAbsolute ? '/' : '') + path;\n};\n\n// posix version\nexports.isAbsolute = function(path) {\n  return path.charAt(0) === '/';\n};\n\n// posix version\nexports.join = function() {\n  var paths = Array.prototype.slice.call(arguments, 0);\n  return exports.normalize(filter(paths, function(p, index) {\n    if (typeof p !== 'string') {\n      throw new TypeError('Arguments to path.join must be strings');\n    }\n    return p;\n  }).join('/'));\n};\n\n\n// path.relative(from, to)\n// posix version\nexports.relative = function(from, to) {\n  from = exports.resolve(from).substr(1);\n  to = exports.resolve(to).substr(1);\n\n  function trim(arr) {\n    var start = 0;\n    for (; start < arr.length; start++) {\n      if (arr[start] !== '') break;\n    }\n\n    var end = arr.length - 1;\n    for (; end >= 0; end--) {\n      if (arr[end] !== '') break;\n    }\n\n    if (start > end) return [];\n    return arr.slice(start, end - start + 1);\n  }\n\n  var fromParts = trim(from.split('/'));\n  var toParts = trim(to.split('/'));\n\n  var length = Math.min(fromParts.length, toParts.length);\n  var samePartsLength = length;\n  for (var i = 0; i < length; i++) {\n    if (fromParts[i] !== toParts[i]) {\n      samePartsLength = i;\n      break;\n    }\n  }\n\n  var outputParts = [];\n  for (var i = samePartsLength; i < fromParts.length; i++) {\n    outputParts.push('..');\n  }\n\n  outputParts = outputParts.concat(toParts.slice(samePartsLength));\n\n  return outputParts.join('/');\n};\n\nexports.sep = '/';\nexports.delimiter = ':';\n\nexports.dirname = function(path) {\n  var result = splitPath(path),\n      root = result[0],\n      dir = result[1];\n\n  if (!root && !dir) {\n    // No dirname whatsoever\n    return '.';\n  }\n\n  if (dir) {\n    // It has a dirname, strip trailing slash\n    dir = dir.substr(0, dir.length - 1);\n  }\n\n  return root + dir;\n};\n\n\nexports.basename = function(path, ext) {\n  var f = splitPath(path)[2];\n  // TODO: make this comparison case-insensitive on windows?\n  if (ext && f.substr(-1 * ext.length) === ext) {\n    f = f.substr(0, f.length - ext.length);\n  }\n  return f;\n};\n\n\nexports.extname = function(path) {\n  return splitPath(path)[3];\n};\n\nfunction filter (xs, f) {\n    if (xs.filter) return xs.filter(f);\n    var res = [];\n    for (var i = 0; i < xs.length; i++) {\n        if (f(xs[i], i, xs)) res.push(xs[i]);\n    }\n    return res;\n}\n\n// String.prototype.substr - negative index don't work in IE8\nvar substr = 'ab'.substr(-1) === 'b'\n    ? function (str, start, len) { return str.substr(start, len) }\n    : function (str, start, len) {\n        if (start < 0) start = str.length + start;\n        return str.substr(start, len);\n    }\n;\n\n}).call(this,require(\"fH0/fz\"))","// shim for using process in browser\n\nvar process = module.exports = {};\n\nprocess.nextTick = (function () {\n    var canSetImmediate = typeof window !== 'undefined'\n    && window.setImmediate;\n    var canPost = typeof window !== 'undefined'\n    && window.postMessage && window.addEventListener\n    ;\n\n    if (canSetImmediate) {\n        return function (f) { return window.setImmediate(f) };\n    }\n\n    if (canPost) {\n        var queue = [];\n        window.addEventListener('message', function (ev) {\n            var source = ev.source;\n            if ((source === window || source === null) && ev.data === 'process-tick') {\n                ev.stopPropagation();\n                if (queue.length > 0) {\n                    var fn = queue.shift();\n                    fn();\n                }\n            }\n        }, true);\n\n        return function nextTick(fn) {\n            queue.push(fn);\n            window.postMessage('process-tick', '*');\n        };\n    }\n\n    return function nextTick(fn) {\n        setTimeout(fn, 0);\n    };\n})();\n\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n}\n\n// TODO(shtylman)\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\n","(function (global){\n/*! http://mths.be/punycode v1.2.4 by @mathias */\n;(function(root) {\n\n\t/** Detect free variables */\n\tvar freeExports = typeof exports == 'object' && exports;\n\tvar freeModule = typeof module == 'object' && module &&\n\t\tmodule.exports == freeExports && module;\n\tvar freeGlobal = typeof global == 'object' && global;\n\tif (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal) {\n\t\troot = freeGlobal;\n\t}\n\n\t/**\n\t * The `punycode` object.\n\t * @name punycode\n\t * @type Object\n\t */\n\tvar punycode,\n\n\t/** Highest positive signed 32-bit float value */\n\tmaxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1\n\n\t/** Bootstring parameters */\n\tbase = 36,\n\ttMin = 1,\n\ttMax = 26,\n\tskew = 38,\n\tdamp = 700,\n\tinitialBias = 72,\n\tinitialN = 128, // 0x80\n\tdelimiter = '-', // '\\x2D'\n\n\t/** Regular expressions */\n\tregexPunycode = /^xn--/,\n\tregexNonASCII = /[^ -~]/, // unprintable ASCII chars + non-ASCII chars\n\tregexSeparators = /\\x2E|\\u3002|\\uFF0E|\\uFF61/g, // RFC 3490 separators\n\n\t/** Error messages */\n\terrors = {\n\t\t'overflow': 'Overflow: input needs wider integers to process',\n\t\t'not-basic': 'Illegal input >= 0x80 (not a basic code point)',\n\t\t'invalid-input': 'Invalid input'\n\t},\n\n\t/** Convenience shortcuts */\n\tbaseMinusTMin = base - tMin,\n\tfloor = Math.floor,\n\tstringFromCharCode = String.fromCharCode,\n\n\t/** Temporary variable */\n\tkey;\n\n\t/*--------------------------------------------------------------------------*/\n\n\t/**\n\t * A generic error utility function.\n\t * @private\n\t * @param {String} type The error type.\n\t * @returns {Error} Throws a `RangeError` with the applicable error message.\n\t */\n\tfunction error(type) {\n\t\tthrow RangeError(errors[type]);\n\t}\n\n\t/**\n\t * A generic `Array#map` utility function.\n\t * @private\n\t * @param {Array} array The array to iterate over.\n\t * @param {Function} callback The function that gets called for every array\n\t * item.\n\t * @returns {Array} A new array of values returned by the callback function.\n\t */\n\tfunction map(array, fn) {\n\t\tvar length = array.length;\n\t\twhile (length--) {\n\t\t\tarray[length] = fn(array[length]);\n\t\t}\n\t\treturn array;\n\t}\n\n\t/**\n\t * A simple `Array#map`-like wrapper to work with domain name strings.\n\t * @private\n\t * @param {String} domain The domain name.\n\t * @param {Function} callback The function that gets called for every\n\t * character.\n\t * @returns {Array} A new string of characters returned by the callback\n\t * function.\n\t */\n\tfunction mapDomain(string, fn) {\n\t\treturn map(string.split(regexSeparators), fn).join('.');\n\t}\n\n\t/**\n\t * Creates an array containing the numeric code points of each Unicode\n\t * character in the string. While JavaScript uses UCS-2 internally,\n\t * this function will convert a pair of surrogate halves (each of which\n\t * UCS-2 exposes as separate characters) into a single code point,\n\t * matching UTF-16.\n\t * @see `punycode.ucs2.encode`\n\t * @see <http://mathiasbynens.be/notes/javascript-encoding>\n\t * @memberOf punycode.ucs2\n\t * @name decode\n\t * @param {String} string The Unicode input string (UCS-2).\n\t * @returns {Array} The new array of code points.\n\t */\n\tfunction ucs2decode(string) {\n\t\tvar output = [],\n\t\t    counter = 0,\n\t\t    length = string.length,\n\t\t    value,\n\t\t    extra;\n\t\twhile (counter < length) {\n\t\t\tvalue = string.charCodeAt(counter++);\n\t\t\tif (value >= 0xD800 && value <= 0xDBFF && counter < length) {\n\t\t\t\t// high surrogate, and there is a next character\n\t\t\t\textra = string.charCodeAt(counter++);\n\t\t\t\tif ((extra & 0xFC00) == 0xDC00) { // low surrogate\n\t\t\t\t\toutput.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);\n\t\t\t\t} else {\n\t\t\t\t\t// unmatched surrogate; only append this code unit, in case the next\n\t\t\t\t\t// code unit is the high surrogate of a surrogate pair\n\t\t\t\t\toutput.push(value);\n\t\t\t\t\tcounter--;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\toutput.push(value);\n\t\t\t}\n\t\t}\n\t\treturn output;\n\t}\n\n\t/**\n\t * Creates a string based on an array of numeric code points.\n\t * @see `punycode.ucs2.decode`\n\t * @memberOf punycode.ucs2\n\t * @name encode\n\t * @param {Array} codePoints The array of numeric code points.\n\t * @returns {String} The new Unicode string (UCS-2).\n\t */\n\tfunction ucs2encode(array) {\n\t\treturn map(array, function(value) {\n\t\t\tvar output = '';\n\t\t\tif (value > 0xFFFF) {\n\t\t\t\tvalue -= 0x10000;\n\t\t\t\toutput += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);\n\t\t\t\tvalue = 0xDC00 | value & 0x3FF;\n\t\t\t}\n\t\t\toutput += stringFromCharCode(value);\n\t\t\treturn output;\n\t\t}).join('');\n\t}\n\n\t/**\n\t * Converts a basic code point into a digit/integer.\n\t * @see `digitToBasic()`\n\t * @private\n\t * @param {Number} codePoint The basic numeric code point value.\n\t * @returns {Number} The numeric value of a basic code point (for use in\n\t * representing integers) in the range `0` to `base - 1`, or `base` if\n\t * the code point does not represent a value.\n\t */\n\tfunction basicToDigit(codePoint) {\n\t\tif (codePoint - 48 < 10) {\n\t\t\treturn codePoint - 22;\n\t\t}\n\t\tif (codePoint - 65 < 26) {\n\t\t\treturn codePoint - 65;\n\t\t}\n\t\tif (codePoint - 97 < 26) {\n\t\t\treturn codePoint - 97;\n\t\t}\n\t\treturn base;\n\t}\n\n\t/**\n\t * Converts a digit/integer into a basic code point.\n\t * @see `basicToDigit()`\n\t * @private\n\t * @param {Number} digit The numeric value of a basic code point.\n\t * @returns {Number} The basic code point whose value (when used for\n\t * representing integers) is `digit`, which needs to be in the range\n\t * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is\n\t * used; else, the lowercase form is used. The behavior is undefined\n\t * if `flag` is non-zero and `digit` has no uppercase form.\n\t */\n\tfunction digitToBasic(digit, flag) {\n\t\t//  0..25 map to ASCII a..z or A..Z\n\t\t// 26..35 map to ASCII 0..9\n\t\treturn digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);\n\t}\n\n\t/**\n\t * Bias adaptation function as per section 3.4 of RFC 3492.\n\t * http://tools.ietf.org/html/rfc3492#section-3.4\n\t * @private\n\t */\n\tfunction adapt(delta, numPoints, firstTime) {\n\t\tvar k = 0;\n\t\tdelta = firstTime ? floor(delta / damp) : delta >> 1;\n\t\tdelta += floor(delta / numPoints);\n\t\tfor (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {\n\t\t\tdelta = floor(delta / baseMinusTMin);\n\t\t}\n\t\treturn floor(k + (baseMinusTMin + 1) * delta / (delta + skew));\n\t}\n\n\t/**\n\t * Converts a Punycode string of ASCII-only symbols to a string of Unicode\n\t * symbols.\n\t * @memberOf punycode\n\t * @param {String} input The Punycode string of ASCII-only symbols.\n\t * @returns {String} The resulting string of Unicode symbols.\n\t */\n\tfunction decode(input) {\n\t\t// Don't use UCS-2\n\t\tvar output = [],\n\t\t    inputLength = input.length,\n\t\t    out,\n\t\t    i = 0,\n\t\t    n = initialN,\n\t\t    bias = initialBias,\n\t\t    basic,\n\t\t    j,\n\t\t    index,\n\t\t    oldi,\n\t\t    w,\n\t\t    k,\n\t\t    digit,\n\t\t    t,\n\t\t    /** Cached calculation results */\n\t\t    baseMinusT;\n\n\t\t// Handle the basic code points: let `basic` be the number of input code\n\t\t// points before the last delimiter, or `0` if there is none, then copy\n\t\t// the first basic code points to the output.\n\n\t\tbasic = input.lastIndexOf(delimiter);\n\t\tif (basic < 0) {\n\t\t\tbasic = 0;\n\t\t}\n\n\t\tfor (j = 0; j < basic; ++j) {\n\t\t\t// if it's not a basic code point\n\t\t\tif (input.charCodeAt(j) >= 0x80) {\n\t\t\t\terror('not-basic');\n\t\t\t}\n\t\t\toutput.push(input.charCodeAt(j));\n\t\t}\n\n\t\t// Main decoding loop: start just after the last delimiter if any basic code\n\t\t// points were copied; start at the beginning otherwise.\n\n\t\tfor (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {\n\n\t\t\t// `index` is the index of the next character to be consumed.\n\t\t\t// Decode a generalized variable-length integer into `delta`,\n\t\t\t// which gets added to `i`. The overflow checking is easier\n\t\t\t// if we increase `i` as we go, then subtract off its starting\n\t\t\t// value at the end to obtain `delta`.\n\t\t\tfor (oldi = i, w = 1, k = base; /* no condition */; k += base) {\n\n\t\t\t\tif (index >= inputLength) {\n\t\t\t\t\terror('invalid-input');\n\t\t\t\t}\n\n\t\t\t\tdigit = basicToDigit(input.charCodeAt(index++));\n\n\t\t\t\tif (digit >= base || digit > floor((maxInt - i) / w)) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\ti += digit * w;\n\t\t\t\tt = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\n\t\t\t\tif (digit < t) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tbaseMinusT = base - t;\n\t\t\t\tif (w > floor(maxInt / baseMinusT)) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\tw *= baseMinusT;\n\n\t\t\t}\n\n\t\t\tout = output.length + 1;\n\t\t\tbias = adapt(i - oldi, out, oldi == 0);\n\n\t\t\t// `i` was supposed to wrap around from `out` to `0`,\n\t\t\t// incrementing `n` each time, so we'll fix that now:\n\t\t\tif (floor(i / out) > maxInt - n) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\tn += floor(i / out);\n\t\t\ti %= out;\n\n\t\t\t// Insert `n` at position `i` of the output\n\t\t\toutput.splice(i++, 0, n);\n\n\t\t}\n\n\t\treturn ucs2encode(output);\n\t}\n\n\t/**\n\t * Converts a string of Unicode symbols to a Punycode string of ASCII-only\n\t * symbols.\n\t * @memberOf punycode\n\t * @param {String} input The string of Unicode symbols.\n\t * @returns {String} The resulting Punycode string of ASCII-only symbols.\n\t */\n\tfunction encode(input) {\n\t\tvar n,\n\t\t    delta,\n\t\t    handledCPCount,\n\t\t    basicLength,\n\t\t    bias,\n\t\t    j,\n\t\t    m,\n\t\t    q,\n\t\t    k,\n\t\t    t,\n\t\t    currentValue,\n\t\t    output = [],\n\t\t    /** `inputLength` will hold the number of code points in `input`. */\n\t\t    inputLength,\n\t\t    /** Cached calculation results */\n\t\t    handledCPCountPlusOne,\n\t\t    baseMinusT,\n\t\t    qMinusT;\n\n\t\t// Convert the input in UCS-2 to Unicode\n\t\tinput = ucs2decode(input);\n\n\t\t// Cache the length\n\t\tinputLength = input.length;\n\n\t\t// Initialize the state\n\t\tn = initialN;\n\t\tdelta = 0;\n\t\tbias = initialBias;\n\n\t\t// Handle the basic code points\n\t\tfor (j = 0; j < inputLength; ++j) {\n\t\t\tcurrentValue = input[j];\n\t\t\tif (currentValue < 0x80) {\n\t\t\t\toutput.push(stringFromCharCode(currentValue));\n\t\t\t}\n\t\t}\n\n\t\thandledCPCount = basicLength = output.length;\n\n\t\t// `handledCPCount` is the number of code points that have been handled;\n\t\t// `basicLength` is the number of basic code points.\n\n\t\t// Finish the basic string - if it is not empty - with a delimiter\n\t\tif (basicLength) {\n\t\t\toutput.push(delimiter);\n\t\t}\n\n\t\t// Main encoding loop:\n\t\twhile (handledCPCount < inputLength) {\n\n\t\t\t// All non-basic code points < n have been handled already. Find the next\n\t\t\t// larger one:\n\t\t\tfor (m = maxInt, j = 0; j < inputLength; ++j) {\n\t\t\t\tcurrentValue = input[j];\n\t\t\t\tif (currentValue >= n && currentValue < m) {\n\t\t\t\t\tm = currentValue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,\n\t\t\t// but guard against overflow\n\t\t\thandledCPCountPlusOne = handledCPCount + 1;\n\t\t\tif (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\tdelta += (m - n) * handledCPCountPlusOne;\n\t\t\tn = m;\n\n\t\t\tfor (j = 0; j < inputLength; ++j) {\n\t\t\t\tcurrentValue = input[j];\n\n\t\t\t\tif (currentValue < n && ++delta > maxInt) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\tif (currentValue == n) {\n\t\t\t\t\t// Represent delta as a generalized variable-length integer\n\t\t\t\t\tfor (q = delta, k = base; /* no condition */; k += base) {\n\t\t\t\t\t\tt = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\t\t\t\t\t\tif (q < t) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tqMinusT = q - t;\n\t\t\t\t\t\tbaseMinusT = base - t;\n\t\t\t\t\t\toutput.push(\n\t\t\t\t\t\t\tstringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))\n\t\t\t\t\t\t);\n\t\t\t\t\t\tq = floor(qMinusT / baseMinusT);\n\t\t\t\t\t}\n\n\t\t\t\t\toutput.push(stringFromCharCode(digitToBasic(q, 0)));\n\t\t\t\t\tbias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);\n\t\t\t\t\tdelta = 0;\n\t\t\t\t\t++handledCPCount;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t++delta;\n\t\t\t++n;\n\n\t\t}\n\t\treturn output.join('');\n\t}\n\n\t/**\n\t * Converts a Punycode string representing a domain name to Unicode. Only the\n\t * Punycoded parts of the domain name will be converted, i.e. it doesn't\n\t * matter if you call it on a string that has already been converted to\n\t * Unicode.\n\t * @memberOf punycode\n\t * @param {String} domain The Punycode domain name to convert to Unicode.\n\t * @returns {String} The Unicode representation of the given Punycode\n\t * string.\n\t */\n\tfunction toUnicode(domain) {\n\t\treturn mapDomain(domain, function(string) {\n\t\t\treturn regexPunycode.test(string)\n\t\t\t\t? decode(string.slice(4).toLowerCase())\n\t\t\t\t: string;\n\t\t});\n\t}\n\n\t/**\n\t * Converts a Unicode string representing a domain name to Punycode. Only the\n\t * non-ASCII parts of the domain name will be converted, i.e. it doesn't\n\t * matter if you call it with a domain that's already in ASCII.\n\t * @memberOf punycode\n\t * @param {String} domain The domain name to convert, as a Unicode string.\n\t * @returns {String} The Punycode representation of the given domain name.\n\t */\n\tfunction toASCII(domain) {\n\t\treturn mapDomain(domain, function(string) {\n\t\t\treturn regexNonASCII.test(string)\n\t\t\t\t? 'xn--' + encode(string)\n\t\t\t\t: string;\n\t\t});\n\t}\n\n\t/*--------------------------------------------------------------------------*/\n\n\t/** Define the public API */\n\tpunycode = {\n\t\t/**\n\t\t * A string representing the current Punycode.js version number.\n\t\t * @memberOf punycode\n\t\t * @type String\n\t\t */\n\t\t'version': '1.2.4',\n\t\t/**\n\t\t * An object of methods to convert from JavaScript's internal character\n\t\t * representation (UCS-2) to Unicode code points, and back.\n\t\t * @see <http://mathiasbynens.be/notes/javascript-encoding>\n\t\t * @memberOf punycode\n\t\t * @type Object\n\t\t */\n\t\t'ucs2': {\n\t\t\t'decode': ucs2decode,\n\t\t\t'encode': ucs2encode\n\t\t},\n\t\t'decode': decode,\n\t\t'encode': encode,\n\t\t'toASCII': toASCII,\n\t\t'toUnicode': toUnicode\n\t};\n\n\t/** Expose `punycode` */\n\t// Some AMD build optimizers, like r.js, check for specific condition patterns\n\t// like the following:\n\tif (\n\t\ttypeof define == 'function' &&\n\t\ttypeof define.amd == 'object' &&\n\t\tdefine.amd\n\t) {\n\t\tdefine('punycode', function() {\n\t\t\treturn punycode;\n\t\t});\n\t} else if (freeExports && !freeExports.nodeType) {\n\t\tif (freeModule) { // in Node.js or RingoJS v0.8.0+\n\t\t\tfreeModule.exports = punycode;\n\t\t} else { // in Narwhal or RingoJS v0.7.0-\n\t\t\tfor (key in punycode) {\n\t\t\t\tpunycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);\n\t\t\t}\n\t\t}\n\t} else { // in Rhino or a web browser\n\t\troot.punycode = punycode;\n\t}\n\n}(this));\n\n}).call(this,typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\n// If obj.hasOwnProperty has been overridden, then calling\n// obj.hasOwnProperty(prop) will break.\n// See: https://github.com/joyent/node/issues/1707\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\nmodule.exports = function(qs, sep, eq, options) {\n  sep = sep || '&';\n  eq = eq || '=';\n  var obj = {};\n\n  if (typeof qs !== 'string' || qs.length === 0) {\n    return obj;\n  }\n\n  var regexp = /\\+/g;\n  qs = qs.split(sep);\n\n  var maxKeys = 1000;\n  if (options && typeof options.maxKeys === 'number') {\n    maxKeys = options.maxKeys;\n  }\n\n  var len = qs.length;\n  // maxKeys <= 0 means that we should not limit keys count\n  if (maxKeys > 0 && len > maxKeys) {\n    len = maxKeys;\n  }\n\n  for (var i = 0; i < len; ++i) {\n    var x = qs[i].replace(regexp, '%20'),\n        idx = x.indexOf(eq),\n        kstr, vstr, k, v;\n\n    if (idx >= 0) {\n      kstr = x.substr(0, idx);\n      vstr = x.substr(idx + 1);\n    } else {\n      kstr = x;\n      vstr = '';\n    }\n\n    k = decodeURIComponent(kstr);\n    v = decodeURIComponent(vstr);\n\n    if (!hasOwnProperty(obj, k)) {\n      obj[k] = v;\n    } else if (isArray(obj[k])) {\n      obj[k].push(v);\n    } else {\n      obj[k] = [obj[k], v];\n    }\n  }\n\n  return obj;\n};\n\nvar isArray = Array.isArray || function (xs) {\n  return Object.prototype.toString.call(xs) === '[object Array]';\n};\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar stringifyPrimitive = function(v) {\n  switch (typeof v) {\n    case 'string':\n      return v;\n\n    case 'boolean':\n      return v ? 'true' : 'false';\n\n    case 'number':\n      return isFinite(v) ? v : '';\n\n    default:\n      return '';\n  }\n};\n\nmodule.exports = function(obj, sep, eq, name) {\n  sep = sep || '&';\n  eq = eq || '=';\n  if (obj === null) {\n    obj = undefined;\n  }\n\n  if (typeof obj === 'object') {\n    return map(objectKeys(obj), function(k) {\n      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;\n      if (isArray(obj[k])) {\n        return obj[k].map(function(v) {\n          return ks + encodeURIComponent(stringifyPrimitive(v));\n        }).join(sep);\n      } else {\n        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));\n      }\n    }).join(sep);\n\n  }\n\n  if (!name) return '';\n  return encodeURIComponent(stringifyPrimitive(name)) + eq +\n         encodeURIComponent(stringifyPrimitive(obj));\n};\n\nvar isArray = Array.isArray || function (xs) {\n  return Object.prototype.toString.call(xs) === '[object Array]';\n};\n\nfunction map (xs, f) {\n  if (xs.map) return xs.map(f);\n  var res = [];\n  for (var i = 0; i < xs.length; i++) {\n    res.push(f(xs[i], i));\n  }\n  return res;\n}\n\nvar objectKeys = Object.keys || function (obj) {\n  var res = [];\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);\n  }\n  return res;\n};\n","'use strict';\n\nexports.decode = exports.parse = require('./decode');\nexports.encode = exports.stringify = require('./encode');\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar punycode = require('punycode');\n\nexports.parse = urlParse;\nexports.resolve = urlResolve;\nexports.resolveObject = urlResolveObject;\nexports.format = urlFormat;\n\nexports.Url = Url;\n\nfunction Url() {\n  this.protocol = null;\n  this.slashes = null;\n  this.auth = null;\n  this.host = null;\n  this.port = null;\n  this.hostname = null;\n  this.hash = null;\n  this.search = null;\n  this.query = null;\n  this.pathname = null;\n  this.path = null;\n  this.href = null;\n}\n\n// Reference: RFC 3986, RFC 1808, RFC 2396\n\n// define these here so at least they only have to be\n// compiled once on the first module load.\nvar protocolPattern = /^([a-z0-9.+-]+:)/i,\n    portPattern = /:[0-9]*$/,\n\n    // RFC 2396: characters reserved for delimiting URLs.\n    // We actually just auto-escape these.\n    delims = ['<', '>', '\"', '`', ' ', '\\r', '\\n', '\\t'],\n\n    // RFC 2396: characters not allowed for various reasons.\n    unwise = ['{', '}', '|', '\\\\', '^', '`'].concat(delims),\n\n    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.\n    autoEscape = ['\\''].concat(unwise),\n    // Characters that are never ever allowed in a hostname.\n    // Note that any invalid chars are also handled, but these\n    // are the ones that are *expected* to be seen, so we fast-path\n    // them.\n    nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),\n    hostEndingChars = ['/', '?', '#'],\n    hostnameMaxLen = 255,\n    hostnamePartPattern = /^[a-z0-9A-Z_-]{0,63}$/,\n    hostnamePartStart = /^([a-z0-9A-Z_-]{0,63})(.*)$/,\n    // protocols that can allow \"unsafe\" and \"unwise\" chars.\n    unsafeProtocol = {\n      'javascript': true,\n      'javascript:': true\n    },\n    // protocols that never have a hostname.\n    hostlessProtocol = {\n      'javascript': true,\n      'javascript:': true\n    },\n    // protocols that always contain a // bit.\n    slashedProtocol = {\n      'http': true,\n      'https': true,\n      'ftp': true,\n      'gopher': true,\n      'file': true,\n      'http:': true,\n      'https:': true,\n      'ftp:': true,\n      'gopher:': true,\n      'file:': true\n    },\n    querystring = require('querystring');\n\nfunction urlParse(url, parseQueryString, slashesDenoteHost) {\n  if (url && isObject(url) && url instanceof Url) return url;\n\n  var u = new Url;\n  u.parse(url, parseQueryString, slashesDenoteHost);\n  return u;\n}\n\nUrl.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {\n  if (!isString(url)) {\n    throw new TypeError(\"Parameter 'url' must be a string, not \" + typeof url);\n  }\n\n  var rest = url;\n\n  // trim before proceeding.\n  // This is to support parse stuff like \"  http://foo.com  \\n\"\n  rest = rest.trim();\n\n  var proto = protocolPattern.exec(rest);\n  if (proto) {\n    proto = proto[0];\n    var lowerProto = proto.toLowerCase();\n    this.protocol = lowerProto;\n    rest = rest.substr(proto.length);\n  }\n\n  // figure out if it's got a host\n  // user@server is *always* interpreted as a hostname, and url\n  // resolution will treat //foo/bar as host=foo,path=bar because that's\n  // how the browser resolves relative URLs.\n  if (slashesDenoteHost || proto || rest.match(/^\\/\\/[^@\\/]+@[^@\\/]+/)) {\n    var slashes = rest.substr(0, 2) === '//';\n    if (slashes && !(proto && hostlessProtocol[proto])) {\n      rest = rest.substr(2);\n      this.slashes = true;\n    }\n  }\n\n  if (!hostlessProtocol[proto] &&\n      (slashes || (proto && !slashedProtocol[proto]))) {\n\n    // there's a hostname.\n    // the first instance of /, ?, ;, or # ends the host.\n    //\n    // If there is an @ in the hostname, then non-host chars *are* allowed\n    // to the left of the last @ sign, unless some host-ending character\n    // comes *before* the @-sign.\n    // URLs are obnoxious.\n    //\n    // ex:\n    // http://a@b@c/ => user:a@b host:c\n    // http://a@b?@c => user:a host:c path:/?@c\n\n    // v0.12 TODO(isaacs): This is not quite how Chrome does things.\n    // Review our test case against browsers more comprehensively.\n\n    // find the first instance of any hostEndingChars\n    var hostEnd = -1;\n    for (var i = 0; i < hostEndingChars.length; i++) {\n      var hec = rest.indexOf(hostEndingChars[i]);\n      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))\n        hostEnd = hec;\n    }\n\n    // at this point, either we have an explicit point where the\n    // auth portion cannot go past, or the last @ char is the decider.\n    var auth, atSign;\n    if (hostEnd === -1) {\n      // atSign can be anywhere.\n      atSign = rest.lastIndexOf('@');\n    } else {\n      // atSign must be in auth portion.\n      // http://a@b/c@d => host:b auth:a path:/c@d\n      atSign = rest.lastIndexOf('@', hostEnd);\n    }\n\n    // Now we have a portion which is definitely the auth.\n    // Pull that off.\n    if (atSign !== -1) {\n      auth = rest.slice(0, atSign);\n      rest = rest.slice(atSign + 1);\n      this.auth = decodeURIComponent(auth);\n    }\n\n    // the host is the remaining to the left of the first non-host char\n    hostEnd = -1;\n    for (var i = 0; i < nonHostChars.length; i++) {\n      var hec = rest.indexOf(nonHostChars[i]);\n      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))\n        hostEnd = hec;\n    }\n    // if we still have not hit it, then the entire thing is a host.\n    if (hostEnd === -1)\n      hostEnd = rest.length;\n\n    this.host = rest.slice(0, hostEnd);\n    rest = rest.slice(hostEnd);\n\n    // pull out port.\n    this.parseHost();\n\n    // we've indicated that there is a hostname,\n    // so even if it's empty, it has to be present.\n    this.hostname = this.hostname || '';\n\n    // if hostname begins with [ and ends with ]\n    // assume that it's an IPv6 address.\n    var ipv6Hostname = this.hostname[0] === '[' &&\n        this.hostname[this.hostname.length - 1] === ']';\n\n    // validate a little.\n    if (!ipv6Hostname) {\n      var hostparts = this.hostname.split(/\\./);\n      for (var i = 0, l = hostparts.length; i < l; i++) {\n        var part = hostparts[i];\n        if (!part) continue;\n        if (!part.match(hostnamePartPattern)) {\n          var newpart = '';\n          for (var j = 0, k = part.length; j < k; j++) {\n            if (part.charCodeAt(j) > 127) {\n              // we replace non-ASCII char with a temporary placeholder\n              // we need this to make sure size of hostname is not\n              // broken by replacing non-ASCII by nothing\n              newpart += 'x';\n            } else {\n              newpart += part[j];\n            }\n          }\n          // we test again with ASCII char only\n          if (!newpart.match(hostnamePartPattern)) {\n            var validParts = hostparts.slice(0, i);\n            var notHost = hostparts.slice(i + 1);\n            var bit = part.match(hostnamePartStart);\n            if (bit) {\n              validParts.push(bit[1]);\n              notHost.unshift(bit[2]);\n            }\n            if (notHost.length) {\n              rest = '/' + notHost.join('.') + rest;\n            }\n            this.hostname = validParts.join('.');\n            break;\n          }\n        }\n      }\n    }\n\n    if (this.hostname.length > hostnameMaxLen) {\n      this.hostname = '';\n    } else {\n      // hostnames are always lower case.\n      this.hostname = this.hostname.toLowerCase();\n    }\n\n    if (!ipv6Hostname) {\n      // IDNA Support: Returns a puny coded representation of \"domain\".\n      // It only converts the part of the domain name that\n      // has non ASCII characters. I.e. it dosent matter if\n      // you call it with a domain that already is in ASCII.\n      var domainArray = this.hostname.split('.');\n      var newOut = [];\n      for (var i = 0; i < domainArray.length; ++i) {\n        var s = domainArray[i];\n        newOut.push(s.match(/[^A-Za-z0-9_-]/) ?\n            'xn--' + punycode.encode(s) : s);\n      }\n      this.hostname = newOut.join('.');\n    }\n\n    var p = this.port ? ':' + this.port : '';\n    var h = this.hostname || '';\n    this.host = h + p;\n    this.href += this.host;\n\n    // strip [ and ] from the hostname\n    // the host field still retains them, though\n    if (ipv6Hostname) {\n      this.hostname = this.hostname.substr(1, this.hostname.length - 2);\n      if (rest[0] !== '/') {\n        rest = '/' + rest;\n      }\n    }\n  }\n\n  // now rest is set to the post-host stuff.\n  // chop off any delim chars.\n  if (!unsafeProtocol[lowerProto]) {\n\n    // First, make 100% sure that any \"autoEscape\" chars get\n    // escaped, even if encodeURIComponent doesn't think they\n    // need to be.\n    for (var i = 0, l = autoEscape.length; i < l; i++) {\n      var ae = autoEscape[i];\n      var esc = encodeURIComponent(ae);\n      if (esc === ae) {\n        esc = escape(ae);\n      }\n      rest = rest.split(ae).join(esc);\n    }\n  }\n\n\n  // chop off from the tail first.\n  var hash = rest.indexOf('#');\n  if (hash !== -1) {\n    // got a fragment string.\n    this.hash = rest.substr(hash);\n    rest = rest.slice(0, hash);\n  }\n  var qm = rest.indexOf('?');\n  if (qm !== -1) {\n    this.search = rest.substr(qm);\n    this.query = rest.substr(qm + 1);\n    if (parseQueryString) {\n      this.query = querystring.parse(this.query);\n    }\n    rest = rest.slice(0, qm);\n  } else if (parseQueryString) {\n    // no query string, but parseQueryString still requested\n    this.search = '';\n    this.query = {};\n  }\n  if (rest) this.pathname = rest;\n  if (slashedProtocol[lowerProto] &&\n      this.hostname && !this.pathname) {\n    this.pathname = '/';\n  }\n\n  //to support http.request\n  if (this.pathname || this.search) {\n    var p = this.pathname || '';\n    var s = this.search || '';\n    this.path = p + s;\n  }\n\n  // finally, reconstruct the href based on what has been validated.\n  this.href = this.format();\n  return this;\n};\n\n// format a parsed object into a url string\nfunction urlFormat(obj) {\n  // ensure it's an object, and not a string url.\n  // If it's an obj, this is a no-op.\n  // this way, you can call url_format() on strings\n  // to clean up potentially wonky urls.\n  if (isString(obj)) obj = urlParse(obj);\n  if (!(obj instanceof Url)) return Url.prototype.format.call(obj);\n  return obj.format();\n}\n\nUrl.prototype.format = function() {\n  var auth = this.auth || '';\n  if (auth) {\n    auth = encodeURIComponent(auth);\n    auth = auth.replace(/%3A/i, ':');\n    auth += '@';\n  }\n\n  var protocol = this.protocol || '',\n      pathname = this.pathname || '',\n      hash = this.hash || '',\n      host = false,\n      query = '';\n\n  if (this.host) {\n    host = auth + this.host;\n  } else if (this.hostname) {\n    host = auth + (this.hostname.indexOf(':') === -1 ?\n        this.hostname :\n        '[' + this.hostname + ']');\n    if (this.port) {\n      host += ':' + this.port;\n    }\n  }\n\n  if (this.query &&\n      isObject(this.query) &&\n      Object.keys(this.query).length) {\n    query = querystring.stringify(this.query);\n  }\n\n  var search = this.search || (query && ('?' + query)) || '';\n\n  if (protocol && protocol.substr(-1) !== ':') protocol += ':';\n\n  // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.\n  // unless they had them to begin with.\n  if (this.slashes ||\n      (!protocol || slashedProtocol[protocol]) && host !== false) {\n    host = '//' + (host || '');\n    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;\n  } else if (!host) {\n    host = '';\n  }\n\n  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;\n  if (search && search.charAt(0) !== '?') search = '?' + search;\n\n  pathname = pathname.replace(/[?#]/g, function(match) {\n    return encodeURIComponent(match);\n  });\n  search = search.replace('#', '%23');\n\n  return protocol + host + pathname + search + hash;\n};\n\nfunction urlResolve(source, relative) {\n  return urlParse(source, false, true).resolve(relative);\n}\n\nUrl.prototype.resolve = function(relative) {\n  return this.resolveObject(urlParse(relative, false, true)).format();\n};\n\nfunction urlResolveObject(source, relative) {\n  if (!source) return relative;\n  return urlParse(source, false, true).resolveObject(relative);\n}\n\nUrl.prototype.resolveObject = function(relative) {\n  if (isString(relative)) {\n    var rel = new Url();\n    rel.parse(relative, false, true);\n    relative = rel;\n  }\n\n  var result = new Url();\n  Object.keys(this).forEach(function(k) {\n    result[k] = this[k];\n  }, this);\n\n  // hash is always overridden, no matter what.\n  // even href=\"\" will remove it.\n  result.hash = relative.hash;\n\n  // if the relative url is empty, then there's nothing left to do here.\n  if (relative.href === '') {\n    result.href = result.format();\n    return result;\n  }\n\n  // hrefs like //foo/bar always cut to the protocol.\n  if (relative.slashes && !relative.protocol) {\n    // take everything except the protocol from relative\n    Object.keys(relative).forEach(function(k) {\n      if (k !== 'protocol')\n        result[k] = relative[k];\n    });\n\n    //urlParse appends trailing / to urls like http://www.example.com\n    if (slashedProtocol[result.protocol] &&\n        result.hostname && !result.pathname) {\n      result.path = result.pathname = '/';\n    }\n\n    result.href = result.format();\n    return result;\n  }\n\n  if (relative.protocol && relative.protocol !== result.protocol) {\n    // if it's a known url protocol, then changing\n    // the protocol does weird things\n    // first, if it's not file:, then we MUST have a host,\n    // and if there was a path\n    // to begin with, then we MUST have a path.\n    // if it is file:, then the host is dropped,\n    // because that's known to be hostless.\n    // anything else is assumed to be absolute.\n    if (!slashedProtocol[relative.protocol]) {\n      Object.keys(relative).forEach(function(k) {\n        result[k] = relative[k];\n      });\n      result.href = result.format();\n      return result;\n    }\n\n    result.protocol = relative.protocol;\n    if (!relative.host && !hostlessProtocol[relative.protocol]) {\n      var relPath = (relative.pathname || '').split('/');\n      while (relPath.length && !(relative.host = relPath.shift()));\n      if (!relative.host) relative.host = '';\n      if (!relative.hostname) relative.hostname = '';\n      if (relPath[0] !== '') relPath.unshift('');\n      if (relPath.length < 2) relPath.unshift('');\n      result.pathname = relPath.join('/');\n    } else {\n      result.pathname = relative.pathname;\n    }\n    result.search = relative.search;\n    result.query = relative.query;\n    result.host = relative.host || '';\n    result.auth = relative.auth;\n    result.hostname = relative.hostname || relative.host;\n    result.port = relative.port;\n    // to support http.request\n    if (result.pathname || result.search) {\n      var p = result.pathname || '';\n      var s = result.search || '';\n      result.path = p + s;\n    }\n    result.slashes = result.slashes || relative.slashes;\n    result.href = result.format();\n    return result;\n  }\n\n  var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),\n      isRelAbs = (\n          relative.host ||\n          relative.pathname && relative.pathname.charAt(0) === '/'\n      ),\n      mustEndAbs = (isRelAbs || isSourceAbs ||\n                    (result.host && relative.pathname)),\n      removeAllDots = mustEndAbs,\n      srcPath = result.pathname && result.pathname.split('/') || [],\n      relPath = relative.pathname && relative.pathname.split('/') || [],\n      psychotic = result.protocol && !slashedProtocol[result.protocol];\n\n  // if the url is a non-slashed url, then relative\n  // links like ../.. should be able\n  // to crawl up to the hostname, as well.  This is strange.\n  // result.protocol has already been set by now.\n  // Later on, put the first path part into the host field.\n  if (psychotic) {\n    result.hostname = '';\n    result.port = null;\n    if (result.host) {\n      if (srcPath[0] === '') srcPath[0] = result.host;\n      else srcPath.unshift(result.host);\n    }\n    result.host = '';\n    if (relative.protocol) {\n      relative.hostname = null;\n      relative.port = null;\n      if (relative.host) {\n        if (relPath[0] === '') relPath[0] = relative.host;\n        else relPath.unshift(relative.host);\n      }\n      relative.host = null;\n    }\n    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');\n  }\n\n  if (isRelAbs) {\n    // it's absolute.\n    result.host = (relative.host || relative.host === '') ?\n                  relative.host : result.host;\n    result.hostname = (relative.hostname || relative.hostname === '') ?\n                      relative.hostname : result.hostname;\n    result.search = relative.search;\n    result.query = relative.query;\n    srcPath = relPath;\n    // fall through to the dot-handling below.\n  } else if (relPath.length) {\n    // it's relative\n    // throw away the existing file, and take the new path instead.\n    if (!srcPath) srcPath = [];\n    srcPath.pop();\n    srcPath = srcPath.concat(relPath);\n    result.search = relative.search;\n    result.query = relative.query;\n  } else if (!isNullOrUndefined(relative.search)) {\n    // just pull out the search.\n    // like href='?foo'.\n    // Put this after the other two cases because it simplifies the booleans\n    if (psychotic) {\n      result.hostname = result.host = srcPath.shift();\n      //occationaly the auth can get stuck only in host\n      //this especialy happens in cases like\n      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')\n      var authInHost = result.host && result.host.indexOf('@') > 0 ?\n                       result.host.split('@') : false;\n      if (authInHost) {\n        result.auth = authInHost.shift();\n        result.host = result.hostname = authInHost.shift();\n      }\n    }\n    result.search = relative.search;\n    result.query = relative.query;\n    //to support http.request\n    if (!isNull(result.pathname) || !isNull(result.search)) {\n      result.path = (result.pathname ? result.pathname : '') +\n                    (result.search ? result.search : '');\n    }\n    result.href = result.format();\n    return result;\n  }\n\n  if (!srcPath.length) {\n    // no path at all.  easy.\n    // we've already handled the other stuff above.\n    result.pathname = null;\n    //to support http.request\n    if (result.search) {\n      result.path = '/' + result.search;\n    } else {\n      result.path = null;\n    }\n    result.href = result.format();\n    return result;\n  }\n\n  // if a url ENDs in . or .., then it must get a trailing slash.\n  // however, if it ends in anything else non-slashy,\n  // then it must NOT get a trailing slash.\n  var last = srcPath.slice(-1)[0];\n  var hasTrailingSlash = (\n      (result.host || relative.host) && (last === '.' || last === '..') ||\n      last === '');\n\n  // strip single dots, resolve double dots to parent dir\n  // if the path tries to go above the root, `up` ends up > 0\n  var up = 0;\n  for (var i = srcPath.length; i >= 0; i--) {\n    last = srcPath[i];\n    if (last == '.') {\n      srcPath.splice(i, 1);\n    } else if (last === '..') {\n      srcPath.splice(i, 1);\n      up++;\n    } else if (up) {\n      srcPath.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (!mustEndAbs && !removeAllDots) {\n    for (; up--; up) {\n      srcPath.unshift('..');\n    }\n  }\n\n  if (mustEndAbs && srcPath[0] !== '' &&\n      (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {\n    srcPath.unshift('');\n  }\n\n  if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {\n    srcPath.push('');\n  }\n\n  var isAbsolute = srcPath[0] === '' ||\n      (srcPath[0] && srcPath[0].charAt(0) === '/');\n\n  // put the host back\n  if (psychotic) {\n    result.hostname = result.host = isAbsolute ? '' :\n                                    srcPath.length ? srcPath.shift() : '';\n    //occationaly the auth can get stuck only in host\n    //this especialy happens in cases like\n    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')\n    var authInHost = result.host && result.host.indexOf('@') > 0 ?\n                     result.host.split('@') : false;\n    if (authInHost) {\n      result.auth = authInHost.shift();\n      result.host = result.hostname = authInHost.shift();\n    }\n  }\n\n  mustEndAbs = mustEndAbs || (result.host && srcPath.length);\n\n  if (mustEndAbs && !isAbsolute) {\n    srcPath.unshift('');\n  }\n\n  if (!srcPath.length) {\n    result.pathname = null;\n    result.path = null;\n  } else {\n    result.pathname = srcPath.join('/');\n  }\n\n  //to support request.http\n  if (!isNull(result.pathname) || !isNull(result.search)) {\n    result.path = (result.pathname ? result.pathname : '') +\n                  (result.search ? result.search : '');\n  }\n  result.auth = relative.auth || result.auth;\n  result.slashes = result.slashes || relative.slashes;\n  result.href = result.format();\n  return result;\n};\n\nUrl.prototype.parseHost = function() {\n  var host = this.host;\n  var port = portPattern.exec(host);\n  if (port) {\n    port = port[0];\n    if (port !== ':') {\n      this.port = port.substr(1);\n    }\n    host = host.substr(0, host.length - port.length);\n  }\n  if (host) this.hostname = host;\n};\n\nfunction isString(arg) {\n  return typeof arg === \"string\";\n}\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\n\nfunction isNull(arg) {\n  return arg === null;\n}\nfunction isNullOrUndefined(arg) {\n  return  arg == null;\n}\n","var racer = require('racer');\n//var BCSocket = require('browserchannel/dist/bcsocket-uncompressed').BCSocket;\n\nvar CLIENT_OPTIONS =JSON.parse('{\"base\":\"/channel\",\"reconnect\":true}');\n\nfunction TransportWrapper(options) {\n  var self = this;\n\n  self.messageQueue = [];\n  self.connectedOnce = false;\n\n  var protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\n\n  self.url = protocol + '//' + window.location.host + CLIENT_OPTIONS.base;\n\n  function createWebSocket () {\n    self.type = 'websocket';\n\n    self.socket = new WebSocket(self.url);\n\n    self.socket.onmessage = function(message) {\n      message.data = JSON.parse(message.data);\n      self.onmessage && self.onmessage(message);\n    }\n\n    self.socket.onopen = function(event) {\n      self.connectedOnce = true;\n\n      self._flushQueue();\n      self.onopen && self.onopen(event);\n    }\n\n    self.socket.onclose = function(event) {\n      console.log('WebSocket: connection is broken', event);\n      self.onclose && self.onclose(event);\n\n      if (!self.connectedOnce) {\n        return createBrowserChannel();\n      }\n\n      if (options.reconnect) {\n        setTimeout(function () {\n          createWebSocket();\n        }, options.timeout || 10000);\n      }\n    }\n  }\n\n  function createBrowserChannel () {\n    self.type = 'browserchannel';\n    self.socket = BCSocket(options.base, options);\n\n    self.socket.onmessage = function(data) {\n      self.onmessage && self.onmessage(data);\n    }\n\n    self.socket.onopen = function(event) {\n      self.onopen && self.onopen(event);\n    }\n\n    self.socket.onclose = function(event) {\n      self.onclose && self.onclose(event);\n    }\n  }\n\n  // The condition is from Modernizr\n  // https://github.com/Modernizr/Modernizr/blob/master/feature-detects/websockets.js#L28\n  if ('WebSocket' in window && window.WebSocket.CLOSING === 2) {\n    createWebSocket();\n  } else {\n    createBrowserChannel();\n  }\n}\n\nTransportWrapper.prototype._flushQueue = function(){\n  while (this.messageQueue.length !== 0) {\n    var data = this.messageQueue.shift();\n    this._send(data);\n  }\n}\n\nTransportWrapper.prototype._send = function(data){\n  if (this.type === 'websocket' && (typeof data !== 'string')) data = JSON.stringify(data);\n\n  this.socket.send(data);\n}\n\nTransportWrapper.prototype.send = function(data){\n  if (this.type === 'websocket') {\n    if (this.socket.readyState === WebSocket.OPEN && this.messageQueue.length === 0) {\n      this._send(data);\n    } else {\n      this.messageQueue.push(data);\n    }\n  } else {\n    this._send(data);\n  }\n}\n\nTransportWrapper.prototype.close = function(){\n  this.socket.close()\n}\n\n// Meybe need to use reconnection timing algorithm from\n// http://blog.johnryding.com/post/78544969349/how-to-reconnect-web-sockets-in-a-realtime-web-app\n\nracer.Model.prototype._createSocket = function(bundle) {\n  return new TransportWrapper(CLIENT_OPTIONS);\n};\n","var EventEmitter = require('events').EventEmitter;\r\nvar util = require('./util');\r\n\r\nmodule.exports = Channel;\r\n\r\nfunction Channel(socket) {\r\n  EventEmitter.call(this);\r\n\r\n  this.socket = socket;\r\n  this.messages = new Messages();\r\n\r\n  var channel = this;\r\n  var onmessage = socket.onmessage;\r\n  socket.onmessage = function(message) {\r\n    var data = message.data;\r\n    if (typeof data === 'string') data = JSON.parse(data);\r\n    \r\n    if (data && data.racer) return channel._onMessage(data);\r\n    onmessage && onmessage.call(socket, message);\r\n  };\r\n}\r\n\r\nutil.mergeInto(Channel.prototype, EventEmitter.prototype);\r\n\r\nChannel.prototype.send = function(name, data, cb) {\r\n  var message = this.messages.add(name, data, cb);\r\n  // Proactively call the toJSON function, since the Google Closure JSON\r\n  // serializer doesn't check for it\r\n  this.socket.send(message.toJSON());\r\n};\r\n\r\nChannel.prototype._reply = function(id, name, data) {\r\n  var message = new Message(id, true, name, data);\r\n  this.socket.send(message.toJSON());\r\n};\r\n\r\nChannel.prototype._onMessage = function(data) {\r\n  if (data.ack) {\r\n    var message = this.messages.remove(data.id);\r\n    if (message && message.cb) message.cb.apply(null, data.data);\r\n    return;\r\n  }\r\n  var name = data.racer;\r\n  if (data.cb) {\r\n    var channel = this;\r\n    var hasListeners = this.emit(name, data.data, function() {\r\n      var args = Array.prototype.slice.call(arguments);\r\n      channel._reply(data.id, name, args);\r\n    });\r\n    if (!hasListeners) this._reply(data.id, name);\r\n  } else {\r\n    this.emit(name, data.data);\r\n    this._reply(data.id, name);\r\n  }\r\n};\r\n\r\nfunction MessagesMap() {}\r\n\r\nfunction Messages() {\r\n  this.map = new MessagesMap();\r\n  this.idCount = 0;\r\n}\r\nMessages.prototype.id = function() {\r\n  return (++this.idCount).toString(36);\r\n};\r\nMessages.prototype.add = function(name, data, cb) {\r\n  var message = new Message(this.id(), false, name, data, cb);\r\n  this.map[message.id] = message;\r\n  return message;\r\n};\r\nMessages.prototype.remove = function(id) {\r\n  var message = this.map[id];\r\n  delete this.map[id];\r\n  return message;\r\n};\r\n\r\nfunction Message(id, ack, name, data, cb) {\r\n  this.id = id;\r\n  this.ack = ack;\r\n  this.name = name;\r\n  this.data = data;\r\n  this.cb = cb;\r\n}\r\nMessage.prototype.toJSON = function() {\r\n  return {\r\n    racer: this.name\r\n  , id: this.id\r\n  , data: this.data\r\n  , ack: +this.ack\r\n  , cb: (this.cb) ? 1 : 0\r\n  };\r\n};\r\n","module.exports = Doc;\r\n\r\nfunction Doc(model, collectionName, id) {\r\n  this.collectionName = collectionName;\r\n  this.id = id;\r\n  this.collectionData = model && model.data[collectionName];\r\n}\r\n\r\nDoc.prototype.path = function(segments) {\r\n  return this.collectionName + '.' + this.id + '.' + segments.join('.');\r\n};\r\n\r\nDoc.prototype._errorMessage = function(description, segments, value) {\r\n  return description + ' at ' + this.path(segments) + ': ' +\r\n    JSON.stringify(value, null, 2);\r\n};\r\n","var Doc = require('./Doc');\r\nvar util = require('../util');\r\n\r\nmodule.exports = LocalDoc;\r\n\r\nfunction LocalDoc(model, collectionName, id, snapshot) {\r\n  Doc.call(this, model, collectionName, id);\r\n  this.snapshot = snapshot;\r\n  this._updateCollectionData();\r\n}\r\n\r\nLocalDoc.prototype = new Doc();\r\n\r\nLocalDoc.prototype._updateCollectionData = function() {\r\n  this.collectionData[this.id] = this.snapshot;\r\n};\r\n\r\nLocalDoc.prototype.set = function(segments, value, cb) {\r\n  function set(node, key) {\r\n    var previous = node[key];\r\n    node[key] = value;\r\n    return previous;\r\n  }\r\n  return this._apply(segments, set, cb);\r\n};\r\n\r\nLocalDoc.prototype.del = function(segments, cb) {\r\n  // Don't do anything if the value is already undefined, since\r\n  // apply creates objects as it traverses, and the del method\r\n  // should not create anything\r\n  var previous = this.get(segments);\r\n  if (previous === void 0) {\r\n    cb();\r\n    return;\r\n  }\r\n  function del(node, key) {\r\n    delete node[key];\r\n    return previous;\r\n  }\r\n  return this._apply(segments, del, cb);\r\n};\r\n\r\nLocalDoc.prototype.increment = function(segments, byNumber, cb) {\r\n  var self = this;\r\n  function validate(value) {\r\n    if (typeof value === 'number' || value == null) return;\r\n    return new TypeError(self._errorMessage(\r\n      'increment on non-number', segments, value\r\n    ));\r\n  }\r\n  function increment(node, key) {\r\n    var value = (node[key] || 0) + byNumber;\r\n    node[key] = value;\r\n    return value;\r\n  }\r\n  return this._validatedApply(segments, validate, increment, cb);\r\n};\r\n\r\nLocalDoc.prototype.push = function(segments, value, cb) {\r\n  function push(arr) {\r\n    return arr.push(value);\r\n  }\r\n  return this._arrayApply(segments, push, cb);\r\n};\r\n\r\nLocalDoc.prototype.unshift = function(segments, value, cb) {\r\n  function unshift(arr) {\r\n    return arr.unshift(value);\r\n  }\r\n  return this._arrayApply(segments, unshift, cb);\r\n};\r\n\r\nLocalDoc.prototype.insert = function(segments, index, values, cb) {\r\n  function insert(arr) {\r\n    arr.splice.apply(arr, [index, 0].concat(values));\r\n    return arr.length;\r\n  }\r\n  return this._arrayApply(segments, insert, cb);\r\n};\r\n\r\nLocalDoc.prototype.pop = function(segments, cb) {\r\n  function pop(arr) {\r\n    return arr.pop();\r\n  }\r\n  return this._arrayApply(segments, pop, cb);\r\n};\r\n\r\nLocalDoc.prototype.shift = function(segments, cb) {\r\n  function shift(arr) {\r\n    return arr.shift();\r\n  }\r\n  return this._arrayApply(segments, shift, cb);\r\n};\r\n\r\nLocalDoc.prototype.remove = function(segments, index, howMany, cb) {\r\n  function remove(arr) {\r\n    return arr.splice(index, howMany);\r\n  }\r\n  return this._arrayApply(segments, remove, cb);\r\n};\r\n\r\nLocalDoc.prototype.move = function(segments, from, to, howMany, cb) {\r\n  function move(arr) {\r\n    // Remove from old location\r\n    var values = arr.splice(from, howMany);\r\n    // Insert in new location\r\n    arr.splice.apply(arr, [to, 0].concat(values));\r\n    return values;\r\n  }\r\n  return this._arrayApply(segments, move, cb);\r\n};\r\n\r\nLocalDoc.prototype.stringInsert = function(segments, index, value, cb) {\r\n  var self = this;\r\n  function validate(value) {\r\n    if (typeof value === 'string' || value == null) return;\r\n    return new TypeError(self._errorMessage(\r\n      'stringInsert on non-string', segments, value\r\n    ));\r\n  }\r\n  function stringInsert(node, key) {\r\n    var previous = node[key];\r\n    if (previous == null) {\r\n      node[key] = value;\r\n      return previous;\r\n    }\r\n    node[key] = previous.slice(0, index) + value + previous.slice(index);\r\n    return previous;\r\n  }\r\n  return this._validatedApply(segments, validate, stringInsert, cb);\r\n};\r\n\r\nLocalDoc.prototype.stringRemove = function(segments, index, howMany, cb) {\r\n  var self = this;\r\n  function validate(value) {\r\n    if (typeof value === 'string' || value == null) return;\r\n    return new TypeError(self._errorMessage(\r\n      'stringRemove on non-string', segments, value\r\n    ));\r\n  }\r\n  function stringRemove(node, key) {\r\n    var previous = node[key];\r\n    if (previous == null) return previous;\r\n    if (index < 0) index += previous.length;\r\n    node[key] = previous.slice(0, index) + previous.slice(index + howMany);\r\n    return previous;\r\n  }\r\n  return this._validatedApply(segments, validate, stringRemove, cb);\r\n};\r\n\r\nLocalDoc.prototype.get = function(segments) {\r\n  return util.lookup(segments, this.snapshot);\r\n};\r\n\r\n/**\r\n * @param {Array} segments is the array representing a path\r\n * @param {Function} fn(node, key) applies a mutation on node[key]\r\n * @return {Object} returns the return value of fn(node, key)\r\n */\r\nLocalDoc.prototype._createImplied = function(segments, fn) {\r\n  var node = this;\r\n  var key = 'snapshot';\r\n  var i = 0;\r\n  var nextKey = segments[i++];\r\n  while (nextKey != null) {\r\n    // Get or create implied object or array\r\n    node = node[key] || (node[key] = /^\\d+$/.test(nextKey) ? [] : {});\r\n    key = nextKey;\r\n    nextKey = segments[i++];\r\n  }\r\n  return fn(node, key);\r\n};\r\n\r\nLocalDoc.prototype._apply = function(segments, fn, cb) {\r\n  var out = this._createImplied(segments, fn);\r\n  this._updateCollectionData();\r\n  cb();\r\n  return out;\r\n};\r\n\r\nLocalDoc.prototype._validatedApply = function(segments, validate, fn, cb) {\r\n  var out = this._createImplied(segments, function(node, key) {\r\n    var err = validate(node[key]);\r\n    if (err) return cb(err);\r\n    return fn(node, key);\r\n  });\r\n  this._updateCollectionData();\r\n  cb();\r\n  return out;\r\n};\r\n\r\nLocalDoc.prototype._arrayApply = function(segments, fn, cb) {\r\n  // Lookup a pointer to the property or nested property &\r\n  // return the current value or create a new array\r\n  var arr = this._createImplied(segments, nodeCreateArray);\r\n\r\n  if (!Array.isArray(arr)) {\r\n    var message = this._errorMessage(fn.name + ' on non-array', segments, arr);\r\n    var err = new TypeError(message);\r\n    return cb(err);\r\n  }\r\n  var out = fn(arr);\r\n  this._updateCollectionData();\r\n  cb();\r\n  return out;\r\n};\r\n\r\nfunction nodeCreateArray(node, key) {\r\n  return node[key] || (node[key] = []);\r\n}\r\n","var uuid = require('node-uuid');\r\n\r\nModel.INITS = [];\r\n\r\nmodule.exports = Model;\r\n\r\nfunction Model(options) {\r\n  this.root = this;\r\n\r\n  var inits = Model.INITS;\r\n  options || (options = {});\r\n  for (var i = 0; i < inits.length; i++) {\r\n    inits[i](this, options);\r\n  }\r\n}\r\n\r\nModel.prototype.id = function() {\r\n  return uuid.v4();\r\n};\r\n\r\nModel.prototype._child = function() {\r\n  return new ChildModel(this);\r\n};\r\n\r\nfunction ChildModel(model) {\r\n  // Shared properties should be accessed via the root. This makes inheritance\r\n  // cheap and easily extensible\r\n  this.root = model.root;\r\n\r\n  // EventEmitter methods access these properties directly, so they must be\r\n  // inherited manually instead of via the root\r\n  this._events = model._events;\r\n  this._maxListeners = model._maxListeners;\r\n\r\n  // Properties specific to a child instance\r\n  this._context = model._context;\r\n  this._at = model._at;\r\n  this._pass = model._pass;\r\n  this._silent = model._silent;\r\n  this._eventContext = model._eventContext;\r\n}\r\nChildModel.prototype = new Model();\r\n","(function (process){\nvar util = require('../util');\r\nvar Model = require('./Model');\r\nvar arrayDiff = require('arraydiff');\r\n\r\nmodule.exports = Query;\r\n\r\nModel.INITS.push(function(model) {\r\n  model.root._queries = new Queries();\r\n  if (model.root.fetchOnly) return;\r\n  model.on('all', function(segments) {\r\n    var map = model.root._queries.map;\r\n    for (var hash in map) {\r\n      var query = map[hash];\r\n      if (query.isPathQuery && query.shareQuery && util.mayImpact(query.expression, segments)) {\r\n        var ids = pathIds(model, query.expression);\r\n        var previousIds = model._get(query.idsSegments);\r\n        query._onChange(ids, previousIds);\r\n      }\r\n    }\r\n  });\r\n});\r\n\r\n/**\r\n * @param {String} collectionName\r\n * @param {Object} expression\r\n * @param {String} source\r\n * @return {Query}\r\n */\r\nModel.prototype.query = function(collectionName, expression, source) {\r\n  if (typeof expression.path === 'function' || typeof expression !== 'object') {\r\n    expression = this._splitPath(expression);\r\n  }\r\n  var query = this.root._queries.get(collectionName, expression, source);\r\n  if (query) return query;\r\n  query = new Query(this, collectionName, expression, source);\r\n  this.root._queries.add(query);\r\n  return query;\r\n};\r\n\r\n/**\r\n * Called during initialization of the bundle on page load.\r\n */\r\nModel.prototype._initQueries = function(items) {\r\n  var queries = this.root._queries;\r\n  for (var i = 0; i < items.length; i++) {\r\n    var item = items[i];\r\n    var counts = item[0];\r\n    var collectionName = item[1];\r\n    var expression = item[2];\r\n    var ids = item[3] || [];\r\n    var snapshots = item[4] || [];\r\n    var versions = item[5] || [];\r\n    var source = item[6];\r\n    var extra = item[7];\r\n    var query = new Query(this, collectionName, expression, source);\r\n    queries.add(query);\r\n\r\n    this._set(query.idsSegments, ids);\r\n    if (extra !== void 0) {\r\n      this._set(query.extraSegments, extra);\r\n    }\r\n\r\n    for (var j = 0; j < snapshots.length; j++) {\r\n      var snapshot = snapshots[j];\r\n      if (!snapshot) continue;\r\n      var id = ids[j];\r\n      var version = versions[j];\r\n      var data = {data: snapshot, v: version, type: 'json0'};\r\n      this.getOrCreateDoc(collectionName, id, data);\r\n      this._loadVersions[collectionName + '.' + id] = version;\r\n    }\r\n\r\n    for (var j = 0; j < counts.length; j++) {\r\n      var count = counts[j];\r\n      var subscribed = count[0] || 0;\r\n      var fetched = count[1] || 0;\r\n      var contextId = count[2];\r\n      if (contextId) query.model.setContext(contextId);\r\n      while (subscribed--) {\r\n        query.subscribe();\r\n      }\r\n      query.fetchCount += fetched;\r\n      while (fetched--) {\r\n        query.fetchIds.push(ids);\r\n        query.model._context.fetchQuery(query);\r\n        var alreadyLoaded = true;\r\n        for (var k = 0; k < ids.length; k++) {\r\n          query.model.fetchDoc(collectionName, ids[k], null, alreadyLoaded);\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nfunction QueriesMap() {}\r\n\r\nfunction Queries() {\r\n  this.map = new QueriesMap();\r\n}\r\nQueries.prototype.add = function(query) {\r\n  this.map[query.hash] = query;\r\n};\r\nQueries.prototype.remove = function(query) {\r\n  delete this.map[query.hash];\r\n};\r\nQueries.prototype.get = function(collectionName, expression, source) {\r\n  var hash = queryHash(collectionName, expression, source);\r\n  return this.map[hash];\r\n};\r\nQueries.prototype.toJSON = function() {\r\n  var out = [];\r\n  for (var hash in this.map) {\r\n    var query = this.map[hash];\r\n    if (query.subscribeCount || query.fetchCount) {\r\n      out.push(query.serialize());\r\n    }\r\n  }\r\n  return out;\r\n};\r\n\r\n/**\r\n * @private\r\n * @constructor\r\n * @param {Model} model\r\n * @param {Object} collectionName\r\n * @param {Object} expression\r\n * @param {String} source (e.g., 'solr')\r\n * @param {Number} subscribeCount\r\n * @param {Number} fetchCount\r\n * @param {Array<Array<String>>} fetchIds\r\n */\r\nfunction Query(model, collectionName, expression, source) {\r\n  this.model = model.pass({$query: this});\r\n  this.collectionName = collectionName;\r\n  this.expression = expression;\r\n  this.source = source;\r\n  this.hash = queryHash(collectionName, expression, source);\r\n  this.segments = ['$queries', this.hash];\r\n  this.idsSegments = ['$queries', this.hash, 'ids'];\r\n  this.extraSegments = ['$queries', this.hash, 'extra'];\r\n  this.isPathQuery = Array.isArray(expression);\r\n\r\n  this._pendingSubscribeCallbacks = [];\r\n\r\n  // These are used to help cleanup appropriately when calling unsubscribe and\r\n  // unfetch. A query won't be fully cleaned up until unfetch and unsubscribe\r\n  // are called the same number of times that fetch and subscribe were called.\r\n  this.subscribeCount = 0;\r\n  this.fetchCount = 0;\r\n  // The list of ids at the time of each fetch is pushed onto fetchIds, so\r\n  // that unfetchDoc can be called the same number of times as fetchDoc\r\n  this.fetchIds = [];\r\n\r\n  this.created = false;\r\n  this.shareQuery = null;\r\n}\r\n\r\nQuery.prototype.create = function() {\r\n  this.created = true;\r\n  this.model.root._queries.add(this);\r\n};\r\n\r\nQuery.prototype.destroy = function() {\r\n  this.created = false;\r\n  if (this.shareQuery) {\r\n    this.shareQuery.destroy();\r\n    this.shareQuery = null;\r\n  }\r\n  this.model.root._queries.remove(this);\r\n  this.model._del(this.segments);\r\n};\r\n\r\nQuery.prototype.sourceQuery = function() {\r\n  if (this.isPathQuery) {\r\n    var ids = pathIds(this.model, this.expression);\r\n    return {_id: {$in: ids}};\r\n  }\r\n  return this.expression;\r\n};\r\n\r\n/**\r\n * @param {Function} [cb] cb(err)\r\n */\r\nQuery.prototype.fetch = function(cb) {\r\n  cb = this.model.wrapCallback(cb);\r\n  this.model._context.fetchQuery(this);\r\n\r\n  this.fetchCount++;\r\n\r\n  if (!this.created) this.create();\r\n  var query = this;\r\n\r\n  var model = this.model;\r\n  var shareDocs = collectionShareDocs(this.model, this.collectionName);\r\n  var options = {docMode: 'fetch', knownDocs: shareDocs};\r\n  if (this.source) options.source = this.source;\r\n\r\n  model.root.shareConnection.createFetchQuery(\r\n    this.collectionName, this.sourceQuery(), options, fetchQueryCallback\r\n  );\r\n  function fetchQueryCallback(err, results, extra) {\r\n    if (err) return cb(err);\r\n    var ids = resultsIds(results);\r\n\r\n    // Keep track of the ids at fetch time for use in unfetch\r\n    query.fetchIds.push(ids.slice());\r\n    // Update the results ids and extra\r\n    model._setDiff(query.idsSegments, ids);\r\n    if (extra !== void 0) {\r\n      model._setDiffDeep(query.extraSegments, extra);\r\n    }\r\n\r\n    // Call fetchDoc for each document returned so that the proper load events\r\n    // and internal counts are maintained. However, specify that we already\r\n    // loaded the documents as part of the query, since we don't want to\r\n    // actually fetch the documents again\r\n    var alreadyLoaded = true;\r\n    for (var i = 0; i < ids.length; i++) {\r\n      model.fetchDoc(query.collectionName, ids[i], null, alreadyLoaded);\r\n    }\r\n    cb();\r\n  }\r\n  return this;\r\n};\r\n\r\n/**\r\n * Sets up a subscription to `this` query.\r\n * @param {Function} cb(err)\r\n */\r\nQuery.prototype.subscribe = function(cb) {\r\n  cb = this.model.wrapCallback(cb);\r\n  this.model._context.subscribeQuery(this);\r\n\r\n  var query = this;\r\n\r\n  if (this.subscribeCount++) {\r\n    process.nextTick(function() {\r\n      var data = query.model._get(query.segments);\r\n      if (data) cb();\r\n      else query._pendingSubscribeCallbacks.push(cb);\r\n    });\r\n    return this;\r\n  }\r\n\r\n  if (!this.created) this.create();\r\n\r\n  // When doing server-side rendering, we actually do a fetch the first time\r\n  // that subscribe is called, but keep track of the state as if subscribe\r\n  // were called for proper initialization in the client\r\n  var shareDocs = collectionShareDocs(this.model, this.collectionName);\r\n  var options = {docMode: 'sub', knownDocs: shareDocs};\r\n  if (this.source) options.source = this.source;\r\n\r\n  if (!this.model.root.fetchOnly) {\r\n    this._shareSubscribe(options, cb);\r\n    return this;\r\n  }\r\n\r\n  var model = this.model;\r\n  options.docMode = 'fetch';\r\n  model.root.shareConnection.createFetchQuery(\r\n    this.collectionName, this.sourceQuery(), options, function(err, results, extra) {\r\n      if (err) return cb(err);\r\n      var ids = resultsIds(results);\r\n      if (extra !== void 0) {\r\n        model._setDiffDeep(query.extraSegments, extra);\r\n      }\r\n      query._onChange(ids, null, cb);\r\n      while (cb = query._pendingSubscribeCallbacks.shift()) {\r\n        query._onChange(ids, null, cb);\r\n      }\r\n    }\r\n  );\r\n  return this;\r\n};\r\n\r\n/**\r\n * @private\r\n * @param {Object} options\r\n * @param {String} [options.source]\r\n * @param {Boolean} [options.poll]\r\n * @param {Boolean} [options.docMode = fetch or subscribe]\r\n * @param {Function} cb(err, results)\r\n */\r\nQuery.prototype._shareSubscribe = function(options, cb) {\r\n  var query = this;\r\n  var model = this.model;\r\n  this.shareQuery = this.model.root.shareConnection.createSubscribeQuery(\r\n    this.collectionName, this.sourceQuery(), options, function(err, results, extra) {\r\n      if (err) return cb(err);\r\n      if (extra !== void 0) {\r\n        model._setDiffDeep(query.extraSegments, extra);\r\n      }\r\n      // Results are not set in the callback, because the shareQuery should\r\n      // emit a 'change' event before calling back\r\n      cb();\r\n    }\r\n  );\r\n  var query = this;\r\n  this.shareQuery.on('insert', function(shareDocs, index) {\r\n    query._onInsert(shareDocs, index);\r\n  });\r\n  this.shareQuery.on('remove', function(shareDocs, index) {\r\n    query._onRemove(shareDocs, index);\r\n  });\r\n  this.shareQuery.on('move', function(shareDocs, from, to) {\r\n    query._onMove(shareDocs, from, to);\r\n  });\r\n  this.shareQuery.on('change', function(results, previous) {\r\n    // Get the new and previous list of ids when the entire results set changes\r\n    var ids = resultsIds(results);\r\n    var previousIds = previous && resultsIds(previous);\r\n    query._onChange(ids, previousIds);\r\n  });\r\n  this.shareQuery.on('extra', function(extra) {\r\n    model._setDiffDeep(query.extraSegments, extra);\r\n  });\r\n};\r\n\r\n/**\r\n * @public\r\n * @param {Function} cb(err, newFetchCount)\r\n */\r\nQuery.prototype.unfetch = function(cb) {\r\n  cb = this.model.wrapCallback(cb);\r\n  this.model._context.unfetchQuery(this);\r\n\r\n  // No effect if the query is not currently fetched\r\n  if (!this.fetchCount) {\r\n    cb();\r\n    return this;\r\n  }\r\n\r\n  var ids = this.fetchIds.shift() || [];\r\n  for (var i = 0; i < ids.length; i++) {\r\n    this.model.unfetchDoc(this.collectionName, ids[i]);\r\n  }\r\n\r\n  var query = this;\r\n  if (this.model.root.unloadDelay) {\r\n    setTimeout(finishUnfetchQuery, this.model.root.unloadDelay);\r\n  } else {\r\n    finishUnfetchQuery();\r\n  }\r\n  function finishUnfetchQuery() {\r\n    var count = --query.fetchCount;\r\n    if (count) return cb(null, count);\r\n    // Cleanup when no fetches or subscribes remain\r\n    if (!query.subscribeCount) query.destroy();\r\n    cb(null, 0);\r\n  }\r\n  return this;\r\n};\r\n\r\nQuery.prototype.unsubscribe = function(cb) {\r\n  cb = this.model.wrapCallback(cb);\r\n  this.model._context.unsubscribeQuery(this);\r\n\r\n  // No effect if the query is not currently subscribed\r\n  if (!this.subscribeCount) {\r\n    cb();\r\n    return this;\r\n  }\r\n\r\n  var query = this;\r\n  if (this.model.root.unloadDelay) {\r\n    setTimeout(finishUnsubscribeQuery, this.model.root.unloadDelay);\r\n  } else {\r\n    finishUnsubscribeQuery();\r\n  }\r\n  function finishUnsubscribeQuery() {\r\n    var count = --query.subscribeCount;\r\n    if (count) return cb(null, count);\r\n\r\n    var ids;\r\n    if (query.shareQuery) {\r\n      ids = resultsIds(query.shareQuery.results);\r\n      query.shareQuery.destroy();\r\n      query.shareQuery = null;\r\n    }\r\n\r\n    if (!query.model.root.fetchOnly && ids && ids.length) {\r\n      // Unsubscribe all documents that this query currently has in results\r\n      var group = util.asyncGroup(unsubscribeQueryCallback);\r\n      for (var i = 0; i < ids.length; i++) {\r\n        query.model.unsubscribeDoc(query.collectionName, ids[i], group());\r\n      }\r\n    }\r\n    unsubscribeQueryCallback();\r\n  }\r\n  function unsubscribeQueryCallback(err) {\r\n    if (err) return cb(err);\r\n    // Cleanup when no fetches or subscribes remain\r\n    if (!query.fetchCount) query.destroy();\r\n    cb(null, 0);\r\n  }\r\n  return this;\r\n};\r\n\r\nQuery.prototype._onInsert = function(shareDocs, index) {\r\n  var ids = [];\r\n  for (var i = 0; i < shareDocs.length; i++) {\r\n    var id = shareDocs[i].name;\r\n    ids.push(id);\r\n    this.model.subscribeDoc(this.collectionName, id);\r\n  }\r\n  this.model._insert(this.idsSegments, index, ids);\r\n};\r\nQuery.prototype._onRemove = function(shareDocs, index) {\r\n  this.model._remove(this.idsSegments, index, shareDocs.length);\r\n  for (var i = 0; i < shareDocs.length; i++) {\r\n    this.model.unsubscribeDoc(this.collectionName, shareDocs[i].name);\r\n  }\r\n};\r\nQuery.prototype._onMove = function(shareDocs, from, to) {\r\n  this.model._move(this.idsSegments, from, to, shareDocs.length);\r\n};\r\n\r\nQuery.prototype._onChange = function(ids, previousIds, cb) {\r\n  // Diff the new and previous list of ids, subscribing to documents for\r\n  // inserted ids and unsubscribing from documents for removed ids\r\n  var diff = (previousIds) ?\r\n    arrayDiff(previousIds, ids) :\r\n    [new arrayDiff.InsertDiff(0, ids)];\r\n  var previousCopy = previousIds && previousIds.slice();\r\n\r\n  // The results are updated via a different diff, since they might already\r\n  // have a value from a fetch or previous shareQuery instance\r\n  this.model._setDiff(this.idsSegments, ids);\r\n\r\n  var group, finished;\r\n  if (cb) {\r\n    group = util.asyncGroup(cb);\r\n    finished = group();\r\n  }\r\n  for (var i = 0; i < diff.length; i++) {\r\n    var item = diff[i];\r\n    if (item instanceof arrayDiff.InsertDiff) {\r\n      // Subscribe to the document for each inserted id\r\n      var values = item.values;\r\n      for (var j = 0; j < values.length; j++) {\r\n        this.model.subscribeDoc(this.collectionName, values[j], cb && group());\r\n      }\r\n    } else if (item instanceof arrayDiff.RemoveDiff) {\r\n      var values = previousCopy.splice(item.index, item.howMany);\r\n      // Unsubscribe from the document for each removed id\r\n      for (var j = 0; j < values.length; j++) {\r\n        this.model.unsubscribeDoc(this.collectionName, values[j], cb && group());\r\n      }\r\n    }\r\n    // Moving doesn't change document subscriptions, so that is ignored.\r\n  }\r\n  // Make sure that the callback gets called if the diff is empty or it\r\n  // contains no inserts or removes\r\n  finished && finished();\r\n};\r\n\r\nQuery.prototype.get = function() {\r\n  var results = [];\r\n  var data = this.model._get(this.segments);\r\n  if (!data) {\r\n    console.warn('You must fetch or subscribe to a query before getting its results.');\r\n    return results;\r\n  }\r\n  var ids = data.ids;\r\n  if (!ids) return results;\r\n\r\n  var collection = this.model.getCollection(this.collectionName);\r\n  for (var i = 0, l = ids.length; i < l; i++) {\r\n    var id = ids[i];\r\n    var doc = collection && collection.docs[id];\r\n    results.push(doc && doc.get());\r\n  }\r\n  return results;\r\n};\r\n\r\nQuery.prototype.getIds = function() {\r\n  return this.model._get(this.idsSegments);\r\n};\r\n\r\nQuery.prototype.getExtra = function() {\r\n  return this.model._get(this.extraSegments);\r\n};\r\n\r\nQuery.prototype.ref = function(from) {\r\n  var idsPath = this.idsSegments.join('.');\r\n  return this.model.refList(from, this.collectionName, idsPath);\r\n};\r\n\r\nQuery.prototype.refIds = function(from) {\r\n  var idsPath = this.idsSegments.join('.');\r\n  return this.model.root.ref(from, idsPath);\r\n};\r\n\r\nQuery.prototype.refExtra = function(from, relPath) {\r\n  var extraPath = this.extraSegments.join('.');\r\n  if (relPath) extraPath += '.' + relPath;\r\n  return this.model.root.ref(from, extraPath);\r\n};\r\n\r\nQuery.prototype.serialize = function() {\r\n  var ids = this.getIds();\r\n  var collection = this.model.getCollection(this.collectionName);\r\n  var snapshots, versions;\r\n  if (collection) {\r\n    snapshots = [];\r\n    versions = [];\r\n    for (var i = 0; i < ids.length; i++) {\r\n      var id = ids[i];\r\n      var doc = collection.docs[id];\r\n      if (doc) {\r\n        snapshots.push(doc.shareDoc.snapshot);\r\n        versions.push(doc.shareDoc.version);\r\n        collection.remove(id);\r\n      } else {\r\n        snapshots.push(0);\r\n        versions.push(0);\r\n      }\r\n    }\r\n  }\r\n  var counts = [];\r\n  var contexts = this.model.root._contexts;\r\n  for (var key in contexts) {\r\n    var context = contexts[key];\r\n    var subscribed = context.subscribedQueries[this.hash] || 0;\r\n    var fetched = context.fetchedQueries[this.hash] || 0;\r\n    if (subscribed || fetched) {\r\n      if (key !== 'root') {\r\n        counts.push([subscribed, fetched, key]);\r\n      } else if (fetched) {\r\n        counts.push([subscribed, fetched]);\r\n      } else {\r\n        counts.push([subscribed]);\r\n      }\r\n    }\r\n  }\r\n  var serialized = [\r\n    counts\r\n  , this.collectionName\r\n  , this.expression\r\n  , ids\r\n  , snapshots\r\n  , versions\r\n  , this.source\r\n  , this.getExtra()\r\n  ];\r\n  while (serialized[serialized.length - 1] == null) {\r\n    serialized.pop();\r\n  }\r\n  return serialized;\r\n};\r\n\r\nfunction queryHash(collectionName, expression, source) {\r\n  var args = [collectionName, expression, source];\r\n  return JSON.stringify(args).replace(/\\./g, '|');\r\n}\r\n\r\nfunction resultsIds(results) {\r\n  var ids = [];\r\n  for (var i = 0; i < results.length; i++) {\r\n    var shareDoc = results[i];\r\n    ids.push(shareDoc.name);\r\n  }\r\n  return ids;\r\n}\r\n\r\nfunction pathIds(model, segments) {\r\n  var value = model._get(segments);\r\n  return (typeof value === 'string') ? [value] :\r\n    (Array.isArray(value)) ? value.slice() : [];\r\n}\r\n\r\nfunction collectionShareDocs(model, collectionName) {\r\n  var collection = model.getCollection(collectionName);\r\n  if (!collection) return;\r\n\r\n  var results = [];\r\n  for (var name in collection.docs) {\r\n    results.push(collection.docs[name].shareDoc);\r\n  }\r\n\r\n  return results;\r\n}\r\n\n}).call(this,require(\"fH0/fz\"))","/**\r\n * RemoteDoc adapts the ShareJS operation protocol to Racer's mutator\r\n * interface.\r\n *\r\n * 1. It maps Racer's mutator methods to outgoing ShareJS operations.\r\n * 2. It maps incoming ShareJS operations to Racer events.\r\n */\r\n\r\nvar Doc = require('./Doc');\r\nvar util = require('../util');\r\n\r\nmodule.exports = RemoteDoc;\r\n\r\nfunction RemoteDoc(model, collectionName, id, data) {\r\n  Doc.call(this, model, collectionName, id);\r\n  var shareDoc = this.shareDoc = model._getOrCreateShareDoc(collectionName, id, data);\r\n  this.createdLocally = false;\r\n  this.model = model = model.pass({$remote: true});\r\n  this._updateCollectionData();\r\n\r\n  var doc = this;\r\n  shareDoc.on('op', function(op, isLocal) {\r\n    // Don't emit on local operations, since they are emitted in the mutator\r\n    if (isLocal) return;\r\n    doc._updateCollectionData();\r\n    doc._onOp(op);\r\n  });\r\n  shareDoc.on('del', function(isLocal, previous) {\r\n    // Calling the shareDoc.del method does not emit an operation event,\r\n    // so we create the appropriate event here.\r\n    if (isLocal) return;\r\n    delete doc.collectionData[id];\r\n    model.emit('change', [collectionName, id], [void 0, previous, model._pass]);\r\n  });\r\n  shareDoc.on('create', function(isLocal) {\r\n    // Local creates should not emit an event, since they only happen\r\n    // implicitly as a result of another mutation, and that operation will\r\n    // emit the appropriate event. Remote creates can set the snapshot data\r\n    // without emitting an operation event, so an event needs to be emitted\r\n    // for them.\r\n    if (isLocal) {\r\n      // Track when a document was created by this client, so that we don't\r\n      // emit a load event when subsequently subscribed\r\n      doc.createdLocally = true;\r\n      return;\r\n    }\r\n    doc._updateCollectionData();\r\n    var value = shareDoc.snapshot;\r\n    model.emit('change', [collectionName, id], [value, void 0, model._pass]);\r\n  });\r\n}\r\n\r\nRemoteDoc.prototype = new Doc();\r\n\r\nRemoteDoc.prototype._updateCollectionData = function() {\r\n  var snapshot = this.shareDoc.snapshot;\r\n  if (typeof snapshot === 'object' && !Array.isArray(snapshot)) {\r\n    snapshot.id = this.id;\r\n  }\r\n  this.collectionData[this.id] = snapshot;\r\n};\r\n\r\nRemoteDoc.prototype.set = function(segments, value, cb) {\r\n  if (segments.length === 0 && !this.shareDoc.type) {\r\n    // We copy the snapshot at time of create to prevent the id added outside\r\n    // of ShareJS from getting stored in the data\r\n    var snapshot = util.copy(value);\r\n    if (snapshot) delete snapshot.id;\r\n    this.shareDoc.create('json0', snapshot, cb);\r\n    // The id value will get added to the snapshot that was passed in\r\n    this.shareDoc.snapshot = value;\r\n    this._updateCollectionData();\r\n    return;\r\n  }\r\n  var previous = this._createImplied(segments);\r\n  var lastSegment = segments[segments.length - 1];\r\n  if (previous instanceof ImpliedOp) {\r\n    previous.value[lastSegment] = value;\r\n    this.shareDoc.submitOp(previous.op, cb);\r\n    this._updateCollectionData();\r\n    return;\r\n  }\r\n  var op = (util.isArrayIndex(lastSegment)) ?\r\n    [new ListReplaceOp(segments.slice(0, -1), lastSegment, previous, value)] :\r\n    [new ObjectReplaceOp(segments, previous, value)];\r\n  this.shareDoc.submitOp(op, cb);\r\n  this._updateCollectionData();\r\n  return previous;\r\n};\r\n\r\nRemoteDoc.prototype.del = function(segments, cb) {\r\n  if (segments.length === 0) {\r\n    var previous = this.get();\r\n    this.shareDoc.del(cb);\r\n    delete this.collectionData[this.id];\r\n    return previous;\r\n  }\r\n  // Don't do anything if the value is already undefined, since\r\n  // the del method should not create anything\r\n  var previous = this.get(segments);\r\n  if (previous === void 0) {\r\n    cb();\r\n    return;\r\n  }\r\n  var op = [new ObjectDeleteOp(segments, previous)];\r\n  this.shareDoc.submitOp(op, cb);\r\n  this._updateCollectionData();\r\n  return previous;\r\n};\r\n\r\nRemoteDoc.prototype.increment = function(segments, byNumber, cb) {\r\n  var previous = this._createImplied(segments);\r\n  if (previous instanceof ImpliedOp) {\r\n    var lastSegment = segments[segments.length - 1];\r\n    previous.value[lastSegment] = byNumber;\r\n    this.shareDoc.submitOp(previous.op, cb);\r\n    this._updateCollectionData();\r\n    return byNumber;\r\n  }\r\n  if (previous == null) {\r\n    var lastSegment = segments[segments.length - 1];\r\n    var op = (util.isArrayIndex(lastSegment)) ?\r\n      [new ListInsertOp(segments.slice(0, -1), lastSegment, byNumber)] :\r\n      [new ObjectInsertOp(segments, byNumber)];\r\n    this.shareDoc.submitOp(op, cb);\r\n    this._updateCollectionData();\r\n    return byNumber;\r\n  }\r\n  var op = [new IncrementOp(segments, byNumber)];\r\n  this.shareDoc.submitOp(op, cb);\r\n  this._updateCollectionData();\r\n  return previous + byNumber;\r\n};\r\n\r\nRemoteDoc.prototype.push = function(segments, value, cb) {\r\n  var shareDoc = this.shareDoc;\r\n  function push(arr, fnCb) {\r\n    var op = [new ListInsertOp(segments, arr.length, value)];\r\n    shareDoc.submitOp(op, fnCb);\r\n    return arr.length;\r\n  }\r\n  return this._arrayApply(segments, push, cb);\r\n};\r\n\r\nRemoteDoc.prototype.unshift = function(segments, value, cb) {\r\n  var shareDoc = this.shareDoc;\r\n  function unshift(arr, fnCb) {\r\n    var op = [new ListInsertOp(segments, 0, value)];\r\n    shareDoc.submitOp(op, fnCb);\r\n    return arr.length;\r\n  }\r\n  return this._arrayApply(segments, unshift, cb);\r\n};\r\n\r\nRemoteDoc.prototype.insert = function(segments, index, values, cb) {\r\n  var shareDoc = this.shareDoc;\r\n  function insert(arr, fnCb) {\r\n    var op = createInsertOp(segments, index, values);\r\n    shareDoc.submitOp(op, fnCb);\r\n    return arr.length;\r\n  }\r\n  return this._arrayApply(segments, insert, cb);\r\n};\r\n\r\nfunction createInsertOp(segments, index, values) {\r\n  if (!Array.isArray(values)) {\r\n    return [new ListInsertOp(segments, index, values)];\r\n  }\r\n  var op = [];\r\n  for (var i = 0, len = values.length; i < len; i++) {\r\n    op.push(new ListInsertOp(segments, index++, values[i]));\r\n  }\r\n  return op;\r\n}\r\n\r\nRemoteDoc.prototype.pop = function(segments, cb) {\r\n  var shareDoc = this.shareDoc;\r\n  function pop(arr, fnCb) {\r\n    var index = arr.length - 1;\r\n    var value = arr[index];\r\n    var op = [new ListRemoveOp(segments, index, value)];\r\n    shareDoc.submitOp(op, fnCb);\r\n    return value;\r\n  }\r\n  return this._arrayApply(segments, pop, cb);\r\n};\r\n\r\nRemoteDoc.prototype.shift = function(segments, cb) {\r\n  var shareDoc = this.shareDoc;\r\n  function shift(arr, fnCb) {\r\n    var value = arr[0];\r\n    var op = [new ListRemoveOp(segments, 0, value)];\r\n    shareDoc.submitOp(op, fnCb);\r\n    return value;\r\n  }\r\n  return this._arrayApply(segments, shift, cb);\r\n};\r\n\r\nRemoteDoc.prototype.remove = function(segments, index, howMany, cb) {\r\n  var shareDoc = this.shareDoc;\r\n  function remove(arr, fnCb) {\r\n    var values = arr.slice(index, index + howMany);\r\n    var op = [];\r\n    for (var i = 0, len = values.length; i < len; i++) {\r\n      op.push(new ListRemoveOp(segments, index, values[i]));\r\n    }\r\n    shareDoc.submitOp(op, fnCb);\r\n    return values;\r\n  }\r\n  return this._arrayApply(segments, remove, cb);\r\n};\r\n\r\nRemoteDoc.prototype.move = function(segments, from, to, howMany, cb) {\r\n  var shareDoc = this.shareDoc;\r\n  function move(arr, fnCb) {\r\n    // Get the return value\r\n    var values = arr.slice(from, from + howMany);\r\n\r\n    // Build an op that moves each item individually\r\n    var op = [];\r\n    for (var i = 0; i < howMany; i++) {\r\n      op.push(new ListMoveOp(segments, (from < to) ? from : from + howMany - 1, (from < to) ? to + howMany - 1 : to));\r\n    }\r\n    shareDoc.submitOp(op, fnCb);\r\n\r\n    return values;\r\n  }\r\n  return this._arrayApply(segments, move, cb);\r\n};\r\n\r\nRemoteDoc.prototype.stringInsert = function(segments, index, value, cb) {\r\n  var previous = this._createImplied(segments);\r\n  if (previous instanceof ImpliedOp) {\r\n    var lastSegment = segments[segments.length - 1];\r\n    previous.value[lastSegment] = value;\r\n    this.shareDoc.submitOp(previous.op, cb);\r\n    this._updateCollectionData();\r\n    return;\r\n  }\r\n  if (previous == null) {\r\n    var lastSegment = segments[segments.length - 1];\r\n    var op = (util.isArrayIndex(lastSegment)) ?\r\n      [new ListInsertOp(segments.slice(0, -1), lastSegment, value)] :\r\n      [new ObjectInsertOp(segments, value)];\r\n    this.shareDoc.submitOp(op, cb);\r\n    this._updateCollectionData();\r\n    return previous;\r\n  }\r\n  var op = [new StringInsertOp(segments, index, value)];\r\n  this.shareDoc.submitOp(op, cb);\r\n  this._updateCollectionData();\r\n  return previous;\r\n};\r\n\r\nRemoteDoc.prototype.stringRemove = function(segments, index, howMany, cb) {\r\n  var previous = this._createImplied(segments);\r\n  if (previous instanceof ImpliedOp) return;\r\n  if (previous == null) return previous;\r\n  var removed = previous.slice(index, index + howMany);\r\n  var op = [new StringRemoveOp(segments, index, removed)];\r\n  this.shareDoc.submitOp(op, cb);\r\n  this._updateCollectionData();\r\n  return previous;\r\n};\r\n\r\nRemoteDoc.prototype.get = function(segments) {\r\n  return util.lookup(segments, this.shareDoc.snapshot);\r\n};\r\n\r\nRemoteDoc.prototype._createImplied = function(segments) {\r\n  if (!this.shareDoc.type) {\r\n    this.shareDoc.create('json0');\r\n  }\r\n  var parent = this.shareDoc;\r\n  var key = 'snapshot';\r\n  var node = parent[key];\r\n  var i = 0;\r\n  var nextKey = segments[i++];\r\n  var op, value;\r\n  while (nextKey != null) {\r\n    if (!node) {\r\n      if (op) {\r\n        value = value[key] = util.isArrayIndex(nextKey) ? [] : {};\r\n      } else {\r\n        value = util.isArrayIndex(nextKey) ? [] : {};\r\n        op = (Array.isArray(parent)) ?\r\n          new ListInsertOp(segments.slice(0, i - 2), key, value) :\r\n          new ObjectInsertOp(segments.slice(0, i - 1), value);\r\n      }\r\n      node = value;\r\n    }\r\n    parent = node;\r\n    key = nextKey;\r\n    node = parent[key];\r\n    nextKey = segments[i++];\r\n  }\r\n  if (op) return new ImpliedOp(op, value);\r\n  return node;\r\n};\r\n\r\nfunction ImpliedOp(op, value) {\r\n  this.op = op;\r\n  this.value = value;\r\n}\r\n\r\nRemoteDoc.prototype._arrayApply = function(segments, fn, cb) {\r\n  var arr = this._createImplied(segments);\r\n  if (arr instanceof ImpliedOp) {\r\n    this.shareDoc.submitOp(arr.op);\r\n    arr = this.get(segments);\r\n  }\r\n  if (arr == null) {\r\n    var lastSegment = segments[segments.length - 1];\r\n    var op = (util.isArrayIndex(lastSegment)) ?\r\n      [new ListInsertOp(segments.slice(0, -1), lastSegment, [])] :\r\n      [new ObjectInsertOp(segments, [])];\r\n    this.shareDoc.submitOp(op);\r\n    arr = this.get(segments);\r\n  }\r\n\r\n  if (!Array.isArray(arr)) {\r\n    var message = this._errorMessage(fn.name + ' on non-array', segments, arr);\r\n    var err = new TypeError(message);\r\n    return cb(err);\r\n  }\r\n  var out = fn(arr, cb);\r\n  this._updateCollectionData();\r\n  return out;\r\n};\r\n\r\nRemoteDoc.prototype._onOp = function(op) {\r\n  var item = op[0];\r\n  var segments = [this.collectionName, this.id].concat(item.p);\r\n  var model = this.model;\r\n\r\n  // ObjectReplaceOp, ObjectInsertOp, or ObjectDeleteOp\r\n  if (defined(item.oi) || defined(item.od)) {\r\n    var value = item.oi;\r\n    var previous = item.od;\r\n    model.emit('change', segments, [value, previous, model._pass]);\r\n\r\n  // ListReplaceOp\r\n  } else if (defined(item.li) && defined(item.ld)) {\r\n    var value = item.li;\r\n    var previous = item.ld;\r\n    model.emit('change', segments, [value, previous, model._pass]);\r\n\r\n  // ListInsertOp\r\n  } else if (defined(item.li)) {\r\n    var index = segments[segments.length - 1];\r\n    var values = [item.li];\r\n    model.emit('insert', segments.slice(0, -1), [index, values, model._pass]);\r\n\r\n  // ListRemoveOp\r\n  } else if (defined(item.ld)) {\r\n    var index = segments[segments.length - 1];\r\n    var removed = [item.ld];\r\n    model.emit('remove', segments.slice(0, -1), [index, removed, model._pass]);\r\n\r\n  // ListMoveOp\r\n  } else if (defined(item.lm)) {\r\n    var from = segments[segments.length - 1];\r\n    var to = item.lm;\r\n    var howMany = 1;\r\n    model.emit('move', segments.slice(0, -1), [from, to, howMany, model._pass]);\r\n\r\n  // StringInsertOp\r\n  } else if (defined(item.si)) {\r\n    var index = segments[segments.length - 1];\r\n    var text = item.si;\r\n    segments = segments.slice(0, -1);\r\n    var value = model._get(segments);\r\n    var previous = value.slice(0, index) + value.slice(index + text.length);\r\n    var pass = model.pass({$type: 'stringInsert', index: index, text: text})._pass;\r\n    model.emit('change', segments, [value, previous, pass]);\r\n\r\n  // StringRemoveOp\r\n  } else if (defined(item.sd)) {\r\n    var index = segments[segments.length - 1];\r\n    var text = item.sd;\r\n    var howMany = text.length;\r\n    segments = segments.slice(0, -1);\r\n    var value = model._get(segments);\r\n    var previous = value.slice(0, index) + text + value.slice(index);\r\n    var pass = model.pass({$type: 'stringRemove', index: index, howMany: howMany})._pass;\r\n    model.emit('change', segments, [value, previous, pass]);\r\n\r\n  // IncrementOp\r\n  } else if (defined(item.na)) {\r\n    var value = this.get(item.p);\r\n    var previous = value - item.na;\r\n    model.emit('change', segments, [value, previous, model._pass]);\r\n  }\r\n};\r\n\r\nfunction ObjectReplaceOp(segments, before, after) {\r\n  this.p = util.castSegments(segments);\r\n  this.od = before;\r\n  this.oi = (after === void 0) ? null : after;\r\n}\r\nfunction ObjectInsertOp(segments, value) {\r\n  this.p = util.castSegments(segments);\r\n  this.oi = (value === void 0) ? null : value;\r\n}\r\nfunction ObjectDeleteOp(segments, value) {\r\n  this.p = util.castSegments(segments);\r\n  this.od = (value === void 0) ? null : value;\r\n}\r\nfunction ListReplaceOp(segments, index, before, after) {\r\n  this.p = util.castSegments(segments.concat(index));\r\n  this.ld = before;\r\n  this.li = (after === void 0) ? null : after;\r\n}\r\nfunction ListInsertOp(segments, index, value) {\r\n  this.p = util.castSegments(segments.concat(index));\r\n  this.li = (value === void 0) ? null : value;\r\n}\r\nfunction ListRemoveOp(segments, index, value) {\r\n  this.p = util.castSegments(segments.concat(index));\r\n  this.ld = (value === void 0) ? null : value;\r\n}\r\nfunction ListMoveOp(segments, from, to) {\r\n  this.p = util.castSegments(segments.concat(from));\r\n  this.lm = to;\r\n}\r\nfunction StringInsertOp(segments, index, value) {\r\n  this.p = util.castSegments(segments.concat(index));\r\n  this.si = value;\r\n}\r\nfunction StringRemoveOp(segments, index, value) {\r\n  this.p = util.castSegments(segments.concat(index));\r\n  this.sd = value;\r\n}\r\nfunction IncrementOp(segments, byNumber) {\r\n  this.p = util.castSegments(segments);\r\n  this.na = byNumber;\r\n}\r\n\r\nfunction defined(value) {\r\n  return value !== void 0;\r\n}\r\n","var Model = require('./Model');\r\nvar LocalDoc = require('./LocalDoc');\r\nvar util = require('../util');\r\n\r\nfunction CollectionMap() {}\r\nfunction ModelData() {}\r\nfunction DocMap() {}\r\nfunction CollectionData() {}\r\n\r\nModel.INITS.push(function(model) {\r\n  model.root.collections = new CollectionMap();\r\n  model.root.data = new ModelData();\r\n});\r\n\r\nModel.prototype.getCollection = function(collectionName) {\r\n  return this.root.collections[collectionName];\r\n};\r\nModel.prototype.getDoc = function(collectionName, id) {\r\n  var collection = this.root.collections[collectionName];\r\n  return collection && collection.docs[id];\r\n};\r\nModel.prototype.get = function(subpath) {\r\n  var segments = this._splitPath(subpath);\r\n  return this._get(segments);\r\n};\r\nModel.prototype._get = function(segments) {\r\n  return util.lookup(segments, this.root.data);\r\n};\r\nModel.prototype.getCopy = function(subpath) {\r\n  var segments = this._splitPath(subpath);\r\n  return this._getCopy(segments);\r\n};\r\nModel.prototype._getCopy = function(segments) {\r\n  var value = this._get(segments);\r\n  return util.copy(value);\r\n};\r\nModel.prototype.getDeepCopy = function(subpath) {\r\n  var segments = this._splitPath(subpath);\r\n  return this._getDeepCopy(segments);\r\n};\r\nModel.prototype._getDeepCopy = function(segments) {\r\n  var value = this._get(segments);\r\n  return util.deepCopy(value);\r\n};\r\nModel.prototype.getOrCreateCollection = function(name) {\r\n  var collection = this.root.collections[name];\r\n  if (collection) return collection;\r\n  var Doc = this._getDocConstructor(name);\r\n  collection = new Collection(this.root, name, Doc);\r\n  this.root.collections[name] = collection;\r\n  return collection;\r\n};\r\nModel.prototype._getDocConstructor = function() {\r\n  // Only create local documents. This is overriden in ./connection.js, so that\r\n  // the RemoteDoc behavior can be selectively included\r\n  return LocalDoc;\r\n};\r\n\r\n/**\r\n * Returns an existing document with id in a collection. If the document does\r\n * not exist, then creates the document with id in a collection and returns the\r\n * new document.\r\n * @param {String} collectionName\r\n * @param {String} id\r\n * @param {Object} [data] data to create if doc with id does not exist in collection\r\n */\r\nModel.prototype.getOrCreateDoc = function(collectionName, id, data) {\r\n  var collection = this.getOrCreateCollection(collectionName);\r\n  return collection.docs[id] || collection.add(id, data);\r\n};\r\n\r\n/**\r\n * @param {String} subpath\r\n */\r\nModel.prototype.destroy = function(subpath) {\r\n  var segments = this._splitPath(subpath);\r\n  // Silently remove all types of listeners within subpath\r\n  var silentModel = this.silent();\r\n  silentModel.removeAllListeners(null, subpath);\r\n  silentModel._removeAllRefs(segments);\r\n  silentModel._stopAll(segments);\r\n  silentModel._removeAllFilters(segments);\r\n  // Silently remove all model data within subpath\r\n  if (segments.length === 0) {\r\n    this.root.collections = new CollectionMap();\r\n    // Delete each property of data instead of creating a new object so that\r\n    // it is possible to continue using a reference to the original data object\r\n    var data = this.root.data;\r\n    for (var key in data) {\r\n      delete data[key];\r\n    }\r\n  } else if (segments.length === 1) {\r\n    var collection = this.getCollection(segments[0]);\r\n    collection && collection.destroy();\r\n  } else {\r\n    silentModel._del(segments);\r\n  }\r\n};\r\n\r\nfunction Collection(model, name, Doc) {\r\n  this.model = model;\r\n  this.name = name;\r\n  this.Doc = Doc;\r\n  this.docs = new DocMap();\r\n  this.data = model.data[name] = new CollectionData();\r\n}\r\n\r\n/**\r\n * Adds a document with `id` and `data` to `this` Collection.\r\n * @param {String} id\r\n * @param {Object} data\r\n * @return {LocalDoc|RemoteDoc} doc\r\n */\r\nCollection.prototype.add = function(id, data) {\r\n  var doc = new this.Doc(this.model, this.name, id, data);\r\n  this.docs[id] = doc;\r\n  return doc;\r\n};\r\nCollection.prototype.destroy = function() {\r\n  delete this.model.collections[this.name];\r\n  delete this.model.data[this.name];\r\n};\r\n\r\n/**\r\n * Removes the document with `id` from `this` Collection. If there are no more\r\n * documents in the Collection after the given document is removed, then this\r\n * also destroys the Collection.\r\n * @param {String} id\r\n */\r\nCollection.prototype.remove = function(id) {\r\n  delete this.docs[id];\r\n  delete this.data[id];\r\n  if (noKeys(this.docs)) this.destroy();\r\n};\r\n\r\n/**\r\n * Returns an object that maps doc ids to fully resolved documents.\r\n * @return {Object}\r\n */\r\nCollection.prototype.get = function() {\r\n  return this.data;\r\n};\r\n\r\nfunction noKeys(object) {\r\n  for (var key in object) {\r\n    return false;\r\n  }\r\n  return true;\r\n}\r\n","(function (process){\nvar share = require('share/lib/client');\r\nvar Channel = require('../Channel');\r\nvar Model = require('./Model');\r\nvar LocalDoc = require('./LocalDoc');\r\nvar RemoteDoc = require('./RemoteDoc');\r\n\r\nModel.prototype.createConnection = function(bundle) {\r\n  // Model::_createSocket should be defined by the socket plugin\r\n  this.root.socket = this._createSocket(bundle);\r\n\r\n  // The Share connection will bind to the socket by defining the onopen,\r\n  // onmessage, etc. methods\r\n  var shareConnection = this.root.shareConnection = new share.Connection(this.root.socket);\r\n  var segments = ['$connection', 'state'];\r\n  var states = ['connecting', 'connected', 'disconnected', 'stopped'];\r\n  var model = this;\r\n  states.forEach(function(state) {\r\n    shareConnection.on(state, function() {\r\n      model._setDiff(segments, state);\r\n    });\r\n  });\r\n  this._set(segments, 'connected');\r\n\r\n  // Wrap the socket methods on top of Share's methods\r\n  this._createChannel();\r\n};\r\n\r\nModel.prototype.connect = function() {\r\n  this.root.socket.open();\r\n};\r\nModel.prototype.disconnect = function() {\r\n  this.root.socket.close();\r\n};\r\nModel.prototype.reconnect = function() {\r\n  this.disconnect();\r\n  this.connect();\r\n};\r\n// Clean delayed disconnect\r\nModel.prototype.close = function(cb) {\r\n  cb = this.wrapCallback(cb);\r\n  var model = this;\r\n  this.whenNothingPending(function() {\r\n    model.root.socket.close();\r\n    cb();\r\n  });\r\n};\r\n\r\nModel.prototype._createChannel = function() {\r\n  this.root.channel = new Channel(this.root.socket);\r\n};\r\n\r\nModel.prototype._getOrCreateShareDoc = function(collectionName, id, data) {\r\n  var shareDoc = this.root.shareConnection.get(collectionName, id, data);\r\n  shareDoc.incremental = true;\r\n  return shareDoc;\r\n};\r\n\r\nModel.prototype._isLocal = function(name) {\r\n  // Whether the collection is local or remote is determined by its name.\r\n  // Collections starting with an underscore ('_') are for user-defined local\r\n  // collections, those starting with a dollar sign ('$'') are for\r\n  // framework-defined local collections, and all others are remote.\r\n  var firstCharcter = name.charAt(0);\r\n  return firstCharcter === '_' || firstCharcter === '$';\r\n};\r\n\r\nModel.prototype._getDocConstructor = function(name) {\r\n  return (this._isLocal(name)) ? LocalDoc : RemoteDoc;\r\n};\r\n\r\nModel.prototype.hasPending = function() {\r\n  return !!this._firstPendingDoc();\r\n};\r\n\r\nModel.prototype.hasWritePending = function() {\r\n  return !!this._firstWritePendingDoc();\r\n};\r\n\r\nModel.prototype.whenNothingPending = function(cb) {\r\n  var doc = this._firstPendingDoc();\r\n  if (doc) {\r\n    // If a document is found with a pending operation, wait for it to emit\r\n    // that nothing is pending anymore, and then recheck all documents again.\r\n    // We have to recheck all documents, just in case another mutation has\r\n    // been made in the meantime as a result of an event callback\r\n    var model = this;\r\n    doc.shareDoc.once('nothing pending', function retryNothingPending() {\r\n      process.nextTick(function(){\r\n        model.whenNothingPending(cb);\r\n      });\r\n    });\r\n    return;\r\n  }\r\n  // Call back when no Share documents have pending operations\r\n  process.nextTick(cb);\r\n};\r\n\r\nModel.prototype._firstPendingDoc = function() {\r\n  return this._firstShareDoc(hasPending);\r\n};\r\nModel.prototype._firstWritePendingDoc = function() {\r\n  return this._firstShareDoc(hasWritePending);\r\n};\r\n\r\nfunction hasPending(shareDoc) {\r\n  return shareDoc.hasPending();\r\n}\r\nfunction hasWritePending(shareDoc) {\r\n  return shareDoc.inflightData != null || !!shareDoc.pendingData.length;\r\n}\r\n\r\nModel.prototype._firstShareDoc = function(fn) {\r\n  // Loop through all of this model's documents, and return the first document\r\n  // encountered with that matches the provided test function\r\n  var collections = this.root.collections;\r\n  for (var collectionName in collections) {\r\n    var collection = collections[collectionName];\r\n    for (var id in collection.docs) {\r\n      var doc = collection.docs[id];\r\n      if (doc.shareDoc && fn(doc.shareDoc)) {\r\n        return doc;\r\n      }\r\n    }\r\n  }\r\n};\r\n\n}).call(this,require(\"fH0/fz\"))","/**\r\n * Contexts are useful for keeping track of the origin of subscribes.\r\n */\r\n\r\nvar Model = require('./Model');\r\nvar Query = require('./Query');\r\n\r\nModel.INITS.push(function(model) {\r\n  model.root._contexts = new Contexts();\r\n  model.root.setContext('root');\r\n});\r\n\r\nModel.prototype.context = function(id) {\r\n  var model = this._child();\r\n  model.setContext(id);\r\n  return model;\r\n};\r\n\r\nModel.prototype.setContext = function(id) {\r\n  this._context = this.getOrCreateContext(id);\r\n};\r\n\r\nModel.prototype.getOrCreateContext = function(id) {\r\n  return this.root._contexts[id] ||\r\n    (this.root._contexts[id] = new Context(this, id));\r\n};\r\n\r\nModel.prototype.unload = function(id) {\r\n  var context = (id) ? this.root._contexts[id] : this._context;\r\n  context && context.unload();\r\n};\r\n\r\nModel.prototype.unloadAll = function() {\r\n  var contexts = this.root._contexts;\r\n  for (var key in contexts) {\r\n    contexts[key].unload();\r\n  }\r\n};\r\n\r\nfunction Contexts() {}\r\n\r\nfunction FetchedDocs() {}\r\nfunction SubscribedDocs() {}\r\nfunction FetchedQueries() {}\r\nfunction SubscribedQueries() {}\r\n\r\nfunction Context(model, id) {\r\n  this.model = model;\r\n  this.id = id;\r\n  this.fetchedDocs = new FetchedDocs();\r\n  this.subscribedDocs = new SubscribedDocs();\r\n  this.fetchedQueries = new FetchedQueries();\r\n  this.subscribedQueries = new SubscribedQueries();\r\n}\r\n\r\nContext.prototype.toJSON = function() {\r\n  return {\r\n    fetchedDocs: this.fetchedDocs\r\n  , subscribedDocs: this.subscribedDocs\r\n  };\r\n};\r\n\r\nContext.prototype.fetchDoc = function(path, pass) {\r\n  if (pass.$query) return;\r\n  mapIncrement(this.fetchedDocs, path);\r\n};\r\nContext.prototype.subscribeDoc = function(path, pass) {\r\n  if (pass.$query) return;\r\n  mapIncrement(this.subscribedDocs, path);\r\n};\r\nContext.prototype.unfetchDoc = function(path, pass) {\r\n  if (pass.$query) return;\r\n  mapDecrement(this.fetchedDocs, path);\r\n};\r\nContext.prototype.unsubscribeDoc = function(path, pass) {\r\n  if (pass.$query) return;\r\n  mapDecrement(this.subscribedDocs, path);\r\n};\r\nContext.prototype.fetchQuery = function(query) {\r\n  mapIncrement(this.fetchedQueries, query.hash);\r\n};\r\nContext.prototype.subscribeQuery = function(query) {\r\n  mapIncrement(this.subscribedQueries, query.hash);\r\n};\r\nContext.prototype.unfetchQuery = function(query) {\r\n  mapDecrement(this.fetchedQueries, query.hash);\r\n};\r\nContext.prototype.unsubscribeQuery = function(query) {\r\n  mapDecrement(this.subscribedQueries, query.hash);\r\n};\r\nfunction mapIncrement(map, key) {\r\n  map[key] = (map[key] || 0) + 1;\r\n}\r\nfunction mapDecrement(map, key) {\r\n  map[key] && map[key]--;\r\n  if (!map[key]) delete map[key];\r\n}\r\n\r\nContext.prototype.unload = function() {\r\n  var model = this.model;\r\n  for (var hash in this.fetchedQueries) {\r\n    var query = model.root._queries.map[hash];\r\n    if (!query) continue;\r\n    var count = this.fetchedQueries[hash];\r\n    while (count--) query.unfetch();\r\n  }\r\n  for (var hash in this.subscribedQueries) {\r\n    var query = model.root._queries.map[hash];\r\n    if (!query) continue;\r\n    var count = this.subscribedQueries[hash];\r\n    while (count--) query.unsubscribe();\r\n  }\r\n  for (var path in this.fetchedDocs) {\r\n    var segments = path.split('.');\r\n    var count = this.fetchedDocs[path];\r\n    while (count--) model.unfetchDoc(segments[0], segments[1]);\r\n  }\r\n  for (var path in this.subscribedDocs) {\r\n    var segments = path.split('.');\r\n    var count = this.subscribedDocs[path];\r\n    while (count--) model.unsubscribeDoc(segments[0], segments[1]);\r\n  }\r\n};\r\n","var defaultFns = module.exports = new DefaultFns();\r\n\r\ndefaultFns.reverse = new FnPair(getReverse, setReverse);\r\ndefaultFns.asc = asc;\r\ndefaultFns.desc = desc;\r\n\r\nfunction DefaultFns() {}\r\nfunction FnPair(get, set) {\r\n  this.get = get;\r\n  this.set = set;\r\n}\r\n\r\nfunction getReverse(array) {\r\n  return array && array.slice().reverse();\r\n}\r\nfunction setReverse(values) {\r\n  return {0: getReverse(values)};\r\n}\r\n\r\nfunction asc(a, b) {\r\n  if (a < b) return -1;\r\n  if (a > b) return 1;\r\n  return 0;\r\n}\r\nfunction desc(a, b) {\r\n  if (a > b) return -1;\r\n  if (a < b) return 1;\r\n  return 0;\r\n}\r\n","var EventEmitter = require('events').EventEmitter;\r\nvar util = require('../util');\r\nvar Model = require('./Model');\r\n\r\n// This map determines which events get re-emitted as an 'all' event\r\nModel.MUTATOR_EVENTS = {\r\n  change: true\r\n, insert: true\r\n, remove: true\r\n, move: true\r\n, stringInsert: true\r\n, stringRemove: true\r\n, load: true\r\n, unload: true\r\n};\r\n\r\nModel.INITS.push(function(model) {\r\n  EventEmitter.call(this);\r\n\r\n  // Set max listeners to unlimited\r\n  model.setMaxListeners(0);\r\n\r\n  // Used in async methods to emit an error event if a callback is not supplied.\r\n  // This will throw if there is no handler for model.on('error')\r\n  model.root._defaultCallback = defaultCallback;\r\n  function defaultCallback(err) {\r\n    if (typeof err === 'string') err = new Error(err);\r\n    if (err) model.emit('error', err);\r\n  }\r\n\r\n  model.root._mutatorEventQueue = null;\r\n  model.root._pass = new Passed({}, {});\r\n  model.root._silent = null;\r\n  model.root._eventContext = null;\r\n});\r\n\r\nutil.mergeInto(Model.prototype, EventEmitter.prototype);\r\n\r\nModel.prototype.wrapCallback = function(cb) {\r\n  if (!cb) return this.root._defaultCallback;\r\n  var model = this;\r\n  return function wrappedCallback() {\r\n    try {\r\n      return cb.apply(this, arguments);\r\n    } catch (err) {\r\n      model.emit('error', err);\r\n    }\r\n  };\r\n};\r\n\r\n// EventEmitter.prototype.on, EventEmitter.prototype.addListener, and\r\n// EventEmitter.prototype.once return `this`. The Model equivalents return\r\n// the listener instead, since it is made internally for method subscriptions\r\n// and may need to be passed to removeListener.\r\n\r\nModel.prototype._emit = EventEmitter.prototype.emit;\r\nModel.prototype.emit = function(type) {\r\n  if (type === 'error') {\r\n    return this._emit.apply(this, arguments);\r\n  }\r\n  if (Model.MUTATOR_EVENTS[type]) {\r\n    if (this._silent) return this;\r\n    var segments = arguments[1];\r\n    var eventArgs = arguments[2];\r\n    if (this.root._mutatorEventQueue) {\r\n      this.root._mutatorEventQueue.push([type, segments, eventArgs]);\r\n      return this;\r\n    }\r\n    this.root._mutatorEventQueue = [];\r\n    this._emit(type, segments, eventArgs);\r\n    this._emit('all', segments, [type].concat(eventArgs));\r\n    while (this.root._mutatorEventQueue.length) {\r\n      var queued = this.root._mutatorEventQueue.shift();\r\n      type = queued[0];\r\n      segments = queued[1];\r\n      eventArgs = queued[2];\r\n      this._emit(type, segments, eventArgs);\r\n      this._emit('all', segments, [type].concat(eventArgs));\r\n    }\r\n    this.root._mutatorEventQueue = null;\r\n    return this;\r\n  }\r\n  return this._emit.apply(this, arguments);\r\n};\r\n\r\nModel.prototype._on = EventEmitter.prototype.on;\r\nModel.prototype.addListener =\r\nModel.prototype.on = function(type, pattern, cb) {\r\n  var listener = eventListener(this, pattern, cb);\r\n  this._on(type, listener);\r\n  return listener;\r\n};\r\n\r\nModel.prototype.once = function(type, pattern, cb) {\r\n  var listener = eventListener(this, pattern, cb);\r\n  function g() {\r\n    var matches = listener.apply(null, arguments);\r\n    if (matches) this.removeListener(type, g);\r\n  }\r\n  this._on(type, g);\r\n  return g;\r\n};\r\n\r\nModel.prototype._removeAllListeners = EventEmitter.prototype.removeAllListeners;\r\nModel.prototype.removeAllListeners = function(type, subpattern) {\r\n  // If a pattern is specified without an event type, remove all model event\r\n  // listeners under that pattern for all events\r\n  if (!type) {\r\n    for (var key in this._events) {\r\n      this.removeAllListeners(key, subpattern);\r\n    }\r\n    return this;\r\n  }\r\n\r\n  var pattern = this.path(subpattern);\r\n  // If no pattern is specified, remove all listeners like normal\r\n  if (!pattern) {\r\n    if (arguments.length === 0) {\r\n      return this._removeAllListeners();\r\n    } else {\r\n      return this._removeAllListeners(type);\r\n    }\r\n  }\r\n\r\n  // Remove all listeners for an event under a pattern\r\n  var listeners = this.listeners(type);\r\n  var segments = pattern.split('.');\r\n  // Make sure to iterate in reverse, since the array might be\r\n  // mutated as listeners are removed\r\n  for (var i = listeners.length; i--;) {\r\n    var listener = listeners[i];\r\n    if (patternContained(pattern, segments, listener)) {\r\n      this.removeListener(type, listener);\r\n    }\r\n  }\r\n  return this;\r\n};\r\n\r\nfunction patternContained(pattern, segments, listener) {\r\n  var listenerSegments = listener.patternSegments;\r\n  if (!listenerSegments) return false;\r\n  if (pattern === listener.pattern || pattern === '**') return true;\r\n  var len = segments.length;\r\n  if (len > listenerSegments.length) return false;\r\n  for (var i = 0; i < len; i++) {\r\n    if (segments[i] !== listenerSegments[i]) return false;\r\n  }\r\n  return true;\r\n}\r\n\r\nModel.prototype.pass = function(object, invert) {\r\n  var model = this._child();\r\n  model._pass = (invert) ?\r\n    new Passed(object, this._pass) :\r\n    new Passed(this._pass, object);\r\n  return model;\r\n};\r\n\r\nfunction Passed(previous, value) {\r\n  for (var key in previous) {\r\n    this[key] = previous[key];\r\n  }\r\n  for (var key in value) {\r\n    this[key] = value[key];\r\n  }\r\n}\r\n\r\n/**\r\n * The returned Model will or won't trigger event handlers when the model emits\r\n * events, depending on `value`\r\n * @param {Boolean|Null} value defaults to true\r\n * @return {Model}\r\n */\r\nModel.prototype.silent = function(value) {\r\n  var model = this._child();\r\n  model._silent = (value == null) ? true : value;\r\n  return model;\r\n};\r\n\r\nModel.prototype.eventContext = function(value) {\r\n  var model = this._child();\r\n  model._eventContext = value;\r\n  return model;\r\n};\r\n\r\nModel.prototype.removeContextListeners = function(value) {\r\n  if (arguments.length === 0) {\r\n    value = this._eventContext;\r\n  }\r\n  // Remove all events created within a given context\r\n  for (var type in this._events) {\r\n    var listeners = this.listeners(type);\r\n    // Make sure to iterate in reverse, since the array might be\r\n    // mutated as listeners are removed\r\n    for (var i = listeners.length; i--;) {\r\n      var listener = listeners[i];\r\n      if (listener.eventContext === value) {\r\n        this.removeListener(type, listener);\r\n      }\r\n    }\r\n  }\r\n  return this;\r\n};\r\n\r\nfunction eventListener(model, subpattern, cb) {\r\n  if (cb) {\r\n    // For signatures:\r\n    // model.on('change', 'example.subpath', callback)\r\n    // model.at('example').on('change', 'subpath', callback)\r\n    var pattern = model.path(subpattern);\r\n    return modelEventListener(pattern, cb, model._eventContext);\r\n  }\r\n  var path = model.path();\r\n  cb = arguments[1];\r\n  // For signature:\r\n  // model.at('example').on('change', callback)\r\n  if (path) return modelEventListener(path, cb, model._eventContext);\r\n  // For signature:\r\n  // model.on('normalEvent', callback)\r\n  return cb;\r\n}\r\n\r\nfunction modelEventListener(pattern, cb, eventContext) {\r\n  var patternSegments = util.castSegments(pattern.split('.'));\r\n  var testFn = testPatternFn(pattern, patternSegments);\r\n\r\n  function modelListener(segments, eventArgs) {\r\n    var captures = testFn(segments);\r\n    if (!captures) return;\r\n\r\n    var args = (captures.length) ? captures.concat(eventArgs) : eventArgs;\r\n    cb.apply(null, args);\r\n    return true;\r\n  }\r\n\r\n  // Used in Model#removeAllListeners\r\n  modelListener.pattern = pattern;\r\n  modelListener.patternSegments = patternSegments;\r\n  modelListener.eventContext = eventContext;\r\n\r\n  return modelListener;\r\n}\r\n\r\nfunction testPatternFn(pattern, patternSegments) {\r\n  if (pattern === '**') {\r\n    return function testPattern(segments) {\r\n      return [segments.join('.')];\r\n    };\r\n  }\r\n\r\n  var endingRest = stripRestWildcard(patternSegments);\r\n\r\n  return function testPattern(segments) {\r\n    // Any pattern with more segments does not match\r\n    var patternLen = patternSegments.length;\r\n    if (patternLen > segments.length) return;\r\n\r\n    // A pattern with the same number of segments matches if each\r\n    // of the segments are wildcards or equal. A shorter pattern matches\r\n    // if it ends in a rest wildcard and each of the corresponding\r\n    // segments are wildcards or equal.\r\n    if (patternLen === segments.length || endingRest) {\r\n      var captures = [];\r\n      for (var i = 0; i < patternLen; i++) {\r\n        var patternSegment = patternSegments[i];\r\n        var segment = segments[i];\r\n        if (patternSegment === '*' || patternSegment === '**') {\r\n          captures.push(segment);\r\n          continue;\r\n        }\r\n        if (patternSegment !== segment) return;\r\n      }\r\n      if (endingRest) {\r\n        var remainder = segments.slice(i).join('.');\r\n        captures.push(remainder);\r\n      }\r\n      return captures;\r\n    }\r\n  };\r\n}\r\n\r\nfunction stripRestWildcard(segments) {\r\n  // ['example', '**'] -> ['example']; return true\r\n  var lastIndex = segments.length - 1;\r\n  if (segments[lastIndex] === '**') {\r\n    segments.pop();\r\n    return true;\r\n  }\r\n  // ['example', 'subpath**'] -> ['example', 'subpath']; return true\r\n  var match = /^([^\\*]+)\\*\\*$/.exec(segments[lastIndex]);\r\n  if (!match) return false;\r\n  segments[lastIndex] = match[1];\r\n  return true;\r\n}\r\n","var util = require('../util');\r\nvar Model = require('./Model');\r\nvar defaultFns = require('./defaultFns');\r\n\r\nModel.INITS.push(function(model) {\r\n  model.root._filters = new Filters(model);\r\n  model.on('all', filterListener);\r\n  function filterListener(segments, eventArgs) {\r\n    var pass = eventArgs[eventArgs.length - 1];\r\n    var map = model.root._filters.fromMap;\r\n    for (var path in map) {\r\n      var filter = map[path];\r\n      if (pass.$filter === filter) continue;\r\n      if (util.mayImpact(filter.inputSegments, segments)) {\r\n        filter.update(pass);\r\n      }\r\n    }\r\n  }\r\n});\r\n\r\nModel.prototype.filter = function() {\r\n  var input, options, fn;\r\n  if (arguments.length === 1) {\r\n    fn = arguments[0];\r\n  } else if (arguments.length === 2) {\r\n    if (this.isPath(arguments[0])) {\r\n      input = arguments[0];\r\n    } else {\r\n      options = arguments[0];\r\n    }\r\n    fn = arguments[1];\r\n  } else {\r\n    input = arguments[0];\r\n    options = arguments[1];\r\n    fn = arguments[2];\r\n  }\r\n  var inputPath = this.path(input);\r\n  return this.root._filters.add(inputPath, fn, null, options);\r\n};\r\n\r\nModel.prototype.sort = function() {\r\n  var input, options, fn;\r\n  if (arguments.length === 1) {\r\n    fn = arguments[0];\r\n  } else if (arguments.length === 2) {\r\n    if (this.isPath(arguments[0])) {\r\n      input = arguments[0];\r\n    } else {\r\n      options = arguments[0];\r\n    }\r\n    fn = arguments[1];\r\n  } else {\r\n    input = arguments[0];\r\n    options = arguments[1];\r\n    fn = arguments[2];\r\n  }\r\n  if (!fn) throw new TypeError('Sort function is required');\r\n  var inputPath = this.path(input);\r\n  return this.root._filters.add(inputPath, null, fn, options);\r\n};\r\n\r\nModel.prototype.removeAllFilters = function(subpath) {\r\n  var segments = this._splitPath(subpath);\r\n  this._removeAllFilters(segments);\r\n};\r\nModel.prototype._removeAllFilters = function(segments) {\r\n  var filters = this.root._filters.fromMap;\r\n  for (var from in filters) {\r\n    if (util.contains(segments, filters[from].fromSegments)) {\r\n      filters[from].destroy();\r\n    }\r\n  }\r\n};\r\n\r\nfunction FromMap() {}\r\nfunction Filters(model) {\r\n  this.model = model;\r\n  this.fromMap = new FromMap();\r\n}\r\n\r\nFilters.prototype.add = function(inputPath, filterFn, sortFn, options) {\r\n  return new Filter(this, inputPath, filterFn, sortFn, options);\r\n};\r\n\r\nFilters.prototype.toJSON = function() {\r\n  var out = [];\r\n  for (var from in this.fromMap) {\r\n    var filter = this.fromMap[from];\r\n    // Don't try to bundle if functions were passed directly instead of by name\r\n    if (!filter.bundle) continue;\r\n    var args = [from, filter.inputPath, filter.filterName, filter.sortName];\r\n    if (filter.options) args.push(filter.options);\r\n    out.push(args);\r\n  }\r\n  return out;\r\n};\r\n\r\nfunction Filter(filters, inputPath, filterFn, sortFn, options) {\r\n  this.filters = filters;\r\n  this.model = filters.model.pass({$filter: this});\r\n  this.inputPath = inputPath;\r\n  this.inputSegments = inputPath.split('.');\r\n  this.filterName = null;\r\n  this.sortName = null;\r\n  this.bundle = true;\r\n  this.filterFn = null;\r\n  this.sortFn = null;\r\n  this.options = options;\r\n  this.skip = options && options.skip;\r\n  this.limit = options && options.limit;\r\n  if (filterFn) this.filter(filterFn);\r\n  if (sortFn) this.sort(sortFn);\r\n  this.idsSegments = null;\r\n  this.from = null;\r\n  this.fromSegments = null;\r\n}\r\n\r\nFilter.prototype.filter = function(fn) {\r\n  if (typeof fn === 'function') {\r\n    this.filterFn = fn;\r\n    this.bundle = false;\r\n    return this;\r\n  } else if (typeof fn === 'string') {\r\n    this.filterName = fn;\r\n    this.filterFn = this.model.root._namedFns[fn] || defaultFns[fn];\r\n    if (!this.filterFn) {\r\n      throw new TypeError('Filter function not found: ' + fn);\r\n    }\r\n  }\r\n  return this;\r\n};\r\n\r\nFilter.prototype.sort = function(fn) {\r\n  if (!fn) fn = 'asc';\r\n  if (typeof fn === 'function') {\r\n    this.sortFn = fn;\r\n    this.bundle = false;\r\n    return this;\r\n  } else if (typeof fn === 'string') {\r\n    this.sortName = fn;\r\n    this.sortFn = this.model.root._namedFns[fn] || defaultFns[fn];\r\n    if (!this.sortFn) {\r\n      throw new TypeError('Sort function not found: ' + fn);\r\n    }\r\n  }\r\n  return this;\r\n};\r\n\r\nFilter.prototype._slice = function(results) {\r\n  if (this.skip == null && this.limit == null) return results;\r\n  var begin = this.skip || 0;\r\n  // A limit of zero is equivalent to setting no limit\r\n  var end;\r\n  if (this.limit) end = begin + this.limit;\r\n  return results.slice(begin, end);\r\n};\r\n\r\nFilter.prototype.ids = function() {\r\n  var items = this.model._get(this.inputSegments);\r\n  var ids = [];\r\n  if (!items) return ids;\r\n  if (Array.isArray(items)) {\r\n    if (this.filterFn) {\r\n      for (var i = 0; i < items.length; i++) {\r\n        if (this.filterFn.call(this.model, items[i], i, items)) {\r\n          ids.push(i);\r\n        }\r\n      }\r\n    } else {\r\n      for (var i = 0; i < items.length; i++) ids.push(i);\r\n    }\r\n  } else {\r\n    if (this.filterFn) {\r\n      for (var key in items) {\r\n        if (items.hasOwnProperty(key) &&\r\n          this.filterFn.call(this.model, items[key], key, items)\r\n        ) {\r\n          ids.push(key);\r\n        }\r\n      }\r\n    } else {\r\n      ids = Object.keys(items);\r\n    }\r\n  }\r\n  var sortFn = this.sortFn;\r\n  if (sortFn) {\r\n    ids.sort(function(a, b) {\r\n      return sortFn(items[a], items[b]);\r\n    });\r\n  }\r\n  return this._slice(ids);\r\n};\r\n\r\nFilter.prototype.get = function() {\r\n  var items = this.model._get(this.inputSegments);\r\n  var results = [];\r\n  if (Array.isArray(items)) {\r\n    if (this.filterFn) {\r\n      for (var i = 0; i < items.length; i++) {\r\n        if (this.filterFn.call(this.model, items[i], i, items)) {\r\n          results.push(items[i]);\r\n        }\r\n      }\r\n    } else {\r\n      results = items.slice();\r\n    }\r\n  } else {\r\n    if (this.filterFn) {\r\n      for (var key in items) {\r\n        if (items.hasOwnProperty(key) &&\r\n          this.filterFn.call(this.model, items[key], key, items)\r\n        ) {\r\n          results.push(items[key]);\r\n        }\r\n      }\r\n    } else {\r\n      for (var key in items) {\r\n        if (items.hasOwnProperty(key)) {\r\n          results.push(items[key]);\r\n        }\r\n      }\r\n    }\r\n  }\r\n  if (this.sortFn) results.sort(this.sortFn);\r\n  return this._slice(results);\r\n};\r\n\r\nFilter.prototype.update = function(pass) {\r\n  var ids = this.ids();\r\n  this.model.pass(pass, true)._setArrayDiff(this.idsSegments, ids);\r\n};\r\n\r\nFilter.prototype.ref = function(from) {\r\n  from = this.model.path(from);\r\n  this.from = from;\r\n  this.fromSegments = from.split('.');\r\n  this.filters.fromMap[from] = this;\r\n  this.idsSegments = ['$filters', from.replace(/\\./g, '|')];\r\n  this.update();\r\n  return this.model.refList(from, this.inputPath, this.idsSegments.join('.'));\r\n};\r\n\r\nFilter.prototype.destroy = function() {\r\n  delete this.filters.fromMap[this.from];\r\n  this.model._removeRef(this.idsSegments);\r\n  this.model._del(this.idsSegments);\r\n};\r\n","var util = require('../util');\r\nvar Model = require('./Model');\r\nvar defaultFns = require('./defaultFns');\r\n\r\nfunction NamedFns() {}\r\n\r\nModel.INITS.push(function(model) {\r\n  model.root._namedFns = new NamedFns();\r\n  model.root._fns = new Fns(model);\r\n  model.on('all', fnListener);\r\n  function fnListener(segments, eventArgs) {\r\n    var pass = eventArgs[eventArgs.length - 1];\r\n    var map = model.root._fns.fromMap;\r\n    for (var path in map) {\r\n      var fn = map[path];\r\n      if (pass.$fn === fn) continue;\r\n      if (util.mayImpactAny(fn.inputsSegments, segments)) {\r\n        // Mutation affecting input path\r\n        fn.onInput(pass);\r\n      } else if (util.mayImpact(fn.fromSegments, segments)) {\r\n        // Mutation affecting output path\r\n        fn.onOutput(pass);\r\n      }\r\n    }\r\n  }\r\n});\r\n\r\nModel.prototype.fn = function(name, fns) {\r\n  this.root._namedFns[name] = fns;\r\n};\r\n\r\nfunction parseStartArguments(model, args, hasPath) {\r\n  var last = args.pop();\r\n  var fns, name;\r\n  if (typeof last === 'string') {\r\n    name = last;\r\n  } else {\r\n    fns = last;\r\n  }\r\n  var path;\r\n  if (hasPath) {\r\n    path = model.path(args.shift());\r\n  }\r\n  var i = args.length - 1;\r\n  var options;\r\n  if (model.isPath(args[i])) {\r\n    args[i] = model.path(args[i]);\r\n  } else {\r\n    options = args.pop();\r\n  }\r\n  while (i--) {\r\n    args[i] = model.path(args[i]);\r\n  }\r\n  return {\r\n    name: name\r\n  , path: path\r\n  , inputPaths: args\r\n  , fns: fns\r\n  , options: options\r\n  };\r\n}\r\n\r\nModel.prototype.evaluate = function() {\r\n  var args = Array.prototype.slice.call(arguments);\r\n  var parsed = parseStartArguments(this, args, false);\r\n  return this.root._fns.get(parsed.name, parsed.inputPaths, parsed.fns, parsed.options);\r\n};\r\n\r\nModel.prototype.start = function() {\r\n  var args = Array.prototype.slice.call(arguments);\r\n  var parsed = parseStartArguments(this, args, true);\r\n  return this.root._fns.start(parsed.name, parsed.path, parsed.inputPaths, parsed.fns, parsed.options);\r\n};\r\n\r\nModel.prototype.stop = function(subpath) {\r\n  var path = this.path(subpath);\r\n  this._stop(path);\r\n};\r\nModel.prototype._stop = function(fromPath) {\r\n  this.root._fns.stop(fromPath);\r\n};\r\n\r\nModel.prototype.stopAll = function(subpath) {\r\n  var segments = this._splitPath(subpath);\r\n  this._stopAll(segments);\r\n};\r\nModel.prototype._stopAll = function(segments) {\r\n  var fns = this.root._fns.fromMap;\r\n  for (var from in fns) {\r\n    var fromSegments = fns[from].fromSegments;\r\n    if (util.contains(segments, fromSegments)) {\r\n      this._stop(from);\r\n    }\r\n  }\r\n};\r\n\r\nfunction FromMap() {}\r\nfunction Fns(model) {\r\n  this.model = model;\r\n  this.nameMap = model.root._namedFns;\r\n  this.fromMap = new FromMap();\r\n}\r\n\r\nFns.prototype.get = function(name, inputPaths, fns, options) {\r\n  fns || (fns = this.nameMap[name] || defaultFns[name]);\r\n  var fn = new Fn(this.model, name, null, inputPaths, fns, options);\r\n  return fn.get();\r\n};\r\n\r\nFns.prototype.start = function(name, path, inputPaths, fns, options) {\r\n  fns || (fns = this.nameMap[name] || defaultFns[name]);\r\n  var fn = new Fn(this.model, name, path, inputPaths, fns, options);\r\n  this.fromMap[path] = fn;\r\n  return fn.onInput();\r\n};\r\n\r\nFns.prototype.stop = function(path) {\r\n  var fn = this.fromMap[path];\r\n  delete this.fromMap[path];\r\n  return fn;\r\n};\r\n\r\nFns.prototype.toJSON = function() {\r\n  var out = [];\r\n  for (var from in this.fromMap) {\r\n    var fn = this.fromMap[from];\r\n    // Don't try to bundle non-named functions that were started via\r\n    // model.start directly instead of by name\r\n    if (!fn.name) continue;\r\n    var args = [fn.from].concat(fn.inputPaths, fn.name);\r\n    if (fn.options) args.push(fn.options);\r\n    out.push(args);\r\n  }\r\n  return out;\r\n};\r\n\r\nfunction Fn(model, name, from, inputPaths, fns, options) {\r\n  this.model = model.pass({$fn: this});\r\n  this.name = name;\r\n  this.from = from;\r\n  this.inputPaths = inputPaths;\r\n  this.options = options;\r\n  if (!fns) {\r\n    throw new TypeError('Model function not found: ' + name);\r\n  }\r\n  this.getFn = fns.get || fns;\r\n  this.setFn = fns.set;\r\n  this.fromSegments = from && from.split('.');\r\n  this.inputsSegments = [];\r\n  for (var i = 0; i < this.inputPaths.length; i++) {\r\n    var segments = this.inputPaths[i].split('.');\r\n    this.inputsSegments.push(segments);\r\n  }\r\n\r\n  // Copy can be 'output', 'input', 'both', or 'none'\r\n  var copy = (options && options.copy) || 'output';\r\n  this.copyInput = (copy === 'input' || copy === 'both');\r\n  this.copyOutput = (copy === 'output' || copy === 'both');\r\n\r\n  // Mode can be 'diffDeep', 'diff', 'arrayDeep', 'array', or 'set'\r\n  this.mode = (options && options.mode) || 'diffDeep';\r\n}\r\n\r\nFn.prototype.apply = function(fn, inputs) {\r\n  for (var i = 0, len = this.inputsSegments.length; i < len; i++) {\r\n    var input = this.model._get(this.inputsSegments[i]);\r\n    inputs.push(this.copyInput ? util.deepCopy(input) : input);\r\n  }\r\n  return fn.apply(this.model, inputs);\r\n};\r\n\r\nFn.prototype.get = function() {\r\n  return this.apply(this.getFn, []);\r\n};\r\n\r\nFn.prototype.set = function(value, pass) {\r\n  if (!this.setFn) return;\r\n  var out = this.apply(this.setFn, [value]);\r\n  if (!out) return;\r\n  var inputsSegments = this.inputsSegments;\r\n  var model = this.model.pass(pass, true);\r\n  for (var key in out) {\r\n    var value = (this.copyOutput) ? util.deepCopy(out[key]) : out[key];\r\n    this._setValue(model, inputsSegments[key], value);\r\n  }\r\n};\r\n\r\nFn.prototype.onInput = function(pass) {\r\n  var value = (this.copyOutput) ? util.deepCopy(this.get()) : this.get();\r\n  this._setValue(this.model.pass(pass, true), this.fromSegments, value);\r\n  return value;\r\n};\r\n\r\nFn.prototype.onOutput = function(pass) {\r\n  var value = this.model._get(this.fromSegments);\r\n  return this.set(value, pass);\r\n};\r\n\r\nFn.prototype._setValue = function(model, segments, value) {\r\n  if (this.mode === 'diffDeep') {\r\n    model._setDiffDeep(segments, value);\r\n  } else if (this.mode === 'diff') {\r\n    model._setDiff(segments, value);\r\n  } else if (this.mode === 'arrayDeep') {\r\n    model._setArrayDiffDeep(segments, value);\r\n  } else if (this.mode === 'array') {\r\n    model._setArrayDiff(segments, value);\r\n  } else {\r\n    model._set(segments, value);\r\n  }\r\n};\r\n","module.exports = require('./Model');\r\nvar util = require('../util');\r\n\r\n// Extend model on both server and client //\r\nrequire('./unbundle');\r\nrequire('./events');\r\nrequire('./paths');\r\nrequire('./collections');\r\nrequire('./mutators');\r\nrequire('./setDiff');\r\n\r\nrequire('./connection');\r\nrequire('./subscriptions');\r\nrequire('./Query');\r\nrequire('./contexts');\r\n\r\nrequire('./fn');\r\nrequire('./filter');\r\nrequire('./refList');\r\nrequire('./ref');\r\n\r\n// Extend model for server //\r\nutil.serverRequire(module, './bundle');\r\nutil.serverRequire(module, './connection.server');\r\n","var util = require('../util');\r\nvar Model = require('./Model');\r\n\r\nModel.prototype._mutate = function(segments, fn, cb) {\r\n  cb = this.wrapCallback(cb);\r\n  var collectionName = segments[0];\r\n  var id = segments[1];\r\n  if (!collectionName || !id) {\r\n    var message = fn.name + ' must be performed under a collection ' +\r\n      'and document id. Invalid path: ' + segments.join('.');\r\n    return cb(new Error(message));\r\n  }\r\n  var doc = this.getOrCreateDoc(collectionName, id);\r\n  var docSegments = segments.slice(2);\r\n  return fn(doc, docSegments, cb);\r\n};\r\n\r\nModel.prototype.set = function() {\r\n  var subpath, value, cb;\r\n  if (arguments.length === 1) {\r\n    value = arguments[0];\r\n  } else if (arguments.length === 2) {\r\n    subpath = arguments[0];\r\n    value = arguments[1];\r\n  } else {\r\n    subpath = arguments[0];\r\n    value = arguments[1];\r\n    cb = arguments[2];\r\n  }\r\n  var segments = this._splitPath(subpath);\r\n  return this._set(segments, value, cb);\r\n};\r\nModel.prototype._set = function(segments, value, cb) {\r\n  segments = this._dereference(segments);\r\n  var model = this;\r\n  function set(doc, docSegments, fnCb) {\r\n    var previous = doc.set(docSegments, value, fnCb);\r\n    // On setting the entire doc, remote docs sometimes do a copy to add the\r\n    // id without it being stored in the database by ShareJS\r\n    if (docSegments.length === 0) value = doc.get(docSegments);\r\n    model.emit('change', segments, [value, previous, model._pass]);\r\n    return previous;\r\n  }\r\n  return this._mutate(segments, set, cb);\r\n};\r\n\r\nModel.prototype.setEach = function() {\r\n  var subpath, object, cb;\r\n  if (arguments.length === 1) {\r\n    object = arguments[0];\r\n  } else if (arguments.length === 2) {\r\n    subpath = arguments[0];\r\n    object = arguments[1];\r\n  } else {\r\n    subpath = arguments[0];\r\n    object = arguments[1];\r\n    cb = arguments[2];\r\n  }\r\n  var segments = this._splitPath(subpath);\r\n  return this._setEach(segments, object, cb);\r\n};\r\nModel.prototype._setEach = function(segments, object, cb) {\r\n  segments = this._dereference(segments);\r\n  var group = util.asyncGroup(this.wrapCallback(cb));\r\n  for (var key in object) {\r\n    var value = object[key];\r\n    this._set(segments.concat(key), value, group());\r\n  }\r\n};\r\n\r\nModel.prototype.add = function() {\r\n  var subpath, value, cb;\r\n  if (arguments.length === 1) {\r\n    value = arguments[0];\r\n  } else if (arguments.length === 2) {\r\n    if (typeof arguments[1] === 'function') {\r\n      value = arguments[0];\r\n      cb = arguments[1];\r\n    } else {\r\n      subpath = arguments[0];\r\n      value = arguments[1];\r\n    }\r\n  } else {\r\n    subpath = arguments[0];\r\n    value = arguments[1];\r\n    cb = arguments[2];\r\n  }\r\n  var segments = this._splitPath(subpath);\r\n  return this._add(segments, value, cb);\r\n};\r\nModel.prototype._add = function(segments, value, cb) {\r\n  if (typeof value !== 'object') {\r\n    var message = 'add requires an object value. Invalid value: ' + value;\r\n    cb = this.wrapCallback(cb);\r\n    return cb(new Error(message));\r\n  }\r\n  var id = value.id || this.id();\r\n  value.id = id;\r\n  this._set(segments.concat(id), value, cb);\r\n  return id;\r\n};\r\n\r\nModel.prototype.setNull = function() {\r\n  var subpath, value, cb;\r\n  if (arguments.length === 1) {\r\n    value = arguments[0];\r\n  } else if (arguments.length === 2) {\r\n    subpath = arguments[0];\r\n    value = arguments[1];\r\n  } else {\r\n    subpath = arguments[0];\r\n    value = arguments[1];\r\n    cb = arguments[2];\r\n  }\r\n  var segments = this._splitPath(subpath);\r\n  return this._setNull(segments, value, cb);\r\n};\r\nModel.prototype._setNull = function(segments, value, cb) {\r\n  segments = this._dereference(segments);\r\n  var model = this;\r\n  function setNull(doc, docSegments, fnCb) {\r\n    var previous = doc.get(docSegments);\r\n    if (previous != null) {\r\n      fnCb();\r\n      return previous;\r\n    }\r\n    doc.set(docSegments, value, fnCb);\r\n    model.emit('change', segments, [value, previous, model._pass]);\r\n    return value;\r\n  }\r\n  return this._mutate(segments, setNull, cb);\r\n};\r\n\r\nModel.prototype.del = function() {\r\n  var subpath, cb;\r\n  if (arguments.length === 1) {\r\n    if (typeof arguments[0] === 'function') {\r\n      cb = arguments[0];\r\n    } else {\r\n      subpath = arguments[0];\r\n    }\r\n  } else {\r\n    subpath = arguments[0];\r\n    cb = arguments[1];\r\n  }\r\n  var segments = this._splitPath(subpath);\r\n  return this._del(segments, cb);\r\n};\r\nModel.prototype._del = function(segments, cb) {\r\n  segments = this._dereference(segments);\r\n  var model = this;\r\n  function del(doc, docSegments, fnCb) {\r\n    var previous = doc.del(docSegments, fnCb);\r\n    // When deleting an entire document, also remove the reference to the\r\n    // document object from its collection\r\n    if (segments.length === 2) {\r\n      var collectionName = segments[0];\r\n      var id = segments[1];\r\n      model.root.collections[collectionName].remove(id);\r\n    }\r\n    model.emit('change', segments, [void 0, previous, model._pass]);\r\n    return previous;\r\n  }\r\n  return this._mutate(segments, del, cb);\r\n};\r\n\r\nModel.prototype.increment = function() {\r\n  var subpath, byNumber, cb;\r\n  if (arguments.length === 1) {\r\n    if (typeof arguments[0] === 'function') {\r\n      cb = arguments[0];\r\n    } else if (typeof arguments[0] === 'number') {\r\n      byNumber = arguments[0];\r\n    } else {\r\n      subpath = arguments[0];\r\n    }\r\n  } else if (arguments.length === 2) {\r\n    if (typeof arguments[1] === 'function') {\r\n      cb = arguments[1];\r\n      if (typeof arguments[0] === 'number') {\r\n        byNumber = arguments[0];\r\n      } else {\r\n        subpath = arguments[0];\r\n      }\r\n    } else {\r\n      subpath = arguments[0];\r\n      byNumber = arguments[1];\r\n    }\r\n  } else {\r\n    subpath = arguments[0];\r\n    byNumber = arguments[1];\r\n    cb = arguments[2];\r\n  }\r\n  var segments = this._splitPath(subpath);\r\n  return this._increment(segments, byNumber, cb);\r\n};\r\nModel.prototype._increment = function(segments, byNumber, cb) {\r\n  segments = this._dereference(segments);\r\n  if (byNumber == null) byNumber = 1;\r\n  var model = this;\r\n  function increment(doc, docSegments, fnCb) {\r\n    var value = doc.increment(docSegments, byNumber, fnCb);\r\n    var previous = value - byNumber;\r\n    model.emit('change', segments, [value, previous, model._pass]);\r\n    return value;\r\n  }\r\n  return this._mutate(segments, increment, cb);\r\n};\r\n\r\nModel.prototype.push = function() {\r\n  var subpath, value, cb;\r\n  if (arguments.length === 1) {\r\n    value = arguments[0];\r\n  } else if (arguments.length === 2) {\r\n    subpath = arguments[0];\r\n    value = arguments[1];\r\n  } else {\r\n    subpath = arguments[0];\r\n    value = arguments[1];\r\n    cb = arguments[2];\r\n  }\r\n  var segments = this._splitPath(subpath);\r\n  return this._push(segments, value, cb);\r\n};\r\nModel.prototype._push = function(segments, value, cb) {\r\n  var forArrayMutator = true;\r\n  segments = this._dereference(segments, forArrayMutator);\r\n  var model = this;\r\n  function push(doc, docSegments, fnCb) {\r\n    var length = doc.push(docSegments, value, fnCb);\r\n    model.emit('insert', segments, [length - 1, [value], model._pass]);\r\n    return length;\r\n  }\r\n  return this._mutate(segments, push, cb);\r\n};\r\n\r\nModel.prototype.unshift = function() {\r\n  var subpath, value, cb;\r\n  if (arguments.length === 1) {\r\n    value = arguments[0];\r\n  } else if (arguments.length === 2) {\r\n    subpath = arguments[0];\r\n    value = arguments[1];\r\n  } else {\r\n    subpath = arguments[0];\r\n    value = arguments[1];\r\n    cb = arguments[2];\r\n  }\r\n  var segments = this._splitPath(subpath);\r\n  return this._unshift(segments, value, cb);\r\n};\r\nModel.prototype._unshift = function(segments, value, cb) {\r\n  var forArrayMutator = true;\r\n  segments = this._dereference(segments, forArrayMutator);\r\n  var model = this;\r\n  function unshift(doc, docSegments, fnCb) {\r\n    var length = doc.unshift(docSegments, value, fnCb);\r\n    model.emit('insert', segments, [0, [value], model._pass]);\r\n    return length;\r\n  }\r\n  return this._mutate(segments, unshift, cb);\r\n};\r\n\r\nModel.prototype.insert = function() {\r\n  var subpath, index, values, cb;\r\n  if (arguments.length === 1) {\r\n    throw new Error('Not enough arguments for insert');\r\n  } else if (arguments.length === 2) {\r\n    index = arguments[0];\r\n    values = arguments[1];\r\n  } else if (arguments.length === 3) {\r\n    subpath = arguments[0];\r\n    index = arguments[1];\r\n    values = arguments[2];\r\n  } else {\r\n    subpath = arguments[0];\r\n    index = arguments[1];\r\n    values = arguments[2];\r\n    cb = arguments[3];\r\n  }\r\n  var segments = this._splitPath(subpath);\r\n  return this._insert(segments, +index, values, cb);\r\n};\r\nModel.prototype._insert = function(segments, index, values, cb) {\r\n  var forArrayMutator = true;\r\n  segments = this._dereference(segments, forArrayMutator);\r\n  var model = this;\r\n  function insert(doc, docSegments, fnCb) {\r\n    var inserted = (Array.isArray(values)) ? values : [values];\r\n    var length = doc.insert(docSegments, index, inserted, fnCb);\r\n    model.emit('insert', segments, [index, inserted, model._pass]);\r\n    return length;\r\n  }\r\n  return this._mutate(segments, insert, cb);\r\n};\r\n\r\nModel.prototype.pop = function() {\r\n  var subpath, cb;\r\n  if (arguments.length === 1) {\r\n    if (typeof arguments[0] === 'function') {\r\n      cb = arguments[0];\r\n    } else {\r\n      subpath = arguments[0];\r\n    }\r\n  } else {\r\n    subpath = arguments[0];\r\n    cb = arguments[1];\r\n  }\r\n  var segments = this._splitPath(subpath);\r\n  return this._pop(segments, cb);\r\n};\r\nModel.prototype._pop = function(segments, cb) {\r\n  var forArrayMutator = true;\r\n  segments = this._dereference(segments, forArrayMutator);\r\n  var model = this;\r\n  function pop(doc, docSegments, fnCb) {\r\n    var arr = doc.get(docSegments);\r\n    var length = arr && arr.length;\r\n    if (!length) {\r\n      fnCb();\r\n      return;\r\n    }\r\n    var value = doc.pop(docSegments, fnCb);\r\n    model.emit('remove', segments, [length - 1, [value], model._pass]);\r\n    return value;\r\n  }\r\n  return this._mutate(segments, pop, cb);\r\n};\r\n\r\nModel.prototype.shift = function() {\r\n  var subpath, cb;\r\n  if (arguments.length === 1) {\r\n    if (typeof arguments[0] === 'function') {\r\n      cb = arguments[0];\r\n    } else {\r\n      subpath = arguments[0];\r\n    }\r\n  } else {\r\n    subpath = arguments[0];\r\n    cb = arguments[1];\r\n  }\r\n  var segments = this._splitPath(subpath);\r\n  return this._shift(segments, cb);\r\n};\r\nModel.prototype._shift = function(segments, cb) {\r\n  var forArrayMutator = true;\r\n  segments = this._dereference(segments, forArrayMutator);\r\n  var model = this;\r\n  function shift(doc, docSegments, fnCb) {\r\n    var arr = doc.get(docSegments);\r\n    var length = arr && arr.length;\r\n    if (!length) {\r\n      fnCb();\r\n      return;\r\n    }\r\n    var value = doc.shift(docSegments, fnCb);\r\n    model.emit('remove', segments, [0, [value], model._pass]);\r\n    return value;\r\n  }\r\n  return this._mutate(segments, shift, cb);\r\n};\r\n\r\nModel.prototype.remove = function() {\r\n  var subpath, index, howMany, cb;\r\n  if (arguments.length === 1) {\r\n    index = arguments[0];\r\n  } else if (arguments.length === 2) {\r\n    if (typeof arguments[1] === 'function') {\r\n      cb = arguments[1];\r\n      if (typeof arguments[0] === 'number') {\r\n        index = arguments[0];\r\n      } else {\r\n        subpath = arguments[0];\r\n      }\r\n    } else {\r\n      if (typeof arguments[0] === 'number') {\r\n        index = arguments[0];\r\n        howMany = arguments[1];\r\n      } else {\r\n        subpath = arguments[0];\r\n        index = arguments[1];\r\n      }\r\n    }\r\n  } else if (arguments.length === 3) {\r\n    if (typeof arguments[2] === 'function') {\r\n      cb = arguments[2];\r\n      if (typeof arguments[0] === 'number') {\r\n        index = arguments[0];\r\n        howMany = arguments[1];\r\n      } else {\r\n        subpath = arguments[0];\r\n        index = arguments[1];\r\n      }\r\n    } else {\r\n      subpath = arguments[0];\r\n      index = arguments[1];\r\n      howMany = arguments[2];\r\n    }\r\n  } else {\r\n    subpath = arguments[0];\r\n    index = arguments[1];\r\n    howMany = arguments[2];\r\n    cb = arguments[3];\r\n  }\r\n  var segments = this._splitPath(subpath);\r\n  if (index == null) index = segments.pop();\r\n  return this._remove(segments, +index, howMany, cb);\r\n};\r\nModel.prototype._remove = function(segments, index, howMany, cb) {\r\n  var forArrayMutator = true;\r\n  segments = this._dereference(segments, forArrayMutator);\r\n  if (howMany == null) howMany = 1;\r\n  var model = this;\r\n  function remove(doc, docSegments, fnCb) {\r\n    var removed = doc.remove(docSegments, index, howMany, fnCb);\r\n    model.emit('remove', segments, [index, removed, model._pass]);\r\n    return removed;\r\n  }\r\n  return this._mutate(segments, remove, cb);\r\n};\r\n\r\nModel.prototype.move = function() {\r\n  var subpath, from, to, howMany, cb;\r\n  if (arguments.length === 1) {\r\n    throw new Error('Not enough arguments for move');\r\n  } else if (arguments.length === 2) {\r\n    from = arguments[0];\r\n    to = arguments[1];\r\n  } else if (arguments.length === 3) {\r\n    if (typeof arguments[2] === 'function') {\r\n      from = arguments[0];\r\n      to = arguments[1];\r\n      cb = arguments[2];\r\n    } else if (typeof arguments[0] === 'number') {\r\n      from = arguments[0];\r\n      to = arguments[1];\r\n      howMany = arguments[2];\r\n    } else {\r\n      subpath = arguments[0];\r\n      from = arguments[1];\r\n      to = arguments[2];\r\n    }\r\n  } else if (arguments.length === 4) {\r\n    if (typeof arguments[3] === 'function') {\r\n      cb = arguments[3];\r\n      if (typeof arguments[0] === 'number') {\r\n        from = arguments[0];\r\n        to = arguments[1];\r\n        howMany = arguments[2];\r\n      } else {\r\n        subpath = arguments[0];\r\n        from = arguments[1];\r\n        to = arguments[2];\r\n      }\r\n    } else {\r\n      subpath = arguments[0];\r\n      from = arguments[1];\r\n      to = arguments[2];\r\n      howMany = arguments[3];\r\n    }\r\n  } else {\r\n    subpath = arguments[0];\r\n    from = arguments[1];\r\n    to = arguments[2];\r\n    howMany = arguments[3];\r\n    cb = arguments[4];\r\n  }\r\n  var segments = this._splitPath(subpath);\r\n  return this._move(segments, from, to, howMany, cb);\r\n};\r\nModel.prototype._move = function(segments, from, to, howMany, cb) {\r\n  var forArrayMutator = true;\r\n  segments = this._dereference(segments, forArrayMutator);\r\n  if (howMany == null) howMany = 1;\r\n  var model = this;\r\n  function move(doc, docSegments, fnCb) {\r\n    // Cast to numbers\r\n    from = +from;\r\n    to = +to;\r\n    // Convert negative indices into positive\r\n    if (from < 0 || to < 0) {\r\n      var len = doc.get(docSegments).length;\r\n      if (from < 0) from += len;\r\n      if (to < 0) to += len;\r\n    }\r\n    var moved = doc.move(docSegments, from, to, howMany, fnCb);\r\n    model.emit('move', segments, [from, to, moved.length, model._pass]);\r\n    return moved;\r\n  }\r\n  return this._mutate(segments, move, cb);\r\n};\r\n\r\nModel.prototype.stringInsert = function() {\r\n  var subpath, index, text, cb;\r\n  if (arguments.length === 1) {\r\n    throw new Error('Not enough arguments for stringInsert');\r\n  } else if (arguments.length === 2) {\r\n    index = arguments[0];\r\n    text = arguments[1];\r\n  } else if (arguments.length === 3) {\r\n    if (typeof arguments[2] === 'function') {\r\n      index = arguments[0];\r\n      text = arguments[1];\r\n      cb = arguments[2];\r\n    } else {\r\n      subpath = arguments[0];\r\n      index = arguments[1];\r\n      text = arguments[2];\r\n    }\r\n  } else {\r\n    subpath = arguments[0];\r\n    index = arguments[1];\r\n    text = arguments[2];\r\n    cb = arguments[3];\r\n  }\r\n  var segments = this._splitPath(subpath);\r\n  return this._stringInsert(segments, index, text, cb);\r\n};\r\nModel.prototype._stringInsert = function(segments, index, text, cb) {\r\n  segments = this._dereference(segments);\r\n  var model = this;\r\n  function stringInsert(doc, docSegments, fnCb) {\r\n    var previous = doc.stringInsert(docSegments, index, text, fnCb);\r\n    var value = doc.get(docSegments);\r\n    var pass = model.pass({$type: 'stringInsert', index: index, text: text})._pass;\r\n    model.emit('change', segments, [value, previous, pass]);\r\n    return;\r\n  }\r\n  return this._mutate(segments, stringInsert, cb);\r\n};\r\n\r\nModel.prototype.stringRemove = function() {\r\n  var subpath, index, howMany, cb;\r\n  if (arguments.length === 1) {\r\n    throw new Error('Not enough arguments for stringRemove');\r\n  } else if (arguments.length === 2) {\r\n    index = arguments[0];\r\n    howMany = arguments[1];\r\n  } else if (arguments.length === 3) {\r\n    if (typeof arguments[2] === 'function') {\r\n      index = arguments[0];\r\n      howMany = arguments[1];\r\n      cb = arguments[2];\r\n    } else {\r\n      subpath = arguments[0];\r\n      index = arguments[1];\r\n      howMany = arguments[2];\r\n    }\r\n  } else {\r\n    subpath = arguments[0];\r\n    index = arguments[1];\r\n    howMany = arguments[2];\r\n    cb = arguments[3];\r\n  }\r\n  var segments = this._splitPath(subpath);\r\n  return this._stringRemove(segments, index, howMany, cb);\r\n};\r\nModel.prototype._stringRemove = function(segments, index, howMany, cb) {\r\n  segments = this._dereference(segments);\r\n  var model = this;\r\n  function stringRemove(doc, docSegments, fnCb) {\r\n    var previous = doc.stringRemove(docSegments, index, howMany, fnCb);\r\n    var value = doc.get(docSegments);\r\n    var pass = model.pass({$type: 'stringRemove', index: index, howMany: howMany})._pass;\r\n    model.emit('change', segments, [value, previous, pass]);\r\n    return;\r\n  }\r\n  return this._mutate(segments, stringRemove, cb);\r\n};\r\n","var Model = require('./Model');\r\n\r\nexports.mixin = {};\r\n\r\nModel.prototype._splitPath = function(subpath) {\r\n  var path = this.path(subpath);\r\n  return (path && path.split('.')) || [];\r\n};\r\n\r\n/**\r\n * Returns the path equivalent to the path of the current scoped model plus\r\n * (optionally) a suffix subpath\r\n *\r\n * @optional @param {String} subpath\r\n * @return {String} absolute path\r\n * @api public\r\n */\r\nModel.prototype.path = function(subpath) {\r\n  if (subpath == null || subpath === '') return (this._at) ? this._at : '';\r\n  if (typeof subpath === 'string' || typeof subpath === 'number') {\r\n    return (this._at) ? this._at + '.' + subpath : '' + subpath;\r\n  }\r\n  if (typeof subpath.path === 'function') return subpath.path();\r\n};\r\n\r\nModel.prototype.isPath = function(subpath) {\r\n  return this.path(subpath) != null;\r\n};\r\n\r\nModel.prototype.scope = function(path) {\r\n  var model = this._child();\r\n  model._at = path;\r\n  return model;\r\n};\r\n\r\n/**\r\n * Create a model object scoped to a particular path.\r\n * Example:\r\n *     var user = model.at('users.1');\r\n *     user.set('username', 'brian');\r\n *     user.on('push', 'todos', function(todo) {\r\n *       // ...\r\n *     });\r\n *\r\n *  @param {String} segment\r\n *  @return {Model} a scoped model\r\n *  @api public\r\n */\r\nModel.prototype.at = function(subpath) {\r\n  var path = this.path(subpath);\r\n  return this.scope(path);\r\n};\r\n\r\n/**\r\n * Returns a model scope that is a number of levels above the current scoped\r\n * path. Number of levels defaults to 1, so this method called without\r\n * arguments returns the model scope's parent model scope.\r\n *\r\n * @optional @param {Number} levels\r\n * @return {Model} a scoped model\r\n */\r\nModel.prototype.parent = function(levels) {\r\n  if (levels == null) levels = 1;\r\n  var segments = this._splitPath();\r\n  var len = Math.max(0, segments.length - levels);\r\n  var path = segments.slice(0, len).join('.');\r\n  return this.scope(path);\r\n};\r\n\r\n/**\r\n * Returns the last property segment of the current model scope path\r\n *\r\n * @optional @param {String} path\r\n * @return {String}\r\n */\r\nModel.prototype.leaf = function(path) {\r\n  if (!path) path = this.path();\r\n  var i = path.lastIndexOf('.');\r\n  return path.slice(i + 1);\r\n};\r\n","var util = require('../util');\r\nvar Model = require('./Model');\r\n\r\nModel.INITS.push(function(model) {\r\n  var root = model.root;\r\n  root._refs = new Refs(root);\r\n  addIndexListeners(root);\r\n  addListener(root, 'change', refChange);\r\n  addListener(root, 'load', refLoad);\r\n  addListener(root, 'unload', refUnload);\r\n  addListener(root, 'insert', refInsert);\r\n  addListener(root, 'remove', refRemove);\r\n  addListener(root, 'move', refMove);\r\n  addListener(root, 'stringInsert', refStringInsert);\r\n  addListener(root, 'stringRemove', refStringRemove);\r\n});\r\n\r\nfunction addIndexListeners(model) {\r\n  model.on('insert', function refInsertIndex(segments, eventArgs) {\r\n    var index = eventArgs[0];\r\n    var howMany = eventArgs[1].length;\r\n    function patchInsert(refIndex) {\r\n      return (index <= refIndex) ? refIndex + howMany : refIndex;\r\n    }\r\n    onIndexChange(segments, patchInsert);\r\n  });\r\n  model.on('remove', function refRemoveIndex(segments, eventArgs) {\r\n    var index = eventArgs[0];\r\n    var howMany = eventArgs[1].length;\r\n    function patchRemove(refIndex) {\r\n      return (index <= refIndex) ? refIndex - howMany : refIndex;\r\n    }\r\n    onIndexChange(segments, patchRemove);\r\n  });\r\n  model.on('move', function refMoveIndex(segments, eventArgs) {\r\n    var from = eventArgs[0];\r\n    var to = eventArgs[1];\r\n    var howMany = eventArgs[2];\r\n    function patchMove(refIndex) {\r\n      // If the index was moved itself\r\n      if (from <= refIndex && refIndex < from + howMany) {\r\n        return refIndex + to - from;\r\n      }\r\n      // Remove part of a move\r\n      if (from <= refIndex) refIndex -= howMany;\r\n      // Insert part of a move\r\n      if (to <= refIndex) refIndex += howMany;\r\n      return refIndex;\r\n    }\r\n    onIndexChange(segments, patchMove);\r\n  });\r\n  function onIndexChange(segments, patch) {\r\n    var fromMap = model._refs.fromMap;\r\n    for (var from in fromMap) {\r\n      var ref = fromMap[from];\r\n      if (!(ref.updateIndices &&\r\n        util.contains(segments, ref.toSegments) &&\r\n        ref.toSegments.length > segments.length)) continue;\r\n      var index = +ref.toSegments[segments.length];\r\n      var patched = patch(index);\r\n      if (index === patched) continue;\r\n      model._refs.remove(from);\r\n      ref.toSegments[segments.length] = '' + patched;\r\n      ref.to = ref.toSegments.join('.');\r\n      model._refs._add(ref);\r\n    }\r\n  }\r\n}\r\n\r\nfunction refChange(model, dereferenced, eventArgs, segments) {\r\n  var value = eventArgs[0];\r\n  // Detect if we are deleting vs. setting to undefined\r\n  if (value === void 0) {\r\n    var parentSegments = segments.slice();\r\n    var last = parentSegments.pop();\r\n    var parent = model._get(parentSegments);\r\n    if (!parent || !(last in parent)) {\r\n      model._del(dereferenced);\r\n      return;\r\n    }\r\n  }\r\n  model._set(dereferenced, value);\r\n}\r\nfunction refLoad(model, dereferenced, eventArgs) {\r\n  var value = eventArgs[0];\r\n  model._set(dereferenced, value);\r\n}\r\nfunction refUnload(model, dereferenced, eventArgs) {\r\n  model._del(dereferenced);\r\n}\r\nfunction refInsert(model, dereferenced, eventArgs) {\r\n  var index = eventArgs[0];\r\n  var values = eventArgs[1];\r\n  model._insert(dereferenced, index, values);\r\n}\r\nfunction refRemove(model, dereferenced, eventArgs) {\r\n  var index = eventArgs[0];\r\n  var howMany = eventArgs[1].length;\r\n  model._remove(dereferenced, index, howMany);\r\n}\r\nfunction refMove(model, dereferenced, eventArgs) {\r\n  var from = eventArgs[0];\r\n  var to = eventArgs[1];\r\n  var howMany = eventArgs[2];\r\n  model._move(dereferenced, from, to, howMany);\r\n}\r\nfunction refStringInsert(model, dereferenced, eventArgs) {\r\n  var index = eventArgs[0];\r\n  var text = eventArgs[1];\r\n  model._stringInsert(dereferenced, index, text);\r\n}\r\nfunction refStringRemove(model, dereferenced, eventArgs) {\r\n  var index = eventArgs[0];\r\n  var howMany = eventArgs[1];\r\n  model._stringRemove(dereferenced, index, howMany);\r\n}\r\n\r\nfunction addListener(model, type, fn) {\r\n  model.on(type, refListener);\r\n  function refListener(segments, eventArgs) {\r\n    var pass = eventArgs[eventArgs.length - 1];\r\n    // Find cases where an event is emitted on a path where a reference\r\n    // is pointing. All original mutations happen on the fully dereferenced\r\n    // location, so this detection only needs to happen in one direction\r\n    var toMap = model._refs.toMap;\r\n    var subpath;\r\n    for (var i = 0, len = segments.length; i < len; i++) {\r\n      subpath = (subpath) ? subpath + '.' + segments[i] : segments[i];\r\n      // If a ref is found pointing to a matching subpath, re-emit on the\r\n      // place where the reference is coming from as if the mutation also\r\n      // occured at that path\r\n      var refs = toMap[subpath];\r\n      if (!refs) continue;\r\n      var remaining = segments.slice(i + 1);\r\n      for (var refIndex = 0, numRefs = refs.length; refIndex < numRefs; refIndex++) {\r\n        var ref = refs[refIndex];\r\n        var dereferenced = ref.fromSegments.concat(remaining);\r\n        // The value may already be up to date via object reference. If so,\r\n        // simply re-emit the event. Otherwise, perform the same mutation on\r\n        // the ref's path\r\n        if (model._get(dereferenced) === model._get(segments)) {\r\n          model.emit(type, dereferenced, eventArgs);\r\n        } else {\r\n          var setterModel = ref.model.pass(pass, true);\r\n          setterModel._dereference = noopDereference;\r\n          fn(setterModel, dereferenced, eventArgs, segments);\r\n        }\r\n      }\r\n    }\r\n    // If a ref points to a child of a matching subpath, get the value in\r\n    // case it has changed and set if different\r\n    var parentToMap = model._refs.parentToMap;\r\n    var refs = parentToMap[subpath];\r\n    if (!refs) return;\r\n    for (var refIndex = 0, numRefs = refs.length; refIndex < numRefs; refIndex++) {\r\n      var ref = refs[refIndex];\r\n      var value = model._get(ref.toSegments);\r\n      var previous = model._get(ref.fromSegments);\r\n      if (previous !== value) {\r\n        var setterModel = ref.model.pass(pass, true);\r\n        setterModel._dereference = noopDereference;\r\n        setterModel._set(ref.fromSegments, value);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nModel.prototype._canRefTo = function(value) {\r\n  return this.isPath(value) || (value && typeof value.ref === 'function');\r\n};\r\n\r\nModel.prototype.ref = function() {\r\n  var from, to, options;\r\n  if (arguments.length === 1) {\r\n    to = arguments[0];\r\n  } else if (arguments.length === 2) {\r\n    if (this._canRefTo(arguments[1])) {\r\n      from = arguments[0];\r\n      to = arguments[1];\r\n    } else {\r\n      to = arguments[0];\r\n      options = arguments[1];\r\n    }\r\n  } else {\r\n    from = arguments[0];\r\n    to = arguments[1];\r\n    options = arguments[2];\r\n  }\r\n  var fromPath = this.path(from);\r\n  var toPath = this.path(to);\r\n  // Make ref to reffable object, such as query or filter\r\n  if (!toPath) return to.ref(fromPath);\r\n  var fromSegments = fromPath.split('.');\r\n  if (fromSegments.length < 2) {\r\n    throw new Error('ref must be performed under a collection ' +\r\n      'and document id. Invalid path: ' + fromPath);\r\n  }\r\n  this.root._refs.remove(fromPath);\r\n  var value = this.get(to);\r\n  this._set(fromSegments, value);\r\n  this.root._refs.add(fromPath, toPath, options);\r\n  return this.scope(fromPath);\r\n};\r\n\r\nModel.prototype.removeRef = function(subpath) {\r\n  var segments = this._splitPath(subpath);\r\n  var fromPath = segments.join('.');\r\n  this._removeRef(segments, fromPath);\r\n};\r\nModel.prototype._removeRef = function(segments, fromPath) {\r\n  this.root._refs.remove(fromPath);\r\n  this.root._refLists.remove(fromPath);\r\n  this._del(segments);\r\n};\r\n\r\nModel.prototype.removeAllRefs = function(subpath) {\r\n  var segments = this._splitPath(subpath);\r\n  this._removeAllRefs(segments);\r\n};\r\nModel.prototype._removeAllRefs = function(segments) {\r\n  this._removeMapRefs(segments, this.root._refs.fromMap);\r\n  this._removeMapRefs(segments, this.root._refLists.fromMap);\r\n};\r\nModel.prototype._removeMapRefs = function(segments, map) {\r\n  for (var from in map) {\r\n    var fromSegments = map[from].fromSegments;\r\n    if (util.contains(segments, fromSegments)) {\r\n      this._removeRef(fromSegments, from);\r\n    }\r\n  }\r\n};\r\n\r\nModel.prototype.dereference = function(subpath) {\r\n  var segments = this._splitPath(subpath);\r\n  return this._dereference(segments).join('.');\r\n};\r\n\r\nModel.prototype._dereference = function(segments, forArrayMutator, ignore) {\r\n  if (segments.length === 0) return segments;\r\n  var refs = this.root._refs.fromMap;\r\n  var refLists = this.root._refLists.fromMap;\r\n  var doAgain;\r\n  do {\r\n    var subpath = '';\r\n    doAgain = false;\r\n    for (var i = 0, len = segments.length; i < len; i++) {\r\n      subpath = (subpath) ? subpath + '.' + segments[i] : segments[i];\r\n\r\n      var ref = refs[subpath];\r\n      if (ref) {\r\n        var remaining = segments.slice(i + 1);\r\n        segments = ref.toSegments.concat(remaining);\r\n        doAgain = true;\r\n        break;\r\n      }\r\n\r\n      var refList = refLists[subpath];\r\n      if (refList && refList !== ignore) {\r\n        var belowDescendant = i + 2 < len;\r\n        var belowChild = i + 1 < len;\r\n        if (!(belowDescendant || forArrayMutator && belowChild)) continue;\r\n        segments = refList.dereference(segments, i);\r\n        doAgain = true;\r\n        break;\r\n      }\r\n    }\r\n  } while (doAgain);\r\n  // If a dereference fails, return a path that will result in a null value\r\n  // instead of a path to everything in the model\r\n  if (segments.length === 0) return ['$null'];\r\n  return segments;\r\n};\r\n\r\nfunction noopDereference(segments) {\r\n  return segments;\r\n}\r\n\r\nfunction Ref(model, from, to, options) {\r\n  this.model = model && model.pass({$ref: this});\r\n  this.from = from;\r\n  this.to = to;\r\n  this.fromSegments = from.split('.');\r\n  this.toSegments = to.split('.');\r\n  this.parentTos = [];\r\n  for (var i = 1, len = this.toSegments.length; i < len; i++) {\r\n    var parentTo = this.toSegments.slice(0, i).join('.');\r\n    this.parentTos.push(parentTo);\r\n  }\r\n  this.updateIndices = options && options.updateIndices;\r\n}\r\nfunction FromMap() {}\r\nfunction ToMap() {}\r\n\r\nfunction Refs(model) {\r\n  this.model = model;\r\n  this.fromMap = new FromMap();\r\n  this.toMap = new ToMap();\r\n  this.parentToMap = new ToMap();\r\n}\r\n\r\nRefs.prototype.add = function(from, to, options) {\r\n  var ref = new Ref(this.model, from, to, options);\r\n  return this._add(ref);\r\n};\r\n\r\nRefs.prototype._add = function(ref) {\r\n  this.fromMap[ref.from] = ref;\r\n  listMapAdd(this.toMap, ref.to, ref);\r\n  for (var i = 0, len = ref.parentTos.length; i < len; i++) {\r\n    listMapAdd(this.parentToMap, ref.parentTos[i], ref);\r\n  }\r\n  return ref;\r\n};\r\n\r\nRefs.prototype.remove = function(from) {\r\n  var ref = this.fromMap[from];\r\n  if (!ref) return;\r\n  delete this.fromMap[from];\r\n  listMapRemove(this.toMap, ref.to, ref);\r\n  for (var i = 0, len = ref.parentTos.length; i < len; i++) {\r\n    listMapRemove(this.parentToMap, ref.parentTos[i], ref);\r\n  }\r\n  return ref;\r\n};\r\n\r\nRefs.prototype.toJSON = function() {\r\n  var out = [];\r\n  for (var from in this.fromMap) {\r\n    var ref = this.fromMap[from];\r\n    out.push([ref.from, ref.to]);\r\n  }\r\n  return out;\r\n};\r\n\r\nfunction listMapAdd(map, name, item) {\r\n  map[name] || (map[name] = []);\r\n  map[name].push(item);\r\n}\r\n\r\nfunction listMapRemove(map, name, item) {\r\n  var items = map[name];\r\n  if (!items) return;\r\n  var index = items.indexOf(item);\r\n  if (index === -1) return;\r\n  items.splice(index, 1);\r\n  if (!items.length) delete map[name];\r\n}\r\n","var util = require('../util');\r\nvar Model = require('./Model');\r\n\r\nModel.INITS.push(function(model) {\r\n  var root = model.root;\r\n  root._refLists = new RefLists(root);\r\n  for (var type in Model.MUTATOR_EVENTS) {\r\n    addListener(root, type);\r\n  }\r\n});\r\n\r\nfunction addListener(model, type) {\r\n  model.on(type, refListListener);\r\n  function refListListener(segments, eventArgs) {\r\n    var pass = eventArgs[eventArgs.length - 1];\r\n    // Check for updates on or underneath paths\r\n    var fromMap = model._refLists.fromMap;\r\n    for (var from in fromMap) {\r\n      var refList = fromMap[from];\r\n      if (pass.$refList === refList) continue;\r\n      refList.onMutation(type, segments, eventArgs);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @param {String} type\r\n * @param {Array} segments\r\n * @param {Array} eventArgs\r\n * @param {RefList} refList\r\n */\r\nfunction patchFromEvent(type, segments, eventArgs, refList) {\r\n  var fromLength = refList.fromSegments.length;\r\n  var segmentsLength = segments.length;\r\n  var pass = eventArgs[eventArgs.length - 1];\r\n  var model = refList.model.pass(pass, true);\r\n\r\n  // Mutation on the `from` output itself\r\n  if (segmentsLength === fromLength) {\r\n    if (type === 'insert') {\r\n      var index = eventArgs[0];\r\n      var values = eventArgs[1];\r\n      var ids = setNewToValues(model, refList, values);\r\n      model._insert(refList.idsSegments, index, ids);\r\n      return;\r\n    }\r\n\r\n    if (type === 'remove') {\r\n      var index = eventArgs[0];\r\n      var howMany = eventArgs[1].length;\r\n      var ids = model._remove(refList.idsSegments, index, howMany);\r\n      // Delete the appropriate items underneath `to` if the `deleteRemoved`\r\n      // option was set true\r\n      if (refList.deleteRemoved) {\r\n        for (var i = 0; i < ids.length; i++) {\r\n          var item = refList.itemById(ids[i]);\r\n          model._del(refList.toSegmentsByItem(item));\r\n        }\r\n      }\r\n      return;\r\n    }\r\n\r\n    if (type === 'move') {\r\n      var from = eventArgs[0];\r\n      var to = eventArgs[1];\r\n      var howMany = eventArgs[2];\r\n      model._move(refList.idsSegments, from, to, howMany);\r\n      return;\r\n    }\r\n\r\n    // Change of the entire output\r\n    var values = (type === 'change') ?\r\n      eventArgs[0] : model._get(refList.fromSegments);\r\n    // Set ids to empty list if output is set to null\r\n    if (!values) {\r\n      model._set(refList.idsSegments, []);\r\n      return;\r\n    }\r\n    // If the entire output is set, create a list of ids based on the output,\r\n    // and update the corresponding items\r\n    var ids = setNewToValues(model, refList, values);\r\n    model._set(refList.idsSegments, ids);\r\n    return;\r\n  }\r\n\r\n  // If mutation is on a parent of `from`, we might need to re-create the\r\n  // entire refList output\r\n  if (segmentsLength < fromLength) {\r\n    model._setArrayDiff(refList.fromSegments, refList.get());\r\n    return;\r\n  }\r\n\r\n  var index = segments[fromLength];\r\n  var value = model._get(refList.fromSegments.concat(index));\r\n  var toSegments = refList.toSegmentsByItem(value);\r\n\r\n  // Mutation underneath a child of the `from` object.\r\n  if (segmentsLength > fromLength + 1) {\r\n    throw new Error('Mutation on descendant of refList `from`' +\r\n      ' should have been dereferenced: ' + segments.join('.'));\r\n  }\r\n\r\n  // Otherwise, mutation of a child of the `from` object\r\n\r\n  // If changing the item itself, it will also have to be re-set on the\r\n  // original object\r\n  if (type === 'change') {\r\n    model._set(toSegments, value);\r\n    updateIdForValue(model, refList, index, value);\r\n    return;\r\n  }\r\n  // The same goes for string mutations, since strings are immutable\r\n  if (type === 'stringInsert') {\r\n    var stringIndex = eventArgs[0];\r\n    var stringValue = eventArgs[1];\r\n    model._stringInsert(toSegments, stringIndex, stringValue);\r\n    updateIdForValue(model, refList, index, value);\r\n    return;\r\n  }\r\n  if (type === 'stringRemove') {\r\n    var stringIndex = eventArgs[0];\r\n    var howMany = eventArgs[1];\r\n    model._stringRemove(toSegments, stringIndex, howMany);\r\n    updateIdForValue(model, refList, index, value);\r\n    return;\r\n  }\r\n  if (type === 'insert' || type === 'remove' || type === 'move') {\r\n    throw new Error('Array mutation on child of refList `from`' +\r\n      'should have been dereferenced: ' + segments.join('.'));\r\n  }\r\n}\r\n\r\n/**\r\n * @private\r\n * @param {Model} model\r\n * @param {RefList} refList\r\n * @param {Array} values\r\n */\r\nfunction setNewToValues(model, refList, values, fn) {\r\n  var ids = [];\r\n  for (var i = 0; i < values.length; i++) {\r\n    var value = values[i];\r\n    var id = refList.idByItem(value);\r\n    if (id === void 0 && typeof value === 'object') {\r\n      id = value.id = model.id();\r\n    }\r\n    var toSegments = refList.toSegmentsByItem(value);\r\n    if (id === void 0 || toSegments === void 0) {\r\n      throw new Error('Unable to add item to refList: ' + value);\r\n    }\r\n    if (model._get(toSegments) !== value) {\r\n      model._set(toSegments, value);\r\n    }\r\n    ids.push(id);\r\n  }\r\n  return ids;\r\n}\r\nfunction updateIdForValue(model, refList, index, value) {\r\n  var id = refList.idByItem(value);\r\n  var outSegments = refList.idsSegments.concat(index);\r\n  model._set(outSegments, id);\r\n}\r\n\r\nfunction patchToEvent(type, segments, eventArgs, refList) {\r\n  var toLength = refList.toSegments.length;\r\n  var segmentsLength = segments.length;\r\n  var pass = eventArgs[eventArgs.length - 1];\r\n  var model = refList.model.pass(pass, true);\r\n\r\n  // Mutation on the `to` object itself\r\n  if (segmentsLength === toLength) {\r\n    if (type === 'insert') {\r\n      var insertIndex = eventArgs[0];\r\n      var values = eventArgs[1];\r\n      for (var i = 0; i < values.length; i++) {\r\n        var value = values[i];\r\n        var indices = refList.indicesByItem(value);\r\n        if (!indices) continue;\r\n        for (var j = 0; j < indices.length; j++) {\r\n          var outSegments = refList.fromSegments.concat(indices[j]);\r\n          model._set(outSegments, value);\r\n        }\r\n      }\r\n      return;\r\n    }\r\n\r\n    if (type === 'remove') {\r\n      var removeIndex = eventArgs[0];\r\n      var values = eventArgs[1];\r\n      var howMany = values.length;\r\n      for (var i = removeIndex, len = removeIndex + howMany; i < len; i++) {\r\n        var indices = refList.indicesByItem(values[i]);\r\n        if (!indices) continue;\r\n        for (var j = 0, indicesLen = indices.length; j < indicesLen; j++) {\r\n          var outSegments = refList.fromSegments.concat(indices[j]);\r\n          model._set(outSegments, void 0);\r\n        }\r\n      }\r\n      return;\r\n    }\r\n\r\n    if (type === 'move') {\r\n      // Moving items in the `to` object should have no effect on the output\r\n      return;\r\n    }\r\n  }\r\n\r\n  // Mutation on or above the `to` object\r\n  if (segmentsLength <= toLength) {\r\n    // If the entire `to` object is updated, we need to re-create the\r\n    // entire refList output and apply what is different\r\n    model._setArrayDiff(refList.fromSegments, refList.get());\r\n    return;\r\n  }\r\n\r\n  // Mutation underneath a child of the `to` object. The item will already\r\n  // be up to date, since it is under an object reference. Just re-emit\r\n  if (segmentsLength > toLength + 1) {\r\n    var value = model._get(segments.slice(0, toLength + 1));\r\n    var indices = refList.indicesByItem(value);\r\n    if (!indices) return;\r\n    var remaining = segments.slice(toLength + 1);\r\n    for (var i = 0; i < indices.length; i++) {\r\n      var index = indices[i];\r\n      var dereferenced = refList.fromSegments.concat(index, remaining);\r\n      dereferenced = model._dereference(dereferenced, null, refList);\r\n      eventArgs = eventArgs.slice();\r\n      eventArgs[eventArgs.length - 1] = model._pass;\r\n      model.emit(type, dereferenced, eventArgs);\r\n    }\r\n    return;\r\n  }\r\n\r\n  // Otherwise, mutation of a child of the `to` object\r\n\r\n  // If changing the item itself, it will also have to be re-set on the\r\n  // array created by the refList\r\n  if (type === 'change' || type === 'load' || type === 'unload') {\r\n    var value, previous;\r\n    if (type === 'change') {\r\n      value = eventArgs[0];\r\n      previous = eventArgs[1];\r\n    } else if (type === 'load') {\r\n      value = eventArgs[0];\r\n      previous = void 0;\r\n    } else if (type === 'unload') {\r\n      value = void 0;\r\n      previous = eventArgs[0];\r\n    }\r\n    var newIndices = refList.indicesByItem(value);\r\n    var oldIndices = refList.indicesByItem(previous);\r\n    if (!newIndices && !oldIndices) return;\r\n    if (oldIndices && !equivalentArrays(oldIndices, newIndices)) {\r\n      // The changed item used to refer to some indices, but no longer does\r\n      for (var i = 0; i < oldIndices.length; i++) {\r\n        var outSegments = refList.fromSegments.concat(oldIndices[i]);\r\n        model._set(outSegments, void 0);\r\n      }\r\n    }\r\n    if (newIndices) {\r\n      for (var i = 0; i < newIndices.length; i++) {\r\n        var outSegments = refList.fromSegments.concat(newIndices[i]);\r\n        model._set(outSegments, value);\r\n      }\r\n    }\r\n    return;\r\n  }\r\n\r\n  var value = model._get(segments.slice(0, toLength + 1));\r\n  var indices = refList.indicesByItem(value);\r\n  if (!indices) return;\r\n\r\n  // The same goes for string mutations, since strings are immutable\r\n  if (type === 'stringInsert') {\r\n    var stringIndex = eventArgs[0];\r\n    var value = eventArgs[1];\r\n    for (var i = 0; i < indices.length; i++) {\r\n      var outSegments = refList.fromSegments(indices[i]);\r\n      model._stringInsert(outSegments, stringIndex, value);\r\n    }\r\n    return;\r\n  }\r\n  if (type === 'stringRemove') {\r\n    var stringIndex = eventArgs[0];\r\n    var howMany = eventArgs[1];\r\n    for (var i = 0; i < indices.length; i++) {\r\n      var outSegments = refList.fromSegments(indices[i]);\r\n      model._stringRemove(outSegments, stringIndex, howMany);\r\n    }\r\n    return;\r\n  }\r\n  if (type === 'insert' || type === 'remove' || type === 'move') {\r\n    // Array mutations will have already been updated via an object\r\n    // reference, so only re-emit\r\n    for (var i = 0; i < indices.length; i++) {\r\n      var dereferenced = refList.fromSegments.concat(indices[i]);\r\n      dereferenced = model._dereference(dereferenced, null, refList);\r\n      eventArgs = eventArgs.slice();\r\n      eventArgs[eventArgs.length - 1] = model._pass;\r\n      model.emit(type, dereferenced, eventArgs);\r\n    }\r\n  }\r\n}\r\nfunction equivalentArrays(a, b) {\r\n  if (!a || !b) return false;\r\n  if (a.length !== b.length) return false;\r\n  for (var i = 0; i < a.length; i++) {\r\n    if (a[i] !== b[i]) return false;\r\n  }\r\n  return true;\r\n}\r\n\r\nfunction patchIdsEvent(type, segments, eventArgs, refList) {\r\n  var idsLength = refList.idsSegments.length;\r\n  var segmentsLength = segments.length;\r\n  var pass = eventArgs[eventArgs.length - 1];\r\n  var model = refList.model.pass(pass, true);\r\n\r\n  // An array mutation of the ids should be mirrored with a like change in\r\n  // the output array\r\n  if (segmentsLength === idsLength) {\r\n    if (type === 'insert') {\r\n      var index = eventArgs[0];\r\n      var inserted = eventArgs[1];\r\n      var values = [];\r\n      for (var i = 0; i < inserted.length; i++) {\r\n        var value = refList.itemById(inserted[i]);\r\n        values.push(value);\r\n      }\r\n      model._insert(refList.fromSegments, index, values);\r\n      return;\r\n    }\r\n\r\n    if (type === 'remove') {\r\n      var index = eventArgs[0];\r\n      var howMany = eventArgs[1].length;\r\n      model._remove(refList.fromSegments, index, howMany);\r\n      return;\r\n    }\r\n\r\n    if (type === 'move') {\r\n      var from = eventArgs[0];\r\n      var to = eventArgs[1];\r\n      var howMany = eventArgs[2];\r\n      model._move(refList.fromSegments, from, to, howMany);\r\n      return;\r\n    }\r\n  }\r\n\r\n  // Mutation on the `ids` list itself\r\n  if (segmentsLength <= idsLength) {\r\n    // If the entire `ids` array is updated, we need to re-create the\r\n    // entire refList output and apply what is different\r\n    model._setArrayDiff(refList.fromSegments, refList.get());\r\n    return;\r\n  }\r\n\r\n  // Otherwise, direct mutation of a child in the `ids` object or mutation\r\n  // underneath an item in the `ids` list. Update the item for the appropriate\r\n  // id if it has changed\r\n  var index = segments[idsLength];\r\n  var id = refList.idByIndex(index);\r\n  var item = refList.itemById(id);\r\n  var itemSegments = refList.fromSegments.concat(index);\r\n  if (model._get(itemSegments) !== item) {\r\n    model._set(itemSegments, item);\r\n  }\r\n}\r\n\r\nModel.prototype.refList = function() {\r\n  var from, to, ids, options;\r\n  if (arguments.length === 2) {\r\n    to = arguments[0];\r\n    ids = arguments[1];\r\n  } else if (arguments.length === 3) {\r\n    if (this.isPath(arguments[2])) {\r\n      from = arguments[0];\r\n      to = arguments[1];\r\n      ids = arguments[2];\r\n    } else {\r\n      to = arguments[0];\r\n      ids = arguments[1];\r\n      options = arguments[2];\r\n    }\r\n  } else {\r\n    from = arguments[0];\r\n    to = arguments[1];\r\n    ids = arguments[2];\r\n    options = arguments[3];\r\n  }\r\n  var fromPath = this.path(from);\r\n  var toPath;\r\n  if (Array.isArray(to)) {\r\n    toPath = [];\r\n    for (var i = 0; i < to.length; i++) {\r\n      toPath.push(this.path(to[i]));\r\n    }\r\n  } else {\r\n    toPath = this.path(to);\r\n  }\r\n  var idsPath = this.path(ids);\r\n  var refList = this.root._refLists.add(fromPath, toPath, idsPath, options);\r\n  this.pass({$refList: refList})._setArrayDiff(refList.fromSegments, refList.get());\r\n  return this.scope(fromPath);\r\n};\r\n\r\nfunction RefList(model, from, to, ids, options) {\r\n  this.model = model && model.pass({$refList: this});\r\n  this.from = from;\r\n  this.to = to;\r\n  this.ids = ids;\r\n  this.fromSegments = from && from.split('.');\r\n  this.toSegments = to && to.split('.');\r\n  this.idsSegments = ids && ids.split('.');\r\n  this.options = options;\r\n  this.deleteRemoved = options && options.deleteRemoved;\r\n}\r\n\r\n// The default implementation assumes that the ids array is a flat list of\r\n// keys on the to object. Ideally, this mapping could be customized via\r\n// inheriting from RefList and overriding these methods without having to\r\n// modify the above event handling code.\r\n// \r\n// In the default refList implementation, `key` and `id` are equal.\r\n// \r\n// Terms in the below methods:\r\n//   `item`  - Object on the `to` path, which gets mirrored on the `from` path\r\n//   `key`   - The property under `to` at which an item is located\r\n//   `id`    - String or object in the array at the `ids` path\r\n//   `index` - The index of an id, which corresponds to an index on `from`\r\nRefList.prototype.get = function() {\r\n  var ids = this.model._get(this.idsSegments);\r\n  if (!ids) return [];\r\n  var items = this.model._get(this.toSegments);\r\n  var out = [];\r\n  for (var i = 0; i < ids.length; i++) {\r\n    var key = ids[i];\r\n    out.push(items && items[key]);\r\n  }\r\n  return out;\r\n};\r\nRefList.prototype.dereference = function(segments, i) {\r\n  var remaining = segments.slice(i + 1);\r\n  var key = this.idByIndex(remaining[0]);\r\n  if (key == null) return [];\r\n  remaining[0] = key;\r\n  return this.toSegments.concat(remaining);\r\n};\r\nRefList.prototype.toSegmentsByItem = function(item) {\r\n  var key = this.idByItem(item);\r\n  if (key === void 0) return;\r\n  return this.toSegments.concat(key);\r\n};\r\nRefList.prototype.idByItem = function(item) {\r\n  if (item && item.id) return item.id;\r\n  var items = this.model._get(this.toSegments);\r\n  for (var key in items) {\r\n    if (item === items[key]) return key;\r\n  }\r\n};\r\nRefList.prototype.indicesByItem = function(item) {\r\n  var id = this.idByItem(item);\r\n  var ids = this.model._get(this.idsSegments);\r\n  if (!ids) return;\r\n  var indices;\r\n  var index = -1;\r\n  while (true) {\r\n    index = ids.indexOf(id, index + 1);\r\n    if (index === -1) break;\r\n    if (indices) {\r\n      indices.push(index);\r\n    } else {\r\n      indices = [index];\r\n    }\r\n  }\r\n  return indices;\r\n};\r\nRefList.prototype.itemById = function(id) {\r\n  return this.model._get(this.toSegments.concat(id));\r\n};\r\nRefList.prototype.idByIndex = function(index) {\r\n  return this.model._get(this.idsSegments.concat(index));\r\n};\r\nRefList.prototype.onMutation = function(type, segments, eventArgs) {\r\n  if (util.mayImpact(this.toSegments, segments)) {\r\n    patchToEvent(type, segments, eventArgs, this);\r\n  } else if (util.mayImpact(this.idsSegments, segments)) {\r\n    patchIdsEvent(type, segments, eventArgs, this);\r\n  } else if (util.mayImpact(this.fromSegments, segments)) {\r\n    patchFromEvent(type, segments, eventArgs, this);\r\n  }\r\n};\r\n\r\nfunction FromMap() {}\r\n\r\nfunction RefLists(model) {\r\n  this.model = model;\r\n  this.fromMap = new FromMap();\r\n}\r\n\r\nRefLists.prototype.add = function(from, to, ids, options) {\r\n  var refList = new RefList(this.model, from, to, ids, options);\r\n  this.fromMap[from] = refList;\r\n  return refList;\r\n};\r\n\r\nRefLists.prototype.remove = function(from) {\r\n  var refList = this.fromMap[from];\r\n  delete this.fromMap[from];\r\n  return refList;\r\n};\r\n\r\nRefLists.prototype.toJSON = function() {\r\n  var out = [];\r\n  for (var from in this.fromMap) {\r\n    var refList = this.fromMap[from];\r\n    out.push([refList.from, refList.to, refList.ids, refList.options]);\r\n  }\r\n  return out;\r\n};\r\n","var util = require('../util');\r\nvar Model = require('./Model');\r\nvar arrayDiff = require('arraydiff');\r\nvar deepEqual = util.deepEqual;\r\n\r\nModel.prototype.setDiff = function() {\r\n  var subpath, value, options, cb;\r\n  if (arguments.length === 1) {\r\n    value = arguments[0];\r\n  } else if (arguments.length === 2) {\r\n    subpath = arguments[0];\r\n    value = arguments[1];\r\n  } else if (arguments.length === 3) {\r\n    subpath = arguments[0];\r\n    value = arguments[1];\r\n    if (typeof arguments[2] === 'function') {\r\n      cb = arguments[2];\r\n    } else {\r\n      options = arguments[2];\r\n    }\r\n  } else {\r\n    subpath = arguments[0];\r\n    value = arguments[1];\r\n    options = arguments[2];\r\n    cb = arguments[3];\r\n  }\r\n  var segments = this._splitPath(subpath);\r\n  return this._setDiff(segments, value, options, cb);\r\n};\r\nModel.prototype.setDiffDeep = function() {\r\n  var subpath, value, options, cb;\r\n  if (arguments.length === 1) {\r\n    value = arguments[0];\r\n  } else if (arguments.length === 2) {\r\n    subpath = arguments[0];\r\n    value = arguments[1];\r\n  } else if (arguments.length === 3) {\r\n    subpath = arguments[0];\r\n    value = arguments[1];\r\n    if (typeof arguments[2] === 'function') {\r\n      cb = arguments[2];\r\n    } else {\r\n      options = arguments[2];\r\n    }\r\n  } else {\r\n    subpath = arguments[0];\r\n    value = arguments[1];\r\n    options = arguments[2];\r\n    cb = arguments[3];\r\n  }\r\n  var segments = this._splitPath(subpath);\r\n  return this._setDiffDeep(segments, value, options, cb);\r\n};\r\nModel.prototype._setDiffDeep = function(segments, value, options, cb) {\r\n  if (options) {\r\n    options.equal = deepEqual;\r\n  } else {\r\n    options = {equal: deepEqual};\r\n  }\r\n  return this._setDiff(segments, value, options, cb);\r\n};\r\nModel.prototype._setDiff = function(segments, value, options, cb) {\r\n  var equalFn = (options && options.equal) || util.equal;\r\n  var before = this._get(segments);\r\n  cb = this.wrapCallback(cb);\r\n  if (equalFn(before, value)) return cb();\r\n\r\n  var group = util.asyncGroup(cb);\r\n  var finished = group();\r\n  doDiff(this, segments, before, value, equalFn, group);\r\n  finished();\r\n};\r\nfunction doDiff(model, segments, before, after, equalFn, group) {\r\n  if (typeof before !== 'object' || !before ||\r\n      typeof after !== 'object' || !after) {\r\n    // Set the entire value if not diffable\r\n    model._set(segments, after, group());\r\n    return;\r\n  }\r\n  if (Array.isArray(before) && Array.isArray(after)) {\r\n    var diff = arrayDiff(before, after, equalFn);\r\n    if (!diff.length) return;\r\n    // If the only change is a single item replacement, diff the item instead\r\n    if (\r\n      diff.length === 2 &&\r\n      diff[0].index === diff[1].index &&\r\n      diff[0] instanceof arrayDiff.RemoveDiff &&\r\n      diff[0].howMany === 1 &&\r\n      diff[1] instanceof arrayDiff.InsertDiff &&\r\n      diff[1].values.length === 1\r\n    ) {\r\n      var index = diff[0].index;\r\n      var itemSegments = segments.concat(index);\r\n      doDiff(model, itemSegments, before[index], after[index], equalFn, group);\r\n      return;\r\n    }\r\n    model._applyArrayDiff(segments, diff, group());\r\n    return;\r\n  }\r\n\r\n  // Delete keys that were in before but not after\r\n  for (var key in before) {\r\n    if (key in after) continue;\r\n    var itemSegments = segments.concat(key);\r\n    model._del(itemSegments, group());\r\n  }\r\n\r\n  // Diff each property in after\r\n  for (var key in after) {\r\n    if (equalFn(before[key], after[key])) continue;\r\n    var itemSegments = segments.concat(key);\r\n    doDiff(model, itemSegments, before[key], after[key], equalFn, group);\r\n  }\r\n}\r\n\r\nModel.prototype.setArrayDiff = function() {\r\n  var subpath, value, options, cb;\r\n  if (arguments.length === 1) {\r\n    value = arguments[0];\r\n  } else if (arguments.length === 2) {\r\n    subpath = arguments[0];\r\n    value = arguments[1];\r\n  } else if (arguments.length === 3) {\r\n    subpath = arguments[0];\r\n    value = arguments[1];\r\n    if (typeof arguments[2] === 'function') {\r\n      cb = arguments[2];\r\n    } else {\r\n      options = arguments[2];\r\n    }\r\n  } else {\r\n    subpath = arguments[0];\r\n    value = arguments[1];\r\n    options = arguments[2];\r\n    cb = arguments[3];\r\n  }\r\n  var segments = this._splitPath(subpath);\r\n  return this._setArrayDiff(segments, value, options, cb);\r\n};\r\nModel.prototype.setArrayDiffDeep = function() {\r\n  var subpath, value, options, cb;\r\n  if (arguments.length === 1) {\r\n    value = arguments[0];\r\n  } else if (arguments.length === 2) {\r\n    subpath = arguments[0];\r\n    value = arguments[1];\r\n  } else if (arguments.length === 3) {\r\n    subpath = arguments[0];\r\n    value = arguments[1];\r\n    if (typeof arguments[2] === 'function') {\r\n      cb = arguments[2];\r\n    } else {\r\n      options = arguments[2];\r\n    }\r\n  } else {\r\n    subpath = arguments[0];\r\n    value = arguments[1];\r\n    options = arguments[2];\r\n    cb = arguments[3];\r\n  }\r\n  var segments = this._splitPath(subpath);\r\n  return this._setArrayDiffDeep(segments, value, options, cb);\r\n};\r\nModel.prototype._setArrayDiffDeep = function(segments, value, options, cb) {\r\n  if (options) {\r\n    options.equal = deepEqual;\r\n  } else {\r\n    options = {equal: deepEqual};\r\n  }\r\n  return this._setArrayDiff(segments, value, options, cb);\r\n};\r\nModel.prototype._setArrayDiff = function(segments, value, options, cb) {\r\n  var before = this._get(segments);\r\n  if (before === value) return this.wrapCallback(cb)();\r\n  if (!Array.isArray(before) || !Array.isArray(value)) {\r\n    this._set(segments, value, cb);\r\n    return;\r\n  }\r\n  var equalFn = options && options.equal;\r\n  var diff = arrayDiff(before, value, equalFn);\r\n  this._applyArrayDiff(segments, diff, cb);\r\n};\r\nModel.prototype._applyArrayDiff = function(segments, diff, cb) {\r\n  if (!diff.length) return this.wrapCallback(cb)();\r\n  segments = this._dereference(segments);\r\n  var model = this;\r\n  function applyArrayDiff(doc, docSegments, fnCb) {\r\n    var group = util.asyncGroup(fnCb);\r\n    for (var i = 0, len = diff.length; i < len; i++) {\r\n      var item = diff[i];\r\n      if (item instanceof arrayDiff.InsertDiff) {\r\n        // Insert\r\n        doc.insert(docSegments, item.index, item.values, group());\r\n        model.emit('insert', segments, [item.index, item.values, model._pass]);\r\n      } else if (item instanceof arrayDiff.RemoveDiff) {\r\n        // Remove\r\n        var removed = doc.remove(docSegments, item.index, item.howMany, group());\r\n        model.emit('remove', segments, [item.index, removed, model._pass]);\r\n      } else if (item instanceof arrayDiff.MoveDiff) {\r\n        // Move\r\n        var moved = doc.move(docSegments, item.from, item.to, item.howMany, group());\r\n        model.emit('move', segments, [item.from, item.to, moved.length, model._pass]);\r\n      }\r\n    }\r\n  }\r\n  return this._mutate(segments, applyArrayDiff, cb);\r\n};\r\n","(function (process){\nvar util = require('../util');\r\nvar Model = require('./Model');\r\nvar Query = require('./Query');\r\n\r\nModel.INITS.push(function(model, options) {\r\n  model.root.fetchOnly = options.fetchOnly;\r\n  model.root.unloadDelay = options.unloadDelay || (util.isServer) ? 0 : 1000;\r\n\r\n  // Keeps track of the count of fetches (that haven't been undone by an\r\n  // unfetch) per doc. Maps doc id to the fetch count.\r\n  model.root._fetchedDocs = new FetchedDocs();\r\n\r\n  // Keeps track of the count of subscribes (that haven't been undone by an\r\n  // unsubscribe) per doc. Maps doc id to the subscribe count.\r\n  model.root._subscribedDocs = new SubscribedDocs();\r\n\r\n  // Maps doc path to doc version\r\n  model.root._loadVersions = new LoadVersions();\r\n});\r\n\r\nfunction FetchedDocs() {}\r\nfunction SubscribedDocs() {}\r\nfunction LoadVersions() {}\r\n\r\nModel.prototype.fetch = function() {\r\n  this._forSubscribable(arguments, 'fetch');\r\n  return this;\r\n};\r\nModel.prototype.unfetch = function() {\r\n  this._forSubscribable(arguments, 'unfetch');\r\n  return this;\r\n};\r\nModel.prototype.subscribe = function() {\r\n  this._forSubscribable(arguments, 'subscribe');\r\n  return this;\r\n};\r\nModel.prototype.unsubscribe = function() {\r\n  this._forSubscribable(arguments, 'unsubscribe');\r\n  return this;\r\n};\r\n\r\nModel.prototype._forSubscribable = function(argumentsObject, method) {\r\n  var args, cb;\r\n  if (!argumentsObject.length) {\r\n    // Use this model's scope if no arguments\r\n    args = [null];\r\n  } else if (typeof argumentsObject[0] === 'function') {\r\n    // Use this model's scope if the first argument is a callback\r\n    args = [null];\r\n    cb = argumentsObject[0];\r\n  } else if (Array.isArray(argumentsObject[0])) {\r\n    // Items can be passed in as an array\r\n    args = argumentsObject[0];\r\n    cb = argumentsObject[1];\r\n  } else {\r\n    // Or as multiple arguments\r\n    args = Array.prototype.slice.call(argumentsObject);\r\n    var last = args[args.length - 1];\r\n    if (typeof last === 'function') cb = args.pop();\r\n  }\r\n\r\n  var group = util.asyncGroup(this.wrapCallback(cb));\r\n  var finished = group();\r\n  var docMethod = method + 'Doc';\r\n\r\n  for (var i = 0; i < args.length; i++) {\r\n    var item = args[i];\r\n    if (item instanceof Query) {\r\n      item[method](group());\r\n    } else {\r\n      var segments = this._dereference(this._splitPath(item));\r\n      if (segments.length === 2) {\r\n        // Do the appropriate method for a single document.\r\n        this[docMethod](segments[0], segments[1], group());\r\n      } else if (segments.length === 1) {\r\n        // Make a query to an entire collection.\r\n        var query = this.query(segments[0], {});\r\n        query[method](group());\r\n      } else if (segments.length === 0) {\r\n        group()(new Error('No path specified for ' + method));\r\n      } else {\r\n        group()(new Error('Cannot ' + method + ' to a path within a document: ' +\r\n          segments.join('.')));\r\n      }\r\n    }\r\n  }\r\n  process.nextTick(finished);\r\n};\r\n\r\n/**\r\n * @param {String}\r\n * @param {String} id\r\n * @param {Function} cb(err)\r\n * @param {Boolean} alreadyLoaded\r\n */\r\nModel.prototype.fetchDoc = function(collectionName, id, cb, alreadyLoaded) {\r\n  cb = this.wrapCallback(cb);\r\n\r\n  // Maintain a count of fetches so that we can unload the document when\r\n  // there are no remaining fetches or subscribes for that document\r\n  var path = collectionName + '.' + id;\r\n  this._context.fetchDoc(path, this._pass);\r\n  this.root._fetchedDocs[path] = (this.root._fetchedDocs[path] || 0) + 1;\r\n\r\n  var model = this;\r\n  var doc = this.getOrCreateDoc(collectionName, id);\r\n  if (alreadyLoaded) {\r\n    fetchDocCallback();\r\n  } else {\r\n    doc.shareDoc.fetch(fetchDocCallback);\r\n  }\r\n  function fetchDocCallback(err) {\r\n    if (err) return cb(err);\r\n    if (doc.shareDoc.version !== model.root._loadVersions[path]) {\r\n      model.root._loadVersions[path] = doc.shareDoc.version;\r\n      doc._updateCollectionData();\r\n      model.emit('load', [collectionName, id], [doc.get(), model._pass]);\r\n    }\r\n    cb();\r\n  }\r\n};\r\n\r\n/**\r\n * @param {String} collectionName\r\n * @param {String} id of the document we want to subscribe to\r\n * @param {Function} cb(err)\r\n */\r\nModel.prototype.subscribeDoc = function(collectionName, id, cb) {\r\n  cb = this.wrapCallback(cb);\r\n\r\n  var path = collectionName + '.' + id;\r\n  this._context.subscribeDoc(path, this._pass);\r\n  var count = this.root._subscribedDocs[path] = (this.root._subscribedDocs[path] || 0) + 1;\r\n  // Already requested a subscribe, so just return\r\n  if (count > 1) return cb();\r\n\r\n  // Subscribe if currently unsubscribed\r\n  var model = this;\r\n  var doc = this.getOrCreateDoc(collectionName, id);\r\n  if (this.root.fetchOnly) {\r\n    // Only fetch if the document isn't already loaded\r\n    if (doc.get() === void 0) {\r\n      doc.shareDoc.fetch(subscribeDocCallback);\r\n    } else {\r\n      subscribeDocCallback();\r\n    }\r\n  } else {\r\n    doc.shareDoc.subscribe(subscribeDocCallback);\r\n  }\r\n  function subscribeDocCallback(err) {\r\n    if (err) return cb(err);\r\n    if (!doc.createdLocally && doc.shareDoc.version !== model.root._loadVersions[path]) {\r\n      model.root._loadVersions[path] = doc.shareDoc.version;\r\n      doc._updateCollectionData();\r\n      model.emit('load', [collectionName, id], [doc.get(), model._pass]);\r\n    }\r\n    cb();\r\n  }\r\n};\r\n\r\nModel.prototype.unfetchDoc = function(collectionName, id, cb) {\r\n  cb = this.wrapCallback(cb);\r\n  var path = collectionName + '.' + id;\r\n  this._context.unfetchDoc(path, this._pass);\r\n  var fetchedDocs = this.root._fetchedDocs;\r\n\r\n  // No effect if the document has no fetch count\r\n  if (!fetchedDocs[path]) return cb();\r\n\r\n  var model = this;\r\n  if (this.root.unloadDelay && !this._pass.$query) {\r\n    setTimeout(finishUnfetchDoc, this.root.unloadDelay);\r\n  } else {\r\n    finishUnfetchDoc();\r\n  }\r\n  function finishUnfetchDoc() {\r\n    var count = --fetchedDocs[path];\r\n    if (count) return cb(null, count);\r\n    delete fetchedDocs[path];\r\n    model._maybeUnloadDoc(collectionName, id, path);\r\n    cb(null, 0);\r\n  }\r\n};\r\n\r\nModel.prototype.unsubscribeDoc = function(collectionName, id, cb) {\r\n  cb = this.wrapCallback(cb);\r\n  var path = collectionName + '.' + id;\r\n  this._context.unsubscribeDoc(path, this._pass);\r\n  var subscribedDocs = this.root._subscribedDocs;\r\n\r\n  // No effect if the document is not currently subscribed\r\n  if (!subscribedDocs[path]) return cb();\r\n\r\n  var model = this;\r\n  if (this.root.unloadDelay && !this._pass.$query) {\r\n    setTimeout(finishUnsubscribeDoc, this.root.unloadDelay);\r\n  } else {\r\n    finishUnsubscribeDoc();\r\n  }\r\n  function finishUnsubscribeDoc() {\r\n    var count = --subscribedDocs[path];\r\n    // If there are more remaining subscriptions, only decrement the count\r\n    // and callback with how many subscriptions are remaining\r\n    if (count) return cb(null, count);\r\n\r\n    // If there is only one remaining subscription, actually unsubscribe\r\n    delete subscribedDocs[path];\r\n    if (model.root.fetchOnly) {\r\n      unsubscribeDocCallback();\r\n    } else {\r\n      var shareDoc = model.root.shareConnection.get(collectionName, id);\r\n      if (!shareDoc) {\r\n        return cb(new Error('Share document not found for: ' + path));\r\n      }\r\n      shareDoc.unsubscribe(unsubscribeDocCallback);\r\n    }\r\n  }\r\n  function unsubscribeDocCallback(err) {\r\n    model._maybeUnloadDoc(collectionName, id, path);\r\n    if (err) return cb(err);\r\n    cb(null, 0);\r\n  }\r\n};\r\n\r\n/**\r\n * Removes the document from the local model if the model no longer has any\r\n * remaining fetches or subscribes on path.\r\n * Called from Model.prototype.unfetchDoc and Model.prototype.unsubscribeDoc as\r\n * part of attempted cleanup.\r\n * @param {String} collectionName\r\n * @param {String} id\r\n * @param {String} path\r\n */\r\nModel.prototype._maybeUnloadDoc = function(collectionName, id, path) {\r\n  var doc = this.getDoc(collectionName, id);\r\n  if (!doc) return;\r\n  // Remove the document from the local model if it no longer has any\r\n  // remaining fetches or subscribes\r\n  if (this.root._fetchedDocs[path] || this.root._subscribedDocs[path]) return;\r\n  var previous = doc.get();\r\n  this.root.collections[collectionName].remove(id);\r\n\r\n  // TODO: There is a bug in ShareJS where a race condition between subscribe\r\n  // and destroying the document data. For now, not cleaning up ShareJS docs\r\n  // if (doc.shareDoc) doc.shareDoc.destroy();\r\n\r\n  delete this.root._loadVersions[path];\r\n  this.emit('unload', [collectionName, id], [previous, this._pass]);\r\n};\r\n\n}).call(this,require(\"fH0/fz\"))","var Model = require('./Model');\r\n\r\nModel.prototype.unbundle = function(data) {\r\n  // Re-create and subscribe queries; re-create documents associated with queries\r\n  this._initQueries(data.queries);\r\n\r\n  // Re-create other documents\r\n  for (var collectionName in data.collections) {\r\n    var collection = data.collections[collectionName];\r\n    for (var id in collection) {\r\n      var doc = this.getOrCreateDoc(collectionName, id, collection[id]);\r\n      if (doc.shareDoc) {\r\n        this._loadVersions[collectionName + '.' + id] = doc.shareDoc.version;\r\n      }\r\n    }\r\n  }\r\n\r\n  for (var contextId in data.contexts) {\r\n    var contextData = data.contexts[contextId];\r\n    var contextModel = this.context(contextId);\r\n    // Re-init fetchedDocs counts\r\n    for (var path in contextData.fetchedDocs) {\r\n      contextModel._context.fetchDoc(path, contextModel._pass);\r\n      this._fetchedDocs[path] = (this._fetchedDocs[path] || 0) +\r\n        contextData.fetchedDocs[path];\r\n    }\r\n    // Subscribe to document subscriptions\r\n    for (var path in contextData.subscribedDocs) {\r\n      var subscribed = contextData.subscribedDocs[path];\r\n      while (subscribed--) {\r\n        contextModel.subscribe(path);\r\n      }\r\n    }\r\n  }\r\n\r\n  // Re-create refs\r\n  for (var i = 0; i < data.refs.length; i++) {\r\n    var item = data.refs[i];\r\n    this.ref(item[0], item[1]);\r\n  }\r\n  // Re-create refLists\r\n  for (var i = 0; i < data.refLists.length; i++) {\r\n    var item = data.refLists[i];\r\n    this.refList(item[0], item[1], item[2], item[3]);\r\n  }\r\n  // Re-create fns\r\n  for (var i = 0; i < data.fns.length; i++) {\r\n    var item = data.fns[i];\r\n    this.start.apply(this, item);\r\n  }\r\n  // Re-create filters\r\n  for (var i = 0; i < data.filters.length; i++) {\r\n    var item = data.filters[i];\r\n    var filter = this._filters.add(item[1], item[2], item[3], item[4]);\r\n    filter.ref(item[0]);\r\n  }\r\n};\r\n","var EventEmitter = require('events').EventEmitter;\r\nvar Model = require('./Model');\r\nvar util = require('./util');\r\n\r\nmodule.exports = Racer;\r\n\r\nfunction Racer() {\r\n  EventEmitter.call(this);\r\n}\r\n\r\nutil.mergeInto(Racer.prototype, EventEmitter.prototype);\r\n\r\n// Make classes accessible for use by plugins and tests\r\nRacer.prototype.Model = Model;\r\nRacer.prototype.util = util;\r\n\r\n// Support plugins on racer instances\r\nRacer.prototype.use = util.use;\r\nRacer.prototype.serverUse = util.serverUse;\r\n\r\nRacer.prototype.createModel = function(data) {\r\n  var model = new Model();\r\n  if (data) {\r\n    model.createConnection(data);\r\n    model.unbundle(data);\r\n  }\r\n  return model;\r\n};\r\n\r\nutil.serverRequire(module, './Racer.server');\r\n","var Racer = require('./Racer');\r\nmodule.exports = new Racer();\r\n","(function (process){\nvar deepIs = require('deep-is');\r\n\r\nvar isServer = process.title !== 'browser';\r\nexports.isServer = isServer;\r\n\r\nexports.asyncGroup = asyncGroup;\r\nexports.castSegments = castSegments;\r\nexports.contains = contains;\r\nexports.copy = copy;\r\nexports.copyObject = copyObject;\r\nexports.deepCopy = deepCopy;\r\nexports.deepEqual = deepIs;\r\nexports.equal = equal;\r\nexports.equalsNaN = equalsNaN;\r\nexports.isArrayIndex = isArrayIndex;\r\nexports.lookup = lookup;\r\nexports.mergeInto = mergeInto;\r\nexports.mayImpact = mayImpact;\r\nexports.mayImpactAny = mayImpactAny;\r\nexports.serverRequire = serverRequire;\r\nexports.serverUse = serverUse;\r\nexports.use = use;\r\n\r\nfunction asyncGroup(cb) {\r\n  var group = new AsyncGroup(cb);\r\n  return function asyncGroupAdd() {\r\n    return group.add();\r\n  };\r\n}\r\n\r\n/**\r\n * @constructor\r\n * @param {Function} cb(err)\r\n */\r\nfunction AsyncGroup(cb) {\r\n  this.cb = cb;\r\n  this.isDone = false;\r\n  this.count = 0;\r\n}\r\nAsyncGroup.prototype.add = function() {\r\n  this.count++;\r\n  var self = this;\r\n  return function(err) {\r\n    self.count--;\r\n    if (self.isDone) return;\r\n    if (err) {\r\n      self.isDone = true;\r\n      self.cb(err);\r\n      return;\r\n    }\r\n    if (self.count > 0) return;\r\n    self.isDone = true;\r\n    self.cb();\r\n  };\r\n};\r\n\r\nfunction castSegments(segments) {\r\n  // Cast number path segments from strings to numbers\r\n  for (var i = segments.length; i--;) {\r\n    var segment = segments[i];\r\n    if (typeof segment === 'string' && isArrayIndex(segment)) {\r\n      segments[i] = +segment;\r\n    }\r\n  }\r\n  return segments;\r\n}\r\n\r\nfunction contains(segments, testSegments) {\r\n  for (var i = 0; i < segments.length; i++) {\r\n    if (segments[i] !== testSegments[i]) return false;\r\n  }\r\n  return true;\r\n}\r\n\r\nfunction copy(value) {\r\n  if (value instanceof Date) return new Date(value);\r\n  if (typeof value === 'object') {\r\n    if (value === null) return null;\r\n    if (Array.isArray(value)) return value.slice();\r\n    return copyObject(value);\r\n  }\r\n  return value;\r\n}\r\n\r\nfunction copyObject(object) {\r\n  var out = new object.constructor();\r\n  for (var key in object) {\r\n    if (object.hasOwnProperty(key)) {\r\n      out[key] = object[key];\r\n    }\r\n  }\r\n  return out;\r\n}\r\n\r\nfunction deepCopy(value) {\r\n  if (value instanceof Date) return new Date(value);\r\n  if (typeof value === 'object') {\r\n    if (value === null) return null;\r\n    if (Array.isArray(value)) {\r\n      var array = [];\r\n      for (var i = value.length; i--;) {\r\n        array[i] = deepCopy(value[i]);\r\n      }\r\n      return array;\r\n    }\r\n    var object = new value.constructor();\r\n    for (var key in value) {\r\n      if (value.hasOwnProperty(key)) {\r\n        object[key] = deepCopy(value[key]);\r\n      }\r\n    }\r\n    return object;\r\n  }\r\n  return value;\r\n}\r\n\r\nfunction equal(a, b) {\r\n  return (a === b) || (equalsNaN(a) && equalsNaN(b));\r\n}\r\n\r\nfunction equalsNaN(x) {\r\n  return x !== x;\r\n}\r\n\r\nfunction isArrayIndex(segment) {\r\n  return (/^[0-9]+$/).test(segment);\r\n}\r\n\r\nfunction lookup(segments, value) {\r\n  if (!segments) return value;\r\n\r\n  for (var i = 0, len = segments.length; i < len; i++) {\r\n    if (value == null) return value;\r\n    value = value[segments[i]];\r\n  }\r\n  return value;\r\n}\r\n\r\nfunction mayImpactAny(segmentsList, testSegments) {\r\n  for (var i = 0, len = segmentsList.length; i < len; i++) {\r\n    if (mayImpact(segmentsList[i], testSegments)) return true;\r\n  }\r\n  return false;\r\n}\r\n\r\nfunction mayImpact(segments, testSegments) {\r\n  var len = Math.min(segments.length, testSegments.length);\r\n  for (var i = 0; i < len; i++) {\r\n    if (segments[i] !== testSegments[i]) return false;\r\n  }\r\n  return true;\r\n}\r\n\r\nfunction mergeInto(to, from) {\r\n  for (var key in from) {\r\n    to[key] = from[key];\r\n  }\r\n  return to;\r\n}\r\n\r\nfunction serverRequire(module, id) {\r\n  if (!isServer) return;\r\n  return module.require(id);\r\n}\r\n\r\nfunction serverUse(module, id, options) {\r\n  if (!isServer) return this;\r\n  var plugin = module.require(id);\r\n  return this.use(plugin, options);\r\n}\r\n\r\nfunction use(plugin, options) {\r\n  // Don't include a plugin more than once\r\n  var plugins = this._plugins || (this._plugins = []);\r\n  if (plugins.indexOf(plugin) === -1) {\r\n    plugins.push(plugin);\r\n    plugin(this, options);\r\n  }\r\n  return this;\r\n}\r\n\n}).call(this,require(\"fH0/fz\"))","module.exports = arrayDiff;\n\n// Based on some rough benchmarking, this algorithm is about O(2n) worst case,\n// and it can compute diffs on random arrays of length 1024 in about 34ms,\n// though just a few changes on an array of length 1024 takes about 0.5ms\n\narrayDiff.InsertDiff = InsertDiff;\narrayDiff.RemoveDiff = RemoveDiff;\narrayDiff.MoveDiff = MoveDiff;\n\nfunction InsertDiff(index, values) {\n  this.index = index;\n  this.values = values;\n}\nInsertDiff.prototype.type = 'insert';\nInsertDiff.prototype.toJSON = function() {\n  return {\n    type: this.type\n  , index: this.index\n  , values: this.values\n  };\n};\n\nfunction RemoveDiff(index, howMany) {\n  this.index = index;\n  this.howMany = howMany;\n}\nRemoveDiff.prototype.type = 'remove';\nRemoveDiff.prototype.toJSON = function() {\n  return {\n    type: this.type\n  , index: this.index\n  , howMany: this.howMany\n  };\n};\n\nfunction MoveDiff(from, to, howMany) {\n  this.from = from;\n  this.to = to;\n  this.howMany = howMany;\n}\nMoveDiff.prototype.type = 'move';\nMoveDiff.prototype.toJSON = function() {\n  return {\n    type: this.type\n  , from: this.from\n  , to: this.to\n  , howMany: this.howMany\n  };\n};\n\nfunction strictEqual(a, b) {\n  return a === b;\n}\n\nfunction arrayDiff(before, after, equalFn) {\n  if (!equalFn) equalFn = strictEqual;\n\n  // Find all items in both the before and after array, and represent them\n  // as moves. Many of these \"moves\" may end up being discarded in the last\n  // pass if they are from an index to the same index, but we don't know this\n  // up front, since we haven't yet offset the indices.\n  // \n  // Also keep a map of all the indicies accounted for in the before and after\n  // arrays. These maps are used next to create insert and remove diffs.\n  var beforeLength = before.length;\n  var afterLength = after.length;\n  var moves = [];\n  var beforeMarked = {};\n  var afterMarked = {};\n  for (var beforeIndex = 0; beforeIndex < beforeLength; beforeIndex++) {\n    var beforeItem = before[beforeIndex];\n    for (var afterIndex = 0; afterIndex < afterLength; afterIndex++) {\n      if (afterMarked[afterIndex]) continue;\n      if (!equalFn(beforeItem, after[afterIndex])) continue;\n      var from = beforeIndex;\n      var to = afterIndex;\n      var howMany = 0;\n      do {\n        beforeMarked[beforeIndex++] = afterMarked[afterIndex++] = true;\n        howMany++;\n      } while (\n        beforeIndex < beforeLength &&\n        afterIndex < afterLength &&\n        equalFn(before[beforeIndex], after[afterIndex]) &&\n        !afterMarked[afterIndex]\n      );\n      moves.push(new MoveDiff(from, to, howMany));\n      beforeIndex--;\n      break;\n    }\n  }\n\n  // Create a remove for all of the items in the before array that were\n  // not marked as being matched in the after array as well\n  var removes = [];\n  for (beforeIndex = 0; beforeIndex < beforeLength;) {\n    if (beforeMarked[beforeIndex]) {\n      beforeIndex++;\n      continue;\n    }\n    var index = beforeIndex;\n    var howMany = 0;\n    while (beforeIndex < beforeLength && !beforeMarked[beforeIndex++]) {\n      howMany++;\n    }\n    removes.push(new RemoveDiff(index, howMany));\n  }\n\n  // Create an insert for all of the items in the after array that were\n  // not marked as being matched in the before array as well\n  var inserts = [];\n  for (afterIndex = 0; afterIndex < afterLength;) {\n    if (afterMarked[afterIndex]) {\n      afterIndex++;\n      continue;\n    }\n    var index = afterIndex;\n    var howMany = 0;\n    while (afterIndex < afterLength && !afterMarked[afterIndex++]) {\n      howMany++;\n    }\n    var values = after.slice(index, index + howMany);\n    inserts.push(new InsertDiff(index, values));\n  }\n\n  var insertsLength = inserts.length;\n  var removesLength = removes.length;\n  var movesLength = moves.length;\n  var i, j;\n\n  // Offset subsequent removes and moves by removes\n  var count = 0;\n  for (i = 0; i < removesLength; i++) {\n    var remove = removes[i];\n    remove.index -= count;\n    count += remove.howMany;\n    for (j = 0; j < movesLength; j++) {\n      var move = moves[j];\n      if (move.from >= remove.index) move.from -= remove.howMany;\n    }\n  }\n\n  // Offset moves by inserts\n  for (i = insertsLength; i--;) {\n    var insert = inserts[i];\n    var howMany = insert.values.length;\n    for (j = movesLength; j--;) {\n      var move = moves[j];\n      if (move.to >= insert.index) move.to -= howMany;\n    }\n  }\n\n  // Offset the to of moves by later moves\n  for (i = movesLength; i-- > 1;) {\n    var move = moves[i];\n    if (move.to === move.from) continue;\n    for (j = i; j--;) {\n      var earlier = moves[j];\n      if (earlier.to >= move.to) earlier.to -= move.howMany;\n      if (earlier.to >= move.from) earlier.to += move.howMany;\n    }\n  }\n\n  // Only output moves that end up having an effect after offsetting\n  var outputMoves = [];\n\n  // Offset the from of moves by earlier moves\n  for (i = 0; i < movesLength; i++) {\n    var move = moves[i];\n    if (move.to === move.from) continue;\n    outputMoves.push(move);\n    for (j = i + 1; j < movesLength; j++) {\n      var later = moves[j];\n      if (later.from >= move.from) later.from -= move.howMany;\n      if (later.from >= move.to) later.from += move.howMany;\n    }\n  }\n\n  return removes.concat(outputMoves, inserts);\n}\n","var pSlice = Array.prototype.slice;\nvar Object_keys = typeof Object.keys === 'function'\n    ? Object.keys\n    : function (obj) {\n        var keys = [];\n        for (var key in obj) keys.push(key);\n        return keys;\n    }\n;\n\nvar deepEqual = module.exports = function (actual, expected) {\n  // enforce Object.is +0 !== -0\n  if (actual === 0 && expected === 0) {\n    return areZerosEqual(actual, expected);\n\n  // 7.1. All identical values are equivalent, as determined by ===.\n  } else if (actual === expected) {\n    return true;\n\n  } else if (actual instanceof Date && expected instanceof Date) {\n    return actual.getTime() === expected.getTime();\n\n  } else if (isNumberNaN(actual)) {\n    return isNumberNaN(expected);\n\n  // 7.3. Other pairs that do not both pass typeof value == 'object',\n  // equivalence is determined by ==.\n  } else if (typeof actual != 'object' && typeof expected != 'object') {\n    return actual == expected;\n\n  // 7.4. For all other Object pairs, including Array objects, equivalence is\n  // determined by having the same number of owned properties (as verified\n  // with Object.prototype.hasOwnProperty.call), the same set of keys\n  // (although not necessarily the same order), equivalent values for every\n  // corresponding key, and an identical 'prototype' property. Note: this\n  // accounts for both named and indexed properties on Arrays.\n  } else {\n    return objEquiv(actual, expected);\n  }\n};\n\nfunction isUndefinedOrNull(value) {\n  return value === null || value === undefined;\n}\n\nfunction isArguments(object) {\n  return Object.prototype.toString.call(object) == '[object Arguments]';\n}\n\nfunction isNumberNaN(value) {\n  // NaN === NaN -> false\n  return typeof value == 'number' && value !== value;\n}\n\nfunction areZerosEqual(zeroA, zeroB) {\n  // (1 / +0|0) -> Infinity, but (1 / -0) -> -Infinity and (Infinity !== -Infinity)\n  return (1 / zeroA) === (1 / zeroB);\n}\n\nfunction objEquiv(a, b) {\n  if (isUndefinedOrNull(a) || isUndefinedOrNull(b))\n    return false;\n\n  // an identical 'prototype' property.\n  if (a.prototype !== b.prototype) return false;\n  //~~~I've managed to break Object.keys through screwy arguments passing.\n  //   Converting to array solves the problem.\n  if (isArguments(a)) {\n    if (!isArguments(b)) {\n      return false;\n    }\n    a = pSlice.call(a);\n    b = pSlice.call(b);\n    return deepEqual(a, b);\n  }\n  try {\n    var ka = Object_keys(a),\n        kb = Object_keys(b),\n        key, i;\n  } catch (e) {//happens when one is a string literal and the other isn't\n    return false;\n  }\n  // having the same number of owned properties (keys incorporates\n  // hasOwnProperty)\n  if (ka.length != kb.length)\n    return false;\n  //the same set of keys (although not necessarily the same order),\n  ka.sort();\n  kb.sort();\n  //~~~cheap key test\n  for (i = ka.length - 1; i >= 0; i--) {\n    if (ka[i] != kb[i])\n      return false;\n  }\n  //equivalent values for every corresponding key, and\n  //~~~possibly expensive deep test\n  for (i = ka.length - 1; i >= 0; i--) {\n    key = ka[i];\n    if (!deepEqual(a[key], b[key])) return false;\n  }\n  return true;\n}\n","(function (Buffer){\n//     uuid.js\n//\n//     Copyright (c) 2010-2012 Robert Kieffer\n//     MIT License - http://opensource.org/licenses/mit-license.php\n\n(function() {\n  var _global = this;\n\n  // Unique ID creation requires a high quality random # generator.  We feature\n  // detect to determine the best RNG source, normalizing to a function that\n  // returns 128-bits of randomness, since that's what's usually required\n  var _rng;\n\n  // Node.js crypto-based RNG - http://nodejs.org/docs/v0.6.2/api/crypto.html\n  //\n  // Moderately fast, high quality\n  if (typeof(require) == 'function') {\n    try {\n      var _rb = require('crypto').randomBytes;\n      _rng = _rb && function() {return _rb(16);};\n    } catch(e) {}\n  }\n\n  if (!_rng && _global.crypto && crypto.getRandomValues) {\n    // WHATWG crypto-based RNG - http://wiki.whatwg.org/wiki/Crypto\n    //\n    // Moderately fast, high quality\n    var _rnds8 = new Uint8Array(16);\n    _rng = function whatwgRNG() {\n      crypto.getRandomValues(_rnds8);\n      return _rnds8;\n    };\n  }\n\n  if (!_rng) {\n    // Math.random()-based (RNG)\n    //\n    // If all else fails, use Math.random().  It's fast, but is of unspecified\n    // quality.\n    var  _rnds = new Array(16);\n    _rng = function() {\n      for (var i = 0, r; i < 16; i++) {\n        if ((i & 0x03) === 0) r = Math.random() * 0x100000000;\n        _rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;\n      }\n\n      return _rnds;\n    };\n  }\n\n  // Buffer class to use\n  var BufferClass = typeof(Buffer) == 'function' ? Buffer : Array;\n\n  // Maps for number <-> hex string conversion\n  var _byteToHex = [];\n  var _hexToByte = {};\n  for (var i = 0; i < 256; i++) {\n    _byteToHex[i] = (i + 0x100).toString(16).substr(1);\n    _hexToByte[_byteToHex[i]] = i;\n  }\n\n  // **`parse()` - Parse a UUID into it's component bytes**\n  function parse(s, buf, offset) {\n    var i = (buf && offset) || 0, ii = 0;\n\n    buf = buf || [];\n    s.toLowerCase().replace(/[0-9a-f]{2}/g, function(oct) {\n      if (ii < 16) { // Don't overflow!\n        buf[i + ii++] = _hexToByte[oct];\n      }\n    });\n\n    // Zero out remaining bytes if string was short\n    while (ii < 16) {\n      buf[i + ii++] = 0;\n    }\n\n    return buf;\n  }\n\n  // **`unparse()` - Convert UUID byte array (ala parse()) into a string**\n  function unparse(buf, offset) {\n    var i = offset || 0, bth = _byteToHex;\n    return  bth[buf[i++]] + bth[buf[i++]] +\n            bth[buf[i++]] + bth[buf[i++]] + '-' +\n            bth[buf[i++]] + bth[buf[i++]] + '-' +\n            bth[buf[i++]] + bth[buf[i++]] + '-' +\n            bth[buf[i++]] + bth[buf[i++]] + '-' +\n            bth[buf[i++]] + bth[buf[i++]] +\n            bth[buf[i++]] + bth[buf[i++]] +\n            bth[buf[i++]] + bth[buf[i++]];\n  }\n\n  // **`v1()` - Generate time-based UUID**\n  //\n  // Inspired by https://github.com/LiosK/UUID.js\n  // and http://docs.python.org/library/uuid.html\n\n  // random #'s we need to init node and clockseq\n  var _seedBytes = _rng();\n\n  // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)\n  var _nodeId = [\n    _seedBytes[0] | 0x01,\n    _seedBytes[1], _seedBytes[2], _seedBytes[3], _seedBytes[4], _seedBytes[5]\n  ];\n\n  // Per 4.2.2, randomize (14 bit) clockseq\n  var _clockseq = (_seedBytes[6] << 8 | _seedBytes[7]) & 0x3fff;\n\n  // Previous uuid creation time\n  var _lastMSecs = 0, _lastNSecs = 0;\n\n  // See https://github.com/broofa/node-uuid for API details\n  function v1(options, buf, offset) {\n    var i = buf && offset || 0;\n    var b = buf || [];\n\n    options = options || {};\n\n    var clockseq = options.clockseq != null ? options.clockseq : _clockseq;\n\n    // UUID timestamps are 100 nano-second units since the Gregorian epoch,\n    // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so\n    // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'\n    // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.\n    var msecs = options.msecs != null ? options.msecs : new Date().getTime();\n\n    // Per 4.2.1.2, use count of uuid's generated during the current clock\n    // cycle to simulate higher resolution clock\n    var nsecs = options.nsecs != null ? options.nsecs : _lastNSecs + 1;\n\n    // Time since last uuid creation (in msecs)\n    var dt = (msecs - _lastMSecs) + (nsecs - _lastNSecs)/10000;\n\n    // Per 4.2.1.2, Bump clockseq on clock regression\n    if (dt < 0 && options.clockseq == null) {\n      clockseq = clockseq + 1 & 0x3fff;\n    }\n\n    // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new\n    // time interval\n    if ((dt < 0 || msecs > _lastMSecs) && options.nsecs == null) {\n      nsecs = 0;\n    }\n\n    // Per 4.2.1.2 Throw error if too many uuids are requested\n    if (nsecs >= 10000) {\n      throw new Error('uuid.v1(): Can\\'t create more than 10M uuids/sec');\n    }\n\n    _lastMSecs = msecs;\n    _lastNSecs = nsecs;\n    _clockseq = clockseq;\n\n    // Per 4.1.4 - Convert from unix epoch to Gregorian epoch\n    msecs += 12219292800000;\n\n    // `time_low`\n    var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;\n    b[i++] = tl >>> 24 & 0xff;\n    b[i++] = tl >>> 16 & 0xff;\n    b[i++] = tl >>> 8 & 0xff;\n    b[i++] = tl & 0xff;\n\n    // `time_mid`\n    var tmh = (msecs / 0x100000000 * 10000) & 0xfffffff;\n    b[i++] = tmh >>> 8 & 0xff;\n    b[i++] = tmh & 0xff;\n\n    // `time_high_and_version`\n    b[i++] = tmh >>> 24 & 0xf | 0x10; // include version\n    b[i++] = tmh >>> 16 & 0xff;\n\n    // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)\n    b[i++] = clockseq >>> 8 | 0x80;\n\n    // `clock_seq_low`\n    b[i++] = clockseq & 0xff;\n\n    // `node`\n    var node = options.node || _nodeId;\n    for (var n = 0; n < 6; n++) {\n      b[i + n] = node[n];\n    }\n\n    return buf ? buf : unparse(b);\n  }\n\n  // **`v4()` - Generate random UUID**\n\n  // See https://github.com/broofa/node-uuid for API details\n  function v4(options, buf, offset) {\n    // Deprecated - 'format' argument, as supported in v1.2\n    var i = buf && offset || 0;\n\n    if (typeof(options) == 'string') {\n      buf = options == 'binary' ? new BufferClass(16) : null;\n      options = null;\n    }\n    options = options || {};\n\n    var rnds = options.random || (options.rng || _rng)();\n\n    // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n    rnds[6] = (rnds[6] & 0x0f) | 0x40;\n    rnds[8] = (rnds[8] & 0x3f) | 0x80;\n\n    // Copy bytes to buffer, if provided\n    if (buf) {\n      for (var ii = 0; ii < 16; ii++) {\n        buf[i + ii] = rnds[ii];\n      }\n    }\n\n    return buf || unparse(rnds);\n  }\n\n  // Export public API\n  var uuid = v4;\n  uuid.v1 = v1;\n  uuid.v4 = v4;\n  uuid.parse = parse;\n  uuid.unparse = unparse;\n  uuid.BufferClass = BufferClass;\n\n  if (typeof define === 'function' && define.amd) {\n    // Publish as AMD module\n    define(function() {return uuid;});\n  } else if (typeof(module) != 'undefined' && module.exports) {\n    // Publish as node.js module\n    module.exports = uuid;\n  } else {\n    // Publish as global (in browsers)\n    var _previousRoot = _global.uuid;\n\n    // **`noConflict()` - (browser only) to reset global 'uuid' var**\n    uuid.noConflict = function() {\n      _global.uuid = _previousRoot;\n      return uuid;\n    };\n\n    _global.uuid = uuid;\n  }\n}).call(this);\n\n}).call(this,require(\"buffer\").Buffer)","var Doc, Query;\nif (typeof require !== 'undefined') {\n  Doc = require('./doc').Doc;\n  Query = require('./query').Query;\n  MicroEvent = require('./microevent');\n} else {\n  Doc   = exports.Doc;\n  Query = exports.Query\n}\n\n\n/**\n * Handles communication with the sharejs server and provides queries and\n * documents.\n *\n * We create a connection with a socket object\n *   connection = new sharejs.Connection(sockset)\n * The socket may be any object handling the websocket protocol. See the\n * documentation of bindToSocket() for details. We then wait for the connection\n * to connect\n *   connection.on('connected', ...)\n * and are finally able to work with shared documents\n *   connection.get('food', 'steak') // Doc \n *\n * @param socket @see bindToSocket\n */\nvar Connection = exports.Connection = function (socket) {\n  // Map of collection -> docName -> doc object for created documents.\n  // (created documents MUST BE UNIQUE)\n  this.collections = {};\n\n  // Each query is created with an id that the server uses when it sends us\n  // info about the query (updates, etc).\n  //this.nextQueryId = (Math.random() * 1000) |0;\n  this.nextQueryId = 1;\n\n  // Map from query ID -> query object.\n  this.queries = {};\n\n  // State of the connection. The correspoding events are emmited when this\n  // changes. Available states are:\n  // - 'connecting'   The connection has been established, but we don't have our\n  //                  client ID yet\n  // - 'connected'    We have connected and recieved our client ID. Ready for data.\n  // - 'disconnected' The connection is closed, but it will reconnect automatically.\n  // - 'stopped'      The connection is closed, and should not reconnect.\n  this.state = 'disconnected'\n\n  // This is a helper variable the document uses to see whether we're currently\n  // in a 'live' state. It is true if we're connected, or if you're using\n  // browserchannel and connecting.\n  this.canSend = false\n\n  // Reset some more state variables.\n  this.reset();\n\n  this.debug = false;\n\n  // I'll store the most recent 100 messages so when errors occur we can see\n  // what happened.\n  this.messageBuffer = [];\n\n  this.bindToSocket(socket);\n}\nMicroEvent.mixin(Connection);\n\n\n/**\n * Use socket to communicate with server\n *\n * Socket is an object that can handle the websocket protocol. This method\n * installs the onopen, onclose, onmessage and onerror handlers on the socket to\n * handle communication and sends messages by calling socket.send(msg). The\n * sockets `readyState` property is used to determine the initaial state.\n *\n * @param socket Handles the websocket protocol\n * @param socket.readyState\n * @param socket.close\n * @param socket.send\n * @param socket.onopen\n * @param socket.onclose\n * @param socket.onmessage\n * @param socket.onerror\n */\nConnection.prototype.bindToSocket = function(socket) {\n  if (this.socket) {\n    delete this.socket.onopen\n    delete this.socket.onclose\n    delete this.socket.onmessage\n    delete this.socket.onerror\n  }\n\n  // TODO: Check that the socket is in the 'connecting' state.\n\n  this.socket = socket;\n  // This logic is replicated in setState - consider calling setState here\n  // instead.\n  this.state = (socket.readyState === 0 || socket.readyState === 1) ? 'connecting' : 'disconnected';\n  this.canSend = this.state === 'connecting' && socket.canSendWhileConnecting;\n\n  var connection = this\n\n  socket.onmessage = function(msg) {\n    var data = msg.data;\n\n    // Fall back to supporting old browserchannel 1.x API which implemented the\n    // websocket API incorrectly. This will be removed at some point\n    if (!data) data = msg;\n    \n    // Some transports don't need parsing.\n    if (typeof data === 'string') data = JSON.parse(data);\n\n    if (connection.debug) console.log('RECV', JSON.stringify(data));\n\n    connection.messageBuffer.push({\n      t: (new Date()).toTimeString(),\n      recv:JSON.stringify(data)\n    });\n    while (connection.messageBuffer.length > 100) {\n      connection.messageBuffer.shift();\n    }\n\n    try {\n      connection.handleMessage(data);\n    } catch (e) {\n      connection.emit('error', e);\n      // We could also restart the connection here, although that might result\n      // in infinite reconnection bugs.\n      throw e;\n    }\n  }\n\n  socket.onopen = function() {\n    connection._setState('connecting');\n  };\n\n  socket.onerror = function(e) {\n    // This isn't the same as a regular error, because it will happen normally\n    // from time to time. Your connection should probably automatically\n    // reconnect anyway, but that should be triggered off onclose not onerror.\n    // (onclose happens when onerror gets called anyway).\n    connection.emit('connection error', e);\n  };\n\n  socket.onclose = function(reason) {\n    connection._setState('disconnected', reason);\n    if (reason === 'Closed' || reason === 'Stopped by server') {\n      connection._setState('stopped', reason);\n    }\n  };\n};\n\n\n/**\n * @param {object} msg\n * @param {String} msg.a action\n */\nConnection.prototype.handleMessage = function(msg) {\n  // Switch on the message action. Most messages are for documents and are\n  // handled in the doc class.\n  switch (msg.a) {\n    case 'init':\n      // Client initialization packet. This bundle of joy contains our client\n      // ID.\n      if (msg.protocol !== 0) throw new Error('Invalid protocol version');\n      if (typeof msg.id != 'string') throw new Error('Invalid client id');\n\n      this.id = msg.id;\n      this._setState('connected');\n      break;\n\n    case 'qfetch':\n    case 'qsub':\n    case 'q':\n    case 'qunsub':\n      // Query message. Pass this to the appropriate query object.\n      var query = this.queries[msg.id];\n      if (query) query._onMessage(msg);\n      break;\n\n    case 'bs':\n      // Bulk subscribe response. The responses for each document are contained within.\n      var result = msg.s;\n      for (var cName in result) {\n        for (var docName in result[cName]) {\n          var doc = this.get(cName, docName);\n          if (!doc) {\n            if (console) console.error('Message for unknown doc. Ignoring.', msg);\n            break;\n          }\n\n          var msg = result[cName][docName];\n          if (typeof msg === 'object') {\n            doc._handleSubscribe(msg.error, msg);\n          } else {\n            // The msg will be true if we simply resubscribed.\n            doc._handleSubscribe(null, null);\n          }\n        }\n      }\n      break;\n\n    default:\n      // Document message. Pull out the referenced document and forward the\n      // message.\n      var collection, docName, doc;\n      if (msg.d) {\n        collection = this._lastReceivedCollection = msg.c;\n        docName = this._lastReceivedDoc = msg.d;\n      } else {\n        collection = msg.c = this._lastReceivedCollection;\n        docName = msg.d = this._lastReceivedDoc;\n      }\n\n      this.get(collection, docName)._onMessage(msg);\n  }\n};\n\n\nConnection.prototype.reset = function() {\n  this.id = this.lastError =\n    this._lastReceivedCollection = this._lastReceivedDoc =\n    this._lastSentCollection = this._lastSentDoc = null;\n\n  this.seq = 1;\n};\n\n\n// Set the connection's state. The connection is basically a state machine.\nConnection.prototype._setState = function(newState, data) {\n  if (this.state === newState) return;\n\n  // I made a state diagram. The only invalid transitions are getting to\n  // 'connecting' from anywhere other than 'disconnected' and getting to\n  // 'connected' from anywhere other than 'connecting'.\n  if ((newState === 'connecting' && (this.state !== 'disconnected' && this.state !== 'stopped'))\n      || (newState === 'connected' && this.state !== 'connecting')) {\n    throw new Error(\"Cannot transition directly from \" + this.state + \" to \" + newState);\n  }\n\n  this.state = newState;\n  this.canSend = (newState === 'connecting' && this.socket.canSendWhileConnecting) || newState === 'connected';\n\n  if (newState === 'disconnected') this.reset();\n\n  this.emit(newState, data);\n\n  // & Emit the event to all documents & queries. It might make sense for\n  // documents to just register for this stuff using events, but that couples\n  // connections and documents a bit much. Its not a big deal either way.\n  this.opQueue = [];\n  this.subscribeData = {};\n  for (var c in this.collections) {\n    var collection = this.collections[c];\n    for (var docName in collection) {\n      collection[docName]._onConnectionStateChanged(newState, data);\n    }\n  }\n\n\n  // Its important that operations are resent in the same order that they were\n  // originally sent. If we don't sort, an op with a high sequence number will\n  // convince the server not to accept any ops with earlier sequence numbers.\n  this.opQueue.sort(function(a, b) { return a.seq - b.seq; });\n  for (var i = 0; i < this.opQueue.length; i++) {\n    this.send(this.opQueue[i]);\n  }\n\n  // Only send bulk subscribe if not empty. Its weird using a for loop for\n  // this, but it works pretty well.\n  for (var __unused in this.subscribeData) { \n    this.send({a:'bs', s:this.subscribeData});\n    break;\n  }\n\n  this.opQueue = null;\n  this.subscribeData = null;\n  \n  // Its important that query resubscribes are sent after documents to make sure\n  // the server knows all the documents we're subscribed to when it issues the\n  // queries internally.\n\n  // No bulk subscribe for queries yet.\n  for (var id in this.queries) {\n    this.queries[id]._onConnectionStateChanged(newState, data);\n  }\n};\n\n// So, there's an awful error case where the client sends two requests (which\n// fail), then reconnects. The documents could have _onConnectionStateChanged\n// called in the wrong order and the operations then get sent with reversed\n// sequence numbers. This causes the server to incorrectly reject the second\n// sent op. So we need to queue the operations while we're reconnecting and\n// resend them in the correct order.\nConnection.prototype.sendOp = function(data) {\n  if (this.opQueue) {\n    this.opQueue.push(data);\n  } else {\n    this.send(data);\n  }\n};\n\n\n// This is called by the document class when the document wants to subscribe.\n// We could just send a subscribe message, but during reconnect that causes a\n// bajillion messages over browserchannel. During reconnect we'll aggregate,\n// similar to sendOp.\nConnection.prototype.sendSubscribe = function(collection, name, v) {\n  if (this.subscribeData) {\n    var data = this.subscribeData;\n    if (!data[collection]) data[collection] = {};\n\n    data[collection][name] = v || null;\n  } else {\n    var msg = {a:'sub', c:collection, d:name};\n    if (v != null) msg.v = v;\n    this.send(msg);\n  }\n};\n\n\n/**\n * Sends a message down the socket\n */\nConnection.prototype.send = function(msg) {\n  if (this.debug) console.log(\"SEND\", JSON.stringify(msg));\n  this.messageBuffer.push({t:Date.now(), send:JSON.stringify(msg)});\n  while (this.messageBuffer.length > 100) {\n    this.messageBuffer.shift();\n  }\n\n  if (msg.d) { // The document the message refers to. Not set for queries.\n    var collection = msg.c;\n    var docName = msg.d;\n    if (collection === this._lastSentCollection && docName === this._lastSentDoc) {\n      delete msg.c;\n      delete msg.d;\n    } else {\n      this._lastSentCollection = collection;\n      this._lastSentDoc = docName;\n    }\n  }\n\n  if (!this.socket.canSendJSON)\n    msg = JSON.stringify(msg);\n  \n  this.socket.send(msg);\n};\n\n\n/**\n * Closes the socket and emits 'disconnected'\n */\nConnection.prototype.disconnect = function() {\n  this.socket.close();\n};\n\n\n/**\n * @deprecated\n */\nConnection.prototype.getExisting = function(collection, name) {\n  console.trace('getExisting is deprecated. Use get() instead');\n  if (this.collections[collection]) return this.collections[collection][name];\n};\n\n\n/**\n * @deprecated\n */\nConnection.prototype.getOrCreate = function(collection, name, data) {\n  console.trace('getOrCreate is deprecated. Use get() instead');\n  return this.get(collection, name, data);\n};\n\n\n/**\n * Get or create a document.\n *\n * @param collection\n * @param name\n * @param [data] ingested into document if created\n * @return {Doc}\n */\nConnection.prototype.get = function(collection, name, data) {\n  var collectionObject = this.collections[collection];\n  if (!collectionObject)\n    collectionObject = this.collections[collection] = {};\n\n  var doc = collectionObject[name];\n  if (!doc)\n    doc = collectionObject[name] = new Doc(this, collection, name);\n\n  // Even if the document isn't new, its possible the document was created\n  // manually and then tried to be re-created with data (suppose a query\n  // returns with data for the document). We should hydrate the document\n  // immediately if we can because the query callback will expect the document\n  // to have data.\n  if (data && data.data !== undefined && !doc.state)\n    doc.ingestData(data);\n\n  return doc;\n};\n\n\n/**\n * Remove document from this.collections\n *\n * @private\n */\nConnection.prototype._destroyDoc = function(doc) {\n  var collectionObject = this.collections[doc.collection];\n  if (!collectionObject) return;\n\n  delete collectionObject[doc.name];\n\n  // Delete the collection container if its empty. This could be a source of\n  // memory leaks if you slowly make a billion collections, which you probably\n  // won't do anyway, but whatever.\n  if (!hasKeys(collectionObject))\n    delete this.collections[doc.collection];\n};\n \n\nfunction hasKeys(object) {\n  for (var key in object) return true;\n  return false;\n};\n\n\n// Helper for createFetchQuery and createSubscribeQuery, below.\nConnection.prototype._createQuery = function(type, collection, q, options, callback) {\n  if (type !== 'fetch' && type !== 'sub')\n    throw new Error('Invalid query type: ' + type);\n\n  if (!options) options = {};\n  var id = this.nextQueryId++;\n  var query = new Query(type, this, id, collection, q, options, callback);\n  this.queries[id] = query;\n  query._execute();\n  return query;\n};\n\n// Internal function. Use query.destroy() to remove queries.\nConnection.prototype._destroyQuery = function(query) {\n  delete this.queries[query.id];\n};\n\n// The query options object can contain the following fields:\n//\n// docMode: What to do with documents that are in the result set. Can be\n//   null/undefined (default), 'fetch' or 'subscribe'. Fetch mode indicates\n//   that the server should send document snapshots to the client for all query\n//   results. These will be hydrated into the document objects before the query\n//   result callbacks are returned. Subscribe mode gets document snapshots and\n//   automatically subscribes the client to all results. Note that the\n//   documents *WILL NOT* be automatically unsubscribed when the query is\n//   destroyed. (ShareJS doesn't have enough information to do that safely).\n//   Beware of memory leaks when using this option.\n//\n// poll: Forcably enable or disable polling mode. Polling mode will reissue the query\n//   every time anything in the collection changes (!!) so, its quite\n//   expensive.  It is automatically enabled for paginated and sorted queries.\n//   By default queries run with polling mode disabled; which will only check\n//   changed documents to test if they now match the specified query.\n//   Set to false to disable polling mode, or true to enable it. If you don't\n//   specify a poll option, polling mode is enabled or disabled automatically\n//   by the query's backend.\n//\n// backend: Set the backend source for the query. You can attach different\n//   query backends to livedb and pick which one the query should hit using\n//   this parameter.\n//\n// results: (experimental) Initial list of resultant documents. This is\n//   useful for rehydrating queries when you're using autoFetch / autoSubscribe\n//   so the server doesn't have to send over snapshots for documents the client\n//   already knows about. This is experimental - the API may change in upcoming\n//   versions.\n\n// Create a fetch query. Fetch queries are only issued once, returning the\n// results directly into the callback.\n//\n// The index is specific to the source, but if you're using mongodb it'll be\n// the collection to which the query is made.\n// The callback should have the signature function(error, results, extraData)\n// where results is a list of Doc objects.\nConnection.prototype.createFetchQuery = function(index, q, options, callback) {\n  return this._createQuery('fetch', index, q, options, callback);\n};\n\n// Create a subscribe query. Subscribe queries return with the initial data\n// through the callback, then update themselves whenever the query result set\n// changes via their own event emitter.\n//\n// If present, the callback should have the signature function(error, results, extraData)\n// where results is a list of Doc objects.\nConnection.prototype.createSubscribeQuery = function(index, q, options, callback) {\n  return this._createQuery('sub', index, q, options, callback);\n};\n","var types;\n\nif (typeof require !== \"undefined\") {\n  types = require('ottypes');\n  MicroEvent = require('./microevent');\n} else {\n  types = window.ottypes;\n}\n\n/**\n * A Doc is a client's view on a sharejs document.\n *\n * It is is uniquely identified by its `name` and `collection`.  Documents\n * should not be created directly. Create them with Connection.get()\n *\n *\n *\n * Subscriptions\n * -------------\n *\n * We can subscribe a document to stay in sync with the server.\n *   doc.subscribe(function(error) {\n *     doc.state // = 'ready'\n *     doc.subscribed // = true\n *   })\n * The server now sends us all changes concerning this document and these are\n * applied to our snapshot. If the subscription was successful the initial\n * snapshot and version sent by the server are loaded into the document.\n *\n * To stop listening to the changes we call `doc.unsubscribe()`.\n *\n * If we just want to load the data but not stay up-to-date, we call\n *   doc.fetch(function(error) {\n *     doc.snapshot // sent by server\n *   })\n *\n * TODO What happens when the document does not exist yet.\n *\n *\n *\n * Editing documents\n * ------------------\n *\n * To edit a document we have to create an editing context\n *   context = doc.context()\n * The context is an object exposing the type API of the documents OT type.\n *   doc.type = 'text'\n *   context.insert(0, 'In the beginning')\n *   doc.snapshot // 'In the beginning...'\n *\n * If a operation is applied on the snapshot the `_onOp` on the context is\n * called. The type implementation then usually triggers a corresponding event.\n *\n *\n *\n *\n * Events\n * ------\n *\n * You can use doc.on(eventName, callback) to subscribe to the following events:\n * - `before op (op, localContext)` Fired before an operation is applied to the\n *   snapshot. The document is already in locked state, so it is not allowed to\n *   submit further operations. It may be used to read the old snapshot just\n *   before applying an operation. The callback is passed the operation and the\n *   editing context if the operation originated locally and `false` otherwise\n * - `after op (op, localContext)` Fired after an operation has been applied to\n *   the snapshot. The arguments are the same as for `before op`\n * - `op (op, localContext)` The same as `after op` unless incremental updates\n *   are enabled. In this case it is fired after every partial operation with\n *   this operation as the first argument. When fired the document is in a\n *   locked state which only allows reading operations.\n * - `subscribed (error)` The document was subscribed\n * - `unsubscribed (error)` The document was unsubscribed\n * - `created (localContext)` The document was created. That means its type was\n *   set and it has some initial data.\n * - `del (localContext, snapshot)` Fired after the document is deleted, that is\n *   the snapshot is null. It is passed the snapshot before delteion as an\n *   arguments\n * - `error`\n *\n * TODO rename `op` to `after partial op`\n */\nvar Doc = exports.Doc = function(connection, collection, name) {\n  this.connection = connection;\n\n  this.collection = collection;\n  this.name = name;\n\n  this.version = this.type = null;\n  this.snapshot = undefined;\n\n  // **** State in document:\n \n  // The action the document tries to perform with the server\n  //\n  // - subscribe\n  // - unsubscribe\n  // - fetch\n  // - submit: send an operation\n  this.action = null;\n \n  // The data the document object stores can be in one of the following three states:\n  //   - No data. (null) We honestly don't know whats going on.\n  //   - Floating ('floating'): we have a locally created document that hasn't\n  //     been created on the server yet)\n  //   - Live ('ready') (we have data thats current on the server at some version).\n  this.state = null;\n\n  // Our subscription status. Either we're subscribed on the server, or we aren't.\n  this.subscribed = false;\n  // Either we want to be subscribed (true), we want a new snapshot from the\n  // server ('fetch'), or we don't care (false).  This is also used when we\n  // disconnect & reconnect to decide what to do.\n  this.wantSubscribe = false;\n  // This list is used for subscribe and unsubscribe, since we'll only want to\n  // do one thing at a time.\n  this._subscribeCallbacks = [];\n\n\n  // *** end state stuff.\n\n  // This doesn't provide any standard API access right now.\n  this.provides = {};\n\n  // The editing contexts. These are usually instances of the type API when the\n  // document is ready for edits.\n  this.editingContexts = [];\n  \n  // The op that is currently roundtripping to the server, or null.\n  //\n  // When the connection reconnects, the inflight op is resubmitted.\n  //\n  // This has the same format as an entry in pendingData, which is:\n  // {[create:{...}], [del:true], [op:...], callbacks:[...], src:, seq:}\n  this.inflightData = null;\n\n  // All ops that are waiting for the server to acknowledge @inflightData\n  // This used to just be a single operation, but creates & deletes can't be composed with\n  // regular operations.\n  //\n  // This is a list of {[create:{...}], [del:true], [op:...], callbacks:[...]}\n  this.pendingData = [];\n\n  // The OT type of this document.\n  //\n  // The document also responds to the api provided by the type\n  this.type = null\n};\n\nMicroEvent.mixin(Doc);\n\n/**\n * Unsubscribe and remove all editing contexts\n */\nDoc.prototype.destroy = function(callback) {\n  var doc = this;\n  this.unsubscribe(function() {\n    // Don't care if there's an error unsubscribing.\n\n    setTimeout(function() {\n      // There'll probably be nothing here seeing as how we just unsubscribed.\n      for (var i = 0; i < doc._subscribeCallbacks.length; i++) {\n        doc._subscribeCallbacks[i]('Document destroyed');\n      }\n      doc._subscribeCallbacks.length = 0;\n    }, 0);\n\n    doc.connection._destroyDoc(doc);\n    doc.removeContexts();\n    if (callback) callback();\n  });\n};\n\n\n// ****** Manipulating the document snapshot, version and type.\n\n// Set the document's type, and associated properties. Most of the logic in\n// this function exists to update the document based on any added & removed API\n// methods.\n//\n// @param newType OT type provided by the ottypes library or its name or uri\nDoc.prototype._setType = function(newType) {\n  if (typeof newType === 'string') {\n    if (!types[newType]) throw new Error(\"Missing type \" + newType);\n    newType = types[newType];\n  }\n  this.removeContexts();\n\n  // Set the new type\n  this.type = newType;\n\n  // If we removed the type from the object, also remove its snapshot.\n  if (!newType) {\n    this.provides = {};\n    this.snapshot = undefined;\n  } else if (newType.api) {\n    // Register the new type's API.\n    this.provides = newType.api.provides;\n  }\n};\n\n// Injest snapshot data. This data must include a version, snapshot and type.\n// This is used both to ingest data that was exported with a webpage and data\n// that was received from the server during a fetch.\n//\n// @param data.v    version\n// @param data.data\n// @param data.type\n// @fires ready\nDoc.prototype.ingestData = function(data) {\n  if (this.state) {\n    if (typeof console !== \"undefined\") console.warn('Ignoring attempt to ingest data in state', this.state);\n    return;\n  }\n  if (typeof data.v !== 'number') throw new Error('Missing version in ingested data');\n\n\n  this.version = data.v;\n  // data.data is what the server will actually send. data.snapshot is the old\n  // field name - supported now for backwards compatibility.\n  this.snapshot = data.data;\n  this._setType(data.type);\n\n  this.state = 'ready';\n  this.emit('ready');\n};\n\n// Get and return the current document snapshot.\nDoc.prototype.getSnapshot = function() {\n  return this.snapshot;\n};\n\n// The callback will be called at a time when the document has a snapshot and\n// you can start applying operations. This may be immediately.\nDoc.prototype.whenReady = function(fn) {\n  if (this.state === 'ready') {\n    fn();\n  } else {\n    this.once('ready', fn);\n  }\n};\n\nDoc.prototype.hasPending = function() {\n  return this.action != null || this.inflightData != null || !!this.pendingData.length;\n};\n\n\n// **** Helpers for network messages\n\n// Send a message to the connection from this document.\nDoc.prototype._send = function(message) {\n  message.c = this.collection;\n  message.d = this.name;\n  this.connection.send(message);\n};\n\n// This function exists so connection can call it directly for bulk subscribes.\n// It could just make a temporary object literal, thats pretty slow.\nDoc.prototype._handleSubscribe = function(err, data) {\n  if (err && err !== 'Already subscribed') {\n    if (console) console.error(\"Could not subscribe: \" + err);\n    this.emit('error', err);\n    // There's probably a reason we couldn't subscribe. Don't retry.\n    this._setWantSubscribe(false, null, err)\n  } else {\n    if (data) this.ingestData(data);\n    this.subscribed = true;\n    this.emit('subscribe');\n    this._finishSub(true);\n  }\n\n  this._clearAction('subscribe');\n};\n\n// This is called by the connection when it receives a message for the document.\nDoc.prototype._onMessage = function(msg) {\n  if (!(msg.c === this.collection && msg.d === this.name)) {\n    // This should never happen - its a sanity check for bugs in the connection code.\n    throw new Error(\"Got message for wrong document.\");\n  }\n\n  // msg.a = the action.\n  switch (msg.a) {\n    case 'fetch':\n      // We're done fetching. This message has no other information.\n      if (msg.data) this.ingestData(msg.data);\n      this._finishSub('fetch', msg.error);\n      if (this.wantSubscribe === 'fetch') this.wantSubscribe = false;\n      this._clearAction('fetch');\n      break;\n\n    case 'sub':\n      // Subscribe reply.\n      this._handleSubscribe(msg.error, msg.data);\n      break;\n\n    case 'unsub':\n      // Unsubscribe reply\n      this.subscribed = false;\n      this.emit('unsubscribe');\n\n      this._finishSub(false, msg.error);\n      this._clearAction('unsubscribe');\n      break;\n\n    case 'ack':\n      // Acknowledge a locally submitted operation.\n      //\n      // Usually we do nothing here - all the interesting logic happens when we\n      // get sent our op back in the op stream (which happens even if we aren't\n      // subscribed). However, if the op doesn't get accepted, we still need to\n      // clear some state.\n      //\n      // If the message error is 'Op already submitted', that means we've\n      // resent an op that the server already got. It will also be confirmed\n      // normally.\n      if (msg.error && msg.error !== 'Op already submitted') {\n        // The server has rejected an op from the client for some reason.\n        // We'll send the error message to the user and try to roll back the change.\n        if (this.inflightData) {\n          console.warn('Operation was rejected (' + msg.error + '). Trying to rollback change locally.');\n          this._tryRollback(this.inflightData);\n        } else {\n          // I managed to get into this state once. I'm not sure how it happened.\n          // The op was maybe double-acknowledged?\n          if (console) console.warn('Second acknowledgement message (error) received', msg, this);\n        }\n          \n        this._clearInflightOp(msg.error);\n      }\n      break;\n\n    case 'op':\n      if (this.inflightData &&\n          msg.src === this.inflightData.src &&\n          msg.seq === this.inflightData.seq) {\n        // This one is mine. Accept it as acknowledged.\n        this._opAcknowledged(msg);\n        break;\n      }\n\n      if (msg.v < this.version) {\n        // This will happen naturally in the following (or similar) cases:\n        //\n        // Client is not subscribed to document.\n        // -> client submits an operation (v=10)\n        // -> client subscribes to a query which matches this document. Says we\n        //    have v=10 of the doc.\n        //\n        // <- server acknowledges the operation (v=11). Server acknowledges the\n        //    operation because the doc isn't subscribed\n        // <- server processes the query, which says the client only has v=10.\n        //    Server subscribes at v=10 not v=11, so we get another copy of the\n        //    v=10 operation.\n        //\n        // In this case, we can safely ignore the old (duplicate) operation.\n        break;\n      }\n      \n      if (msg.v > this.version) {\n        // If we get in here, it means we missed an operation from the server,\n        // or operations are being sent to the client out of order. This\n        // *should* never happen, but it currently does because of a bug in the\n        // way the query code & doc class interact. If you have a document at\n        // an old version (and not subscribed), when the document matches a\n        // query the query will send the client a snapshot of the document\n        // instead of the operations in between.\n        console.warn(\"Client got future operation from the server\",\n            this.collection, this.name, msg);\n        break;\n      }\n\n      if (this.inflightData) xf(this.inflightData, msg);\n\n      for (var i = 0; i < this.pendingData.length; i++) {\n        xf(this.pendingData[i], msg);\n      }\n\n      this.version++;\n      this._otApply(msg, false);\n      break;\n\n    case 'meta':\n      if (console) console.warn('Unhandled meta op:', msg);\n      break;\n\n    default:\n      if (console) console.warn('Unhandled document message:', msg);\n      break;\n  }\n};\n\n// Called whenever (you guessed it!) the connection state changes. This will\n// happen when we get disconnected & reconnect.\nDoc.prototype._onConnectionStateChanged = function(state, reason) {\n  if (state === 'connecting') {\n    if (this.inflightData) {\n      this._sendOpData();\n    } else {\n      this.flush();\n    }\n  } else if (state === 'connected') {\n    // We go into the connected state once we have a sessionID. We can't send\n    // new ops until then, so we need to flush again.\n    this.flush();\n  } else if (state === 'disconnected') {\n    this.action = null;\n    this.subscribed = false;\n    if (this.subscribed) this.emit('unsubscribed');\n  }\n};\n\n\n\n\n// ****** Dealing with actions\n\nDoc.prototype._clearAction = function(expectedAction) {\n  if (this.action !== expectedAction) {\n    console.warn('Unexpected action ' + this.action + ' expected: ' + expectedAction);\n  }\n  this.action = null;\n  this.flush();\n\n  if (!this.hasPending()) {\n    this.emit('nothing pending');\n  }\n};\n\n\n\n// Send the next pending op to the server, if we can.\n//\n// Only one operation can be in-flight at a time. If an operation is already on\n// its way, or we're not currently connected, this method does nothing.\nDoc.prototype.flush = function() {\n  if (!this.connection.canSend || this.action) return;\n\n  var opData;\n  // Pump and dump any no-ops from the front of the pending op list.\n  while (this.pendingData.length && isNoOp(opData = this.pendingData[0])) {\n    var callbacks = opData.callbacks;\n    for (var i = 0; i < callbacks.length; i++) {\n      callbacks[i](opData.error);\n    }\n    this.pendingData.shift();\n  }\n\n  // We consider sending operations before considering subscribing because its\n  // convenient in access control code to not need to worry about subscribing\n  // to documents that don't exist.\n  if (!this.paused && this.pendingData.length && this.connection.state === 'connected') {\n    // Try and send any pending ops. We can't send ops while in \n    this.inflightData = this.pendingData.shift();\n\n    // This also sets action to 'submit'.\n    this._sendOpData();\n  } else if (this.subscribed && !this.wantSubscribe) {\n    this.action = 'unsubscribe';\n    this._send({a:'unsub'});\n  } else if (!this.subscribed && this.wantSubscribe === 'fetch') {\n    this.action = 'fetch';\n    this._send(this.state === 'ready' ? {a:'fetch', v:this.version} : {a:'fetch'});\n  } else if (!this.subscribed && this.wantSubscribe) {\n    this.action = 'subscribe';\n    // Special send method needed for bulk subscribes on reconnect.\n    this.connection.sendSubscribe(this.collection, this.name, this.state === 'ready' ? this.version : null);\n  }\n};\n\n\n// ****** Subscribing, unsubscribing and fetching\n\n// These functions iare copied into the query class as well, so be careful making\n// changes here.\n\n// Value is true, false or 'fetch'.\nDoc.prototype._setWantSubscribe = function(value, callback, err) {\n  if (this.subscribed === this.wantSubscribe &&\n      (this.subscribed === value || value === 'fetch' && this.subscribed)) {\n    if (callback) callback(err);\n    return;\n  }\n  \n  if (!this.wantSubscribe !== !value) {\n    // Call all the current subscribe/unsubscribe callbacks.\n    for (var i = 0; i < this._subscribeCallbacks.length; i++) {\n      // Should I return an error here? What happened is the user unsubcribed\n      // with a callback then resubscribed straight after. Does that mean the\n      // unsubscribe failed?\n      this._subscribeCallbacks[i](err);\n    }\n    this._subscribeCallbacks.length = 0;\n  }\n\n  // If we want to subscribe, don't weaken it to a fetch.\n  if (value !== 'fetch' || this.wantSubscribe !== true)\n    this.wantSubscribe = value;\n\n  if (callback) this._subscribeCallbacks.push(callback);\n  this.flush();\n};\n\n// Open the document. There is no callback and no error handling if you're\n// already connected.\n//\n// Only call this once per document.\nDoc.prototype.subscribe = function(callback) {\n  this._setWantSubscribe(true, callback);\n};\n\n// Unsubscribe. The data will stay around in local memory, but we'll stop\n// receiving updates.\nDoc.prototype.unsubscribe = function(callback) {\n  this._setWantSubscribe(false, callback);\n};\n\n// Call to request fresh data from the server.\nDoc.prototype.fetch = function(callback) {\n  this._setWantSubscribe('fetch', callback);\n};\n\n// Called when our subscribe, fetch or unsubscribe messages are acknowledged.\nDoc.prototype._finishSub = function(value, error) {\n  if (value === this.wantSubscribe) {\n    for (var i = 0; i < this._subscribeCallbacks.length; i++) {\n      this._subscribeCallbacks[i](error);\n    }\n    this._subscribeCallbacks.length = 0;\n  }\n};\n\n\n// Operations\n\n\n// ************ Dealing with operations.\n\n// Helper function to set opData to contain a no-op.\nvar setNoOp = function(opData) {\n  delete opData.op;\n  delete opData.create;\n  delete opData.del;\n};\n\nvar isNoOp = function(opData) {\n  return !opData.op && !opData.create && !opData.del;\n}\n\n// Try to compose data2 into data1. Returns truthy if it succeeds, otherwise falsy.\nvar tryCompose = function(type, data1, data2) {\n  if (data1.create && data2.del) {\n    setNoOp(data1);\n  } else if (data1.create && data2.op) {\n    // Compose the data into the create data.\n    var data = (data1.create.data === undefined) ? type.create() : data1.create.data;\n    data1.create.data = type.apply(data, data2.op);\n  } else if (isNoOp(data1)) {\n    data1.create = data2.create;\n    data1.del = data2.del;\n    data1.op = data2.op;\n  } else if (data1.op && data2.op && type.compose) {\n    data1.op = type.compose(data1.op, data2.op);\n  } else {\n    return false;\n  }\n  return true;\n};\n\n// Transform server op data by a client op, and vice versa. Ops are edited in place.\nvar xf = function(client, server) {\n  // In this case, we're in for some fun. There are some local operations\n  // which are totally invalid - either the client continued editing a\n  // document that someone else deleted or a document was created both on the\n  // client and on the server. In either case, the local document is way\n  // invalid and the client's ops are useless.\n  //\n  // The client becomes a no-op, and we keep the server op entirely.\n  if (server.create || server.del) return setNoOp(client);\n  if (client.create) throw new Error('Invalid state. This is a bug.');\n\n  // The client has deleted the document while the server edited it. Kill the\n  // server's op.\n  if (client.del) return setNoOp(server);\n\n  // We only get here if either the server or client ops are no-op. Carry on,\n  // nothing to see here.\n  if (!server.op || !client.op) return;\n\n  // They both edited the document. This is the normal case for this function -\n  // as in, most of the time we'll end up down here.\n  //\n  // You should be wondering why I'm using client.type instead of this.type.\n  // The reason is, if we get ops at an old version of the document, this.type\n  // might be undefined or a totally different type. By pinning the type to the\n  // op data, we make sure the right type has its transform function called.\n  if (client.type.transformX) {\n    var result = client.type.transformX(client.op, server.op);\n    client.op = result[0];\n    server.op = result[1];\n  } else {\n    //console.log('xf', JSON.stringify(client.op), JSON.stringify(server.op));\n    var _c = client.type.transform(client.op, server.op, 'left');\n    var _s = client.type.transform(server.op, client.op, 'right');\n    client.op = _c; server.op = _s;\n    //console.log('->', JSON.stringify(client.op), JSON.stringify(server.op));\n  }\n};\n\n/**\n * Applies the operation to the snapshot\n *\n * If the operation is create or delete it emits `create` or `del`.  Then the\n * operation is applied to the snapshot and `op` and `after op` are emitted.  If\n * the type supports incremental updates and `this.incremental` is true we fire\n * `op` after every small operation.\n *\n * This is the only function to fire the above mentioned events.\n *\n * @private\n */\nDoc.prototype._otApply = function(opData, context) {\n  this.locked = true;\n\n  if (opData.create) {\n    // If the type is currently set, it means we tried creating the document\n    // and someone else won. client create x server create = server create.\n    var create = opData.create;\n    this._setType(create.type);\n    this.snapshot = this.type.create(create.data);\n\n    // This is a bit heavyweight, but I want the created event to fire outside of the lock.\n    this.once('unlock', function() {\n      this.emit('create', context);\n    });\n  } else if (opData.del) {\n    // The type should always exist in this case. del x _ = del\n    var oldSnapshot = this.snapshot;\n    this._setType(null);\n    this.once('unlock', function() {\n      this.emit('del', context, oldSnapshot);\n    });\n  } else if (opData.op) {\n    if (!this.type) throw new Error('Document does not exist');\n\n    var type = this.type;\n\n    var op = opData.op;\n    \n    // The context needs to be told we're about to edit, just in case it needs\n    // to store any extra data. (text-tp2 has this constraint.)\n    for (var i = 0; i < this.editingContexts.length; i++) {\n      var c = this.editingContexts[i];\n      if (c != context && c._beforeOp) c._beforeOp(opData.op);\n    }\n\n    this.emit('before op', op, context);\n\n    // This exists so clients can pull any necessary data out of the snapshot\n    // before it gets changed.  Previously we kept the old snapshot object and\n    // passed it to the op event handler. However, apply no longer guarantees\n    // the old object is still valid.\n    //\n    // Because this could be totally unnecessary work, its behind a flag. set\n    // doc.incremental to enable.\n    if (this.incremental && type.incrementalApply) {\n      var _this = this;\n      type.incrementalApply(this.snapshot, op, function(o, snapshot) {\n        _this.snapshot = snapshot;\n        _this.emit('op', o, context);\n      });\n    } else {\n      // This is the most common case, simply applying the operation to the local snapshot.\n      this.snapshot = type.apply(this.snapshot, op);\n      this.emit('op', op, context);\n    }\n  }\n  // Its possible for none of the above cases to match, in which case the op is\n  // a no-op. This will happen when a document has been deleted locally and\n  // remote ops edit the document.\n\n\n  this.locked = false;\n  this.emit('unlock');\n\n  if (opData.op) {\n    var contexts = this.editingContexts;\n    // Notify all the contexts about the op (well, all the contexts except\n    // the one which initiated the submit in the first place).\n    // NOTE Handle this with events?\n    for (var i = 0; i < contexts.length; i++) {\n      var c = contexts[i];\n      if (c != context && c._onOp) c._onOp(opData.op);\n    }\n    for (var i = 0; i < contexts.length; i++) {\n      if (contexts.remove) contexts.splice(i--, 1);\n    }\n\n    return this.emit('after op', opData.op, context);\n  }\n};\n\n\n\n// ***** Sending operations\n\n\n// Actually send op data to the server.\nDoc.prototype._sendOpData = function() {\n  var d = this.inflightData;\n\n  if (this.action) throw new Error('invalid state ' + this.action + ' for sendOpData');\n  this.action = 'submit';\n\n  var msg = {a:'op', v:this.version};\n  if (d.src) {\n    msg.src = d.src;\n    msg.seq = d.seq;\n  }\n\n  if (d.op) msg.op = d.op;\n  if (d.create) msg.create = d.create;\n  if (d.del) msg.del = d.del;\n\n  msg.c = this.collection;\n  msg.d = this.name;\n\n  this.connection.sendOp(msg);\n   \n  // The first time we send an op, its id and sequence number is implicit.\n  if (!d.src) {\n    d.src = this.connection.id;\n    d.seq = this.connection.seq++;\n  }\n};\n\n\n// Queues the operation for submission to the server and applies it locally.\n//\n// Internal method called to do the actual work for submitOp(), create() and del().\n// @private\n//\n// @param opData\n// @param [opData.op]\n// @param [opData.del]\n// @param [opData.create]\n// @param [context] the editing context\n// @param [callback] called when operation is submitted\nDoc.prototype._submitOpData = function(opData, context, callback) {\n  //console.log('submit', JSON.stringify(opData), 'v=', this.version);\n\n  if (typeof context === 'function') {\n    callback = context;\n    context = true; // The default context is true.\n  }\n  if (context == null) context = true;\n\n  var error = function(err) {\n    if (callback) callback(err);\n    else if (console) console.warn('Failed attempt to submitOp:', err);\n  };\n\n  if (this.locked) {\n    return error(\"Cannot call submitOp from inside an 'op' event handler\");\n  }\n\n  // The opData contains either op, create, delete, or none of the above (a no-op).\n  if (opData.op) {\n    if (!this.type) return error('Document has not been created');\n    // Try to normalize the op. This removes trailing skip:0's and things like that.\n    if (this.type.normalize) opData.op = this.type.normalize(opData.op);\n  }\n\n  if (!this.state) {\n    this.state = 'floating';\n  }\n\n  opData.type = this.type;\n  opData.callbacks = [];\n\n  // If the type supports composes, try to compose the operation onto the end\n  // of the last pending operation.\n  var operation;\n  var previous = this.pendingData[this.pendingData.length - 1];\n\n  if (previous && tryCompose(this.type, previous, opData)) {\n    operation = previous;\n  } else {\n    operation = opData;\n    this.pendingData.push(opData);\n  }\n  if (callback) operation.callbacks.push(callback);\n\n  this._otApply(opData, context);\n\n  // The call to flush is in a timeout so if submitOp() is called multiple\n  // times in a closure all the ops are combined before being sent to the\n  // server. It doesn't matter if flush is called a bunch of times.\n  var _this = this;\n  setTimeout((function() { _this.flush(); }), 0);\n};\n\n\n// *** Client OT entrypoints.\n\n// Submit an operation to the document.\n//\n// @param operation handled by the OT type\n// @param [context] editing context\n// @param [callback] called after operation submitted\n//\n// @fires before op, op, after op\nDoc.prototype.submitOp = function(op, context, callback) {\n  this._submitOpData({op: op}, context, callback);\n};\n\n// Create the document, which in ShareJS semantics means to set its type. Every\n// object implicitly exists in the database but has no data and no type. Create\n// sets the type of the object and can optionally set some initial data on the\n// object, depending on the type.\n//\n// @param type  OT type\n// @param data  initial\n// @param context  editing context\n// @param callback  called when operation submitted\nDoc.prototype.create = function(type, data, context, callback) {\n  if (typeof data === 'function') {\n    // Setting the context to be the callback function in this case so _submitOpData\n    // can handle the default value thing.\n    context = data;\n    data = undefined;\n  }\n  if (this.type) {\n    if (callback) callback('Document already exists');\n    return \n  }\n\n  this._submitOpData({create: {type:type, data:data}}, context, callback);\n};\n\n// Delete the document. This creates and submits a delete operation to the\n// server. Deleting resets the object's type to null and deletes its data. The\n// document still exists, and still has the version it used to have before you\n// deleted it (well, old version +1).\n//\n// @param context   editing context\n// @param callback  called when operation submitted\nDoc.prototype.del = function(context, callback) {\n  if (!this.type) {\n    if (callback) callback('Document does not exist');\n    return;\n  }\n\n  this._submitOpData({del: true}, context, callback);\n};\n\n\n// Stops the document from sending any operations to the server.\nDoc.prototype.pause = function() {\n  this.paused = true;\n};\n\n// Continue sending operations to the server\nDoc.prototype.resume = function() {\n  this.paused = false;\n  this.flush();\n};\n\n\n// *** Receiving operations\n\n\n// This will be called when the server rejects our operations for some reason.\n// There's not much we can do here if the OT type is noninvertable, but that\n// shouldn't happen too much in real life because readonly documents should be\n// flagged as such. (I should probably figure out a flag for that).\n//\n// This does NOT get called if our op fails to reach the server for some reason\n// - we optimistically assume it'll make it there eventually.\nDoc.prototype._tryRollback = function(opData) {\n  // This is probably horribly broken.\n  if (opData.create) {\n    this._setType(null);\n\n    // I don't think its possible to get here if we aren't in a floating state.\n    if (this.state === 'floating')\n      this.state = null;\n    else\n      console.warn('Rollback a create from state ' + this.state);\n\n  } else if (opData.op && opData.type.invert) {\n    opData.op = opData.type.invert(opData.op);\n\n    // Transform the undo operation by any pending ops.\n    for (var i = 0; i < this.pendingData.length; i++) {\n      xf(this.pendingData[i], opData);\n    }\n\n    // ... and apply it locally, reverting the changes.\n    // \n    // This operation is applied to look like it comes from a remote context.\n    // I'm still not 100% sure about this functionality, because its really a\n    // local op. Basically, the problem is that if the client's op is rejected\n    // by the server, the editor window should update to reflect the undo.\n    this._otApply(opData, false);\n  } else if (opData.op || opData.del) {\n    // This is where an undo stack would come in handy.\n    this._setType(null);\n    this.version = null;\n    this.state = null;\n    this.subscribed = false;\n    this.emit('error', \"Op apply failed and the operation could not be reverted\");\n\n    // Trigger a fetch. In our invalid state, we can't really do anything.\n    this.fetch();\n    this.flush();\n  }\n};\n\nDoc.prototype._clearInflightOp = function(error) {\n  var callbacks = this.inflightData.callbacks;\n  for (var i = 0; i < callbacks.length; i++) {\n    callbacks[i](error || this.inflightData.error);\n  }\n\n  this.inflightData = null;\n  this._clearAction('submit');\n\n  if (!this.pendingData.length) {\n    // This isn't a very good name.\n    this.emit('nothing pending');\n  }\n};\n\n// This is called when the server acknowledges an operation from the client.\nDoc.prototype._opAcknowledged = function(msg) {\n  // Our inflight op has been acknowledged, so we can throw away the inflight data.\n  // (We were only holding on to it incase we needed to resend the op.)\n  if (!this.state) {\n    throw new Error('opAcknowledged called from a null state. This should never happen.');\n  } else if (this.state === 'floating') {\n    if (!this.inflightData.create) throw new Error('Cannot acknowledge an op.');\n\n    // Our create has been acknowledged. This is the same as ingesting some data.\n    this.version = msg.v;\n    this.state = 'ready';\n    var _this = this;\n    setTimeout(function() { _this.emit('ready'); }, 0);\n  } else {\n    // We already have a snapshot. The snapshot should be at the acknowledged\n    // version, because the server has sent us all the ops that have happened\n    // before acknowledging our op.\n\n    // This should never happen - something is out of order.\n    if (msg.v !== this.version)\n      throw new Error('Invalid version from server. This can happen when you submit ops in a submitOp callback.');\n  }\n  \n  // The op was committed successfully. Increment the version number\n  this.version++;\n\n  this._clearInflightOp();\n};\n\n\n// Creates an editing context\n//\n// The context is an object responding to getSnapshot(), submitOp() and\n// destroy(). It also has all the methods from the OT type mixed in.\n// If the document is destroyed, the detach() method is called on the context.\nDoc.prototype.createContext = function() {\n  var type = this.type;\n  if (!type) throw new Error('Missing type');\n\n  // I could use the prototype chain to do this instead, but Object.create\n  // isn't defined on old browsers. This will be fine.\n  var doc = this;\n  var context = {\n    getSnapshot: function() {\n      return doc.snapshot;\n    },\n    submitOp: function(op, callback) {\n      doc.submitOp(op, context, callback);\n    },\n    destroy: function() {\n      if (this.detach) {\n        this.detach();\n        // Don't double-detach.\n        delete this.detach;\n      }\n      // It will be removed from the actual editingContexts list next time\n      // we receive an op on the document (and the list is iterated through).\n      //\n      // This is potentially dodgy, allowing a memory leak if you create &\n      // destroy a whole bunch of contexts without receiving or sending any ops\n      // to the document.\n      //\n      // NOTE Why can't we destroy contexts immediately?\n      delete this._onOp;\n      this.remove = true;\n    },\n\n    // This is dangerous, but really really useful for debugging. I hope people\n    // don't depend on it.\n    _doc: this,\n  };\n\n  if (type.api) {\n    // Copy everything else from the type's API into the editing context.\n    for (var k in type.api) {\n      context[k] = type.api[k];\n    }\n  } else {\n    context.provides = {};\n  }\n\n  this.editingContexts.push(context);\n\n  return context;\n};\n\n\n/**\n * Destroy all editing contexts\n */\nDoc.prototype.removeContexts = function() {\n  for (var i = 0; i < this.editingContexts.length; i++) {\n    this.editingContexts[i].destroy();\n  }\n  this.editingContexts.length = 0;\n};\n","\nexports.Connection = require('./connection').Connection;\nexports.Doc = require('./doc').Doc;\nexports.registerType = require('./register').registerType;","// This is a simple rewrite of microevent.js. I've changed the\n// function names to be consistent with node.js EventEmitter.\n//\n// microevent.js is copyright Jerome Etienne, and licensed under the MIT license:\n// https://github.com/jeromeetienne/microevent.js\n\nvar MicroEvent = function() {};\n\nMicroEvent.prototype.on = function(event, fn) {\n  var events = this._events = this._events || {};\n  (events[event] = events[event] || []).push(fn);\n};\n\nMicroEvent.prototype.removeListener = function(event, fn) {\n  var events = this._events = this._events || {};\n  var listeners = events[event] = events[event] || [];\n\n  // Sadly, no IE8 support for indexOf.\n  var i = 0;\n  while (i < listeners.length) {\n    if (listeners[i] === fn) {\n      listeners[i] = undefined;\n    }\n    i++;\n  }\n\n  // Compact the list when no event handler is actually running.\n  setTimeout(function() {\n    events[event] = [];\n    var fn;\n    for (var i = 0; i < listeners.length; i++) {\n      // Only add back event handlers which exist.\n      if ((fn = listeners[i])) events[event].push(fn);\n    }\n  }, 0);\n};\n\nMicroEvent.prototype.emit = function(event) {\n  var events = this._events;\n  var args = Array.prototype.splice.call(arguments, 1);\n\n  if (!events || !events[event]) {\n    if (event == 'error') {\n      if (console) {\n        console.error.apply(console, args);\n      }\n    }\n    return;\n  }\n\n  var listeners = events[event];\n  for (var i = 0; i < listeners.length; i++) {\n    if (listeners[i]) {\n      listeners[i].apply(this, args);\n    }\n  }\n};\n\nMicroEvent.prototype.once = function(event, fn) {\n  var listener, _this = this;\n  this.on(event, listener = function() {\n    _this.removeListener(event, listener);\n    fn.apply(_this, arguments);\n  });\n};\n\nMicroEvent.mixin = function(obj) {\n  var proto = obj.prototype || obj;\n  proto.on = MicroEvent.prototype.on;\n  proto.removeListener = MicroEvent.prototype.removeListener;\n  proto.emit = MicroEvent.prototype.emit;\n  proto.once = MicroEvent.prototype.once;\n  return obj;\n};\n\nif (typeof module !== \"undefined\") module.exports = MicroEvent;\n\n","var Doc;\nif (typeof require !== 'undefined') {\n  Doc = require('./doc').Doc;\n}\n\n// Queries are live requests to the database for particular sets of fields.\n//\n// The server actively tells the client when there's new data that matches\n// a set of conditions.\nvar Query = exports.Query = function(type, connection, id, collection, query, options, callback) {\n  // 'fetch' or 'sub'\n  this.type = type;\n\n  this.connection = connection;\n  this.id = id;\n  this.collection = collection;\n\n  // The query itself. For mongo, this should look something like {\"data.x\":5}\n  this.query = query;\n\n  // Resultant document action for the server. Fetch mode will automatically\n  // fetch all results. Subscribe mode will automatically subscribe all\n  // results. Results are never unsubscribed.\n  this.docMode = options.docMode; // undefined, 'fetch' or 'sub'.\n  if (this.docMode === 'subscribe') this.docMode = 'sub';\n\n  // Do we repoll the entire query whenever anything changes? (As opposed to\n  // just polling the changed item). This needs to be enabled to be able to use\n  // ordered queries (sortby:) and paginated queries. Set to undefined, it will\n  // be enabled / disabled automatically based on the query's properties.\n  this.poll = options.poll;\n\n  // The backend we actually hit. If this isn't defined, it hits the snapshot\n  // database. Otherwise this can be used to hit another configured query\n  // index.\n  this.backend = options.backend || options.source;\n\n  // A list of resulting documents. These are actual documents, complete with\n  // data and all the rest. If fetch is false, these documents will not\n  // have any data. You should manually call fetch() or subscribe() on them.\n  //\n  // Calling subscribe() might be a good idea anyway, as you won't be\n  // subscribed to the documents by default.\n  this.knownDocs = options.knownDocs || [];\n  this.results = [];\n\n  // Do we have some initial data?\n  this.ready = false;\n\n  this.callback = callback;\n};\nQuery.prototype.action = 'qsub';\n\n// Helper for subscribe & fetch, since they share the same message format.\n//\n// This function actually issues the query.\nQuery.prototype._execute = function() {\n  if (!this.connection.canSend) return;\n\n  if (this.docMode) {\n    var collectionVersions = {};\n    // Collect the version of all the documents in the current result set so we\n    // don't need to be sent their snapshots again.\n    for (var i = 0; i < this.knownDocs.length; i++) {\n      var doc = this.knownDocs[i];\n      // If we're subscribed, the server already knows which version of the doc\n      // we have.\n      if (!doc.subscribed && doc.action !== 'subscribe') {\n        var c = collectionVersions[doc.collection] = collectionVersions[doc.collection] || {};\n        c[doc.name] = doc.version;\n      }\n    }\n  }\n\n  var msg = {\n    a: 'q' + this.type,\n    id: this.id,\n    c: this.collection,\n    o: {},\n    q: this.query,\n  };\n\n  if (this.docMode) {\n    msg.o.m = this.docMode;\n    // This should be omitted if empty, but whatever.\n    msg.o.vs = collectionVersions;\n  }\n  if (this.backend != null) msg.o.b = this.backend;\n  if (this.poll !== undefined) msg.o.p = this.poll;\n\n  this.connection.send(msg);\n};\n\n// Make a list of documents from the list of server-returned data objects\nQuery.prototype._dataToDocs = function(data) {\n  var results = [];\n  var lastType;\n  for (var i = 0; i < data.length; i++) {\n    var docData = data[i];\n\n    // Types are only put in for the first result in the set and every time the type changes in the list.\n    if (docData.type) {\n      lastType = docData.type;\n    } else {\n      docData.type = lastType;\n    }\n\n    var doc = this.connection.get(docData.c || this.collection, docData.d, docData);\n    // Force the document to know its subscribed if we're in docmode:subscribe.\n    if (this.docMode === 'sub') {\n      doc.subscribed = true; // Set before setWantSubscribe() so flush doesn't send a subscribe request.\n      doc._setWantSubscribe(true); // this will call any subscribe callbacks or whatever.\n      doc.emit('subscribe');\n      doc._finishSub(true); // this doesn't actually do anything here, but its more correct to have it.\n    }\n    results.push(doc);\n  }\n  return results;\n};\n\n// Destroy the query object. Any subsequent messages for the query will be\n// ignored by the connection. You should unsubscribe from the query before\n// destroying it.\nQuery.prototype.destroy = function() {\n  if (this.connection.canSend && this.type === 'sub') {\n    this.connection.send({a:'qunsub', id:this.id});\n  }\n\n  this.connection._destroyQuery(this);\n};\n\nQuery.prototype._onConnectionStateChanged = function(state, reason) {\n  if (this.connection.state === 'connecting') {\n    this._execute();\n  }\n};\n\n// Internal method called from connection to pass server messages to the query.\nQuery.prototype._onMessage = function(msg) {\n  if ((msg.a === 'qfetch') !== (this.type === 'fetch')) {\n    if (console) console.warn('Invalid message sent to query', msg, this);\n    return;\n  }\n\n  if (msg.error) this.emit('error', msg.error);\n\n  switch (msg.a) {\n    case 'qfetch':\n      var results = msg.data ? this._dataToDocs(msg.data) : undefined;\n      if (this.callback) this.callback(msg.error, results, msg.extra);\n      // Once a fetch query gets its data, it is destroyed.\n      this.connection._destroyQuery(this);\n      break;\n\n    case 'q':\n      // Query diff data (inserts and removes)\n      if (msg.diff) {\n        // We need to go through the list twice. First, we'll ingest all the\n        // new documents and set them as subscribed.  After that we'll emit\n        // events and actually update our list. This avoids race conditions\n        // around setting documents to be subscribed & unsubscribing documents\n        // in event callbacks.\n        for (var i = 0; i < msg.diff.length; i++) {\n          var d = msg.diff[i];\n          if (d.type === 'insert') d.values = this._dataToDocs(d.values);\n        }\n\n        for (var i = 0; i < msg.diff.length; i++) {\n          var d = msg.diff[i];\n          switch (d.type) {\n            case 'insert':\n              var newDocs = d.values;\n              Array.prototype.splice.apply(this.results, [d.index, 0].concat(newDocs));\n              this.emit('insert', newDocs, d.index);\n              break;\n            case 'remove':\n              var howMany = d.howMany || 1;\n              var removed = this.results.splice(d.index, howMany);\n              this.emit('remove', removed, d.index);\n              break;\n            case 'move':\n              var howMany = d.howMany || 1;\n              var docs = this.results.splice(d.from, howMany);\n              Array.prototype.splice.apply(this.results, [d.to, 0].concat(docs));\n              this.emit('move', docs, d.from, d.to);\n              break;\n          }\n        }\n      }\n\n      if (msg.extra) {\n        this.emit('extra', msg.extra);\n      }\n      break;\n    case 'qsub':\n      // This message replaces the entire result set with the set passed.\n      if (!msg.error) {\n        var previous = this.results;\n\n        // Then add everything in the new result set.\n        this.results = this.knownDocs = this._dataToDocs(msg.data);\n        this.extra = msg.extra;\n\n        this.ready = true;\n        this.emit('change', this.results, previous);\n      }\n      if (this.callback) {\n        this.callback(msg.error, this.results, this.extra);\n        delete this.callback;\n      }\n      break;\n  }\n};\n\n// Change the thing we're searching for. This isn't fully supported on the\n// backend (it destroys the old query and makes a new one) - but its\n// programatically useful and I might add backend support at some point.\nQuery.prototype.setQuery = function(q) {\n  if (this.type !== 'sub') throw new Error('cannot change a fetch query');\n\n  this.query = q;\n  if (this.connection.canSend) {\n    // There's no 'change' message to send to the server. Just resubscribe.\n    this.connection.send({a:'qunsub', id:this.id});\n    this._execute();\n  }\n};\n\nvar MicroEvent;\nif (typeof require !== 'undefined') {\n  MicroEvent = require('./microevent');\n}\n\nMicroEvent.mixin(Query);\n\n","var types;\nif (typeof require !== \"undefined\") {\n  types = require('ottypes');\n} else {\n  types = window.ottypes;\n}\n\nexports.registerType = function(type) {\n  if (type.name) types[type.name] = type;\n  if (type.uri) types[type.uri] = type;\n};","// These methods let you build a transform function from a transformComponent\n// function for OT types like JSON0 in which operations are lists of components\n// and transforming them requires N^2 work. I find it kind of nasty that I need\n// this, but I'm not really sure what a better solution is. Maybe I should do\n// this automatically to types that don't have a compose function defined.\n\n// Add transform and transformX functions for an OT type which has\n// transformComponent defined.  transformComponent(destination array,\n// component, other component, side)\nexports._bootstrapTransform = function(type, transformComponent, checkValidOp, append) {\n  var transformComponentX = function(left, right, destLeft, destRight) {\n    transformComponent(destLeft, left, right, 'left');\n    transformComponent(destRight, right, left, 'right');\n  };\n\n  var transformX = type.transformX = function(leftOp, rightOp) {\n    checkValidOp(leftOp);\n    checkValidOp(rightOp);\n    var newRightOp = [];\n\n    for (var i = 0; i < rightOp.length; i++) {\n      var rightComponent = rightOp[i];\n\n      // Generate newLeftOp by composing leftOp by rightComponent\n      var newLeftOp = [];\n      var k = 0;\n      while (k < leftOp.length) {\n        var nextC = [];\n        transformComponentX(leftOp[k], rightComponent, newLeftOp, nextC);\n        k++;\n\n        if (nextC.length === 1) {\n          rightComponent = nextC[0];\n        } else if (nextC.length === 0) {\n          for (var j = k; j < leftOp.length; j++) {\n            append(newLeftOp, leftOp[j]);\n          }\n          rightComponent = null;\n          break;\n        } else {\n          // Recurse.\n          var pair = transformX(leftOp.slice(k), nextC);\n          for (var l = 0; l < pair[0].length; l++) {\n            append(newLeftOp, pair[0][l]);\n          }\n          for (var r = 0; r < pair[1].length; r++) {\n            append(newRightOp, pair[1][r]);\n          }\n          rightComponent = null;\n          break;\n        }\n      }\n\n      if (rightComponent != null) {\n        append(newRightOp, rightComponent);\n      }\n      leftOp = newLeftOp;\n    }\n    return [leftOp, newRightOp];\n  };\n\n  // Transforms op with specified type ('left' or 'right') by otherOp.\n  type.transform = type['transform'] = function(op, otherOp, type) {\n    if (!(type === 'left' || type === 'right'))\n      throw new Error(\"type must be 'left' or 'right'\");\n\n    if (otherOp.length === 0) return op;\n\n    if (op.length === 1 && otherOp.length === 1)\n      return transformComponent([], op[0], otherOp[0], type);\n\n    if (type === 'left')\n      return transformX(op, otherOp)[0];\n    else\n      return transformX(otherOp, op)[1];\n  };\n};\n","\nvar register = function(type) {\n  exports[type.name] = type;\n  if (type.uri) {\n    return exports[type.uri] = type;\n  }\n};\n\n// Import all the built-in types. Requiring directly rather than in register()\n// so browserify works.\nregister(require('./simple'));\n\nregister(require('./text'));\nregister(require('./text-tp2'));\n\n// This is deprecated, but exported for json0.\nregister(require('./text0'));\nregister(require('./json0'));\n\n","/*\n This is the implementation of the JSON OT type.\n\n Spec is here: https://github.com/josephg/ShareJS/wiki/JSON-Operations\n\n Note: This is being made obsolete. It will soon be replaced by the JSON2 type.\n*/\n\n/**\n * UTILITY FUNCTIONS\n */\n\n/**\n * Checks if the passed object is an Array instance. Can't use Array.isArray\n * yet because its not supported on IE8.\n *\n * @param obj\n * @returns {boolean}\n */\nvar isArray = function(obj) {\n  return Object.prototype.toString.call(obj) == '[object Array]';\n};\n\n/**\n * Clones the passed object using JSON serialization (which is slow).\n *\n * hax, copied from test/types/json. Apparently this is still the fastest way\n * to deep clone an object, assuming we have browser support for JSON.  @see\n * http://jsperf.com/cloning-an-object/12\n */\nvar clone = function(o) {\n  return JSON.parse(JSON.stringify(o));\n};\n\n/**\n * Reference to the Text OT type. This is used for the JSON String operations.\n * @type {*}\n */\nif (typeof text === 'undefined')\n  var text = typeof require !== \"undefined\" ? require('./text0') : window.ottypes.text;\n\n/**\n * JSON OT Type\n * @type {*}\n */\nvar json = { \n  name: 'json0',\n  uri: 'http://sharejs.org/types/JSONv0'\n};\n\njson.create = function(data) {\n  // Null instead of undefined if you don't pass an argument.\n  return data === undefined ? null : clone(data);\n};\n\njson.invertComponent = function(c) {\n  var c_ = {p: c.p};\n\n  if (c.si !== void 0) c_.sd = c.si;\n  if (c.sd !== void 0) c_.si = c.sd;\n  if (c.oi !== void 0) c_.od = c.oi;\n  if (c.od !== void 0) c_.oi = c.od;\n  if (c.li !== void 0) c_.ld = c.li;\n  if (c.ld !== void 0) c_.li = c.ld;\n  if (c.na !== void 0) c_.na = -c.na;\n\n  if (c.lm !== void 0) {\n    c_.lm = c.p[c.p.length-1];\n    c_.p = c.p.slice(0,c.p.length-1).concat([c.lm]);\n  }\n\n  return c_;\n};\n\njson.invert = function(op) {\n  var op_ = op.slice().reverse();\n  var iop = [];\n  for (var i = 0; i < op_.length; i++) {\n    iop.push(json.invertComponent(op_[i]));\n  }\n  return iop;\n};\n\njson.checkValidOp = function(op) {\n  for (var i = 0; i < op.length; i++) {\n    if (!isArray(op[i].p)) throw new Error('Missing path');\n  }\n};\n\njson.checkList = function(elem) {\n  if (!isArray(elem))\n    throw new Error('Referenced element not a list');\n};\n\njson.checkObj = function(elem) {\n  if (elem.constructor !== Object) {\n    throw new Error(\"Referenced element not an object (it was \" + JSON.stringify(elem) + \")\");\n  }\n};\n\njson.apply = function(snapshot, op) {\n  json.checkValidOp(op);\n\n  op = clone(op);\n\n  var container = {\n    data: snapshot\n  };\n\n  for (var i = 0; i < op.length; i++) {\n    var c = op[i];\n\n    var parent = null;\n    var parentKey = null;\n    var elem = container;\n    var key = 'data';\n\n    for (var j = 0; j < c.p.length; j++) {\n      var p = c.p[j];\n\n      parent = elem;\n      parentKey = key;\n      elem = elem[key];\n      key = p;\n\n      if (parent == null)\n        throw new Error('Path invalid');\n    }\n\n    // Number add\n    if (c.na !== void 0) {\n      if (typeof elem[key] != 'number')\n        throw new Error('Referenced element not a number');\n\n      elem[key] += c.na;\n    }\n\n    // String insert\n    else if (c.si !== void 0) {\n      if (typeof elem != 'string')\n        throw new Error('Referenced element not a string (it was '+JSON.stringify(elem)+')');\n\n      parent[parentKey] = elem.slice(0,key) + c.si + elem.slice(key);\n    }\n\n    // String delete\n    else if (c.sd !== void 0) {\n      if (typeof elem != 'string')\n        throw new Error('Referenced element not a string');\n\n      if (elem.slice(key,key + c.sd.length) !== c.sd)\n        throw new Error('Deleted string does not match');\n\n      parent[parentKey] = elem.slice(0,key) + elem.slice(key + c.sd.length);\n    }\n\n    // List replace\n    else if (c.li !== void 0 && c.ld !== void 0) {\n      json.checkList(elem);\n      // Should check the list element matches c.ld\n      elem[key] = c.li;\n    }\n\n    // List insert\n    else if (c.li !== void 0) {\n      json.checkList(elem);\n      elem.splice(key,0, c.li);\n    }\n\n    // List delete\n    else if (c.ld !== void 0) {\n      json.checkList(elem);\n      // Should check the list element matches c.ld here too.\n      elem.splice(key,1);\n    }\n\n    // List move\n    else if (c.lm !== void 0) {\n      json.checkList(elem);\n      if (c.lm != key) {\n        var e = elem[key];\n        // Remove it...\n        elem.splice(key,1);\n        // And insert it back.\n        elem.splice(c.lm,0,e);\n      }\n    }\n\n    // Object insert / replace\n    else if (c.oi !== void 0) {\n      json.checkObj(elem);\n\n      // Should check that elem[key] == c.od\n      elem[key] = c.oi;\n    }\n\n    // Object delete\n    else if (c.od !== void 0) {\n      json.checkObj(elem);\n\n      // Should check that elem[key] == c.od\n      delete elem[key];\n    }\n\n    else {\n      throw new Error('invalid / missing instruction in op');\n    }\n  }\n\n  return container.data;\n};\n\n// Helper to break an operation up into a bunch of small ops.\njson.shatter = function(op) {\n  var results = [];\n  for (var i = 0; i < op.length; i++) {\n    results.push([op[i]]);\n  }\n  return results;\n};\n\n// Helper for incrementally applying an operation to a snapshot. Calls yield\n// after each op component has been applied.\njson.incrementalApply = function(snapshot, op, _yield) {\n  for (var i = 0; i < op.length; i++) {\n    var smallOp = [op[i]];\n    snapshot = json.apply(snapshot, smallOp);\n    // I'd just call this yield, but thats a reserved keyword. Bah!\n    _yield(smallOp, snapshot);\n  }\n  \n  return snapshot;\n};\n\n// Checks if two paths, p1 and p2 match.\nvar pathMatches = json.pathMatches = function(p1, p2, ignoreLast) {\n  if (p1.length != p2.length)\n    return false;\n\n  for (var i = 0; i < p1.length; i++) {\n    if (p1[i] !== p2[i] && (!ignoreLast || i !== p1.length - 1))\n      return false;\n  }\n\n  return true;\n};\n\nvar _convertToTextComponent = function(component) {\n  var newC = {p: component.p[component.p.length - 1]};\n  if (component.si != null) {\n    newC.i = component.si;\n  } else {\n    newC.d = component.sd;\n  }\n  return newC;\n};\n\njson.append = function(dest,c) {\n  c = clone(c);\n\n  var last;\n\n  if (dest.length != 0 && pathMatches(c.p, (last = dest[dest.length - 1]).p)) {\n    if (last.na != null && c.na != null) {\n      dest[dest.length - 1] = {p: last.p, na: last.na + c.na};\n    } else if (last.li !== undefined && c.li === undefined && c.ld === last.li) {\n      // insert immediately followed by delete becomes a noop.\n      if (last.ld !== undefined) {\n        // leave the delete part of the replace\n        delete last.li;\n      } else {\n        dest.pop();\n      }\n    } else if (last.od !== undefined && last.oi === undefined && c.oi !== undefined && c.od === undefined) {\n      last.oi = c.oi;\n    } else if (last.oi !== undefined && c.od !== undefined) {\n      // The last path component inserted something that the new component deletes (or replaces).\n      // Just merge them.\n      if (c.oi !== undefined) {\n        last.oi = c.oi;\n      } else if (last.od !== undefined) {\n        delete last.oi;\n      } else {\n        // An insert directly followed by a delete turns into a no-op and can be removed.\n        dest.pop();\n      }\n    } else if (c.lm !== undefined && c.p[c.p.length - 1] === c.lm) {\n      // don't do anything\n    } else {\n      dest.push(c);\n    }\n  } else if (dest.length != 0 && pathMatches(c.p, last.p, true)) {\n    if ((c.si != null || c.sd != null) && (last.si != null || last.sd != null)) {\n      // Try to compose the string ops together using text's equivalent methods\n      var textOp = [_convertToTextComponent(last)];\n      text._append(textOp, _convertToTextComponent(c));\n      \n      // Then convert back.\n      if (textOp.length !== 1) {\n        dest.push(c);\n      } else {\n        var textC = textOp[0];\n        last.p[last.p.length - 1] = textC.p;\n        if (textC.i != null)\n          last.si = textC.i;\n        else\n          last.sd = textC.d;\n      }\n    } else {\n      dest.push(c);\n    }\n  } else {\n    dest.push(c);\n  }\n};\n\njson.compose = function(op1,op2) {\n  json.checkValidOp(op1);\n  json.checkValidOp(op2);\n\n  var newOp = clone(op1);\n\n  for (var i = 0; i < op2.length; i++) {\n    json.append(newOp,op2[i]);\n  }\n\n  return newOp;\n};\n\njson.normalize = function(op) {\n  var newOp = [];\n\n  op = isArray(op) ? op : [op];\n\n  for (var i = 0; i < op.length; i++) {\n    var c = op[i];\n    if (c.p == null) c.p = [];\n\n    json.append(newOp,c);\n  }\n\n  return newOp;\n};\n\n// Returns true if an op at otherPath may affect an op at path\njson.canOpAffectOp = function(otherPath,path) {\n  if (otherPath.length === 0) return true;\n  if (path.length === 0) return false;\n\n  path = path.slice(0,path.length - 1);\n  otherPath = otherPath.slice(0,otherPath.length - 1);\n\n  for (var i = 0; i < otherPath.length; i++) {\n    var p = otherPath[i];\n    if (i >= path.length || p != path[i]) return false;\n  }\n\n  // Same\n  return true;\n};\n\n// transform c so it applies to a document with otherC applied.\njson.transformComponent = function(dest, c, otherC, type) {\n  c = clone(c);\n\n  if (c.na !== void 0)\n    c.p.push(0);\n\n  if (otherC.na !== void 0)\n    otherC.p.push(0);\n\n  var common;\n  if (json.canOpAffectOp(otherC.p, c.p))\n    common = otherC.p.length - 1;\n\n  var common2;\n  if (json.canOpAffectOp(c.p,otherC.p))\n    common2 = c.p.length - 1;\n\n  var cplength = c.p.length;\n  var otherCplength = otherC.p.length;\n\n  if (c.na !== void 0) // hax\n    c.p.pop();\n\n  if (otherC.na !== void 0)\n    otherC.p.pop();\n\n  if (otherC.na) {\n    if (common2 != null && otherCplength >= cplength && otherC.p[common2] == c.p[common2]) {\n      if (c.ld !== void 0) {\n        var oc = clone(otherC);\n        oc.p = oc.p.slice(cplength);\n        c.ld = json.apply(clone(c.ld),[oc]);\n      } else if (c.od !== void 0) {\n        var oc = clone(otherC);\n        oc.p = oc.p.slice(cplength);\n        c.od = json.apply(clone(c.od),[oc]);\n      }\n    }\n    json.append(dest,c);\n    return dest;\n  }\n\n  // if c is deleting something, and that thing is changed by otherC, we need to\n  // update c to reflect that change for invertibility.\n  // TODO this is probably not needed since we don't have invertibility\n  if (common2 != null && otherCplength > cplength && c.p[common2] == otherC.p[common2]) {\n    if (c.ld !== void 0) {\n      var oc = clone(otherC);\n      oc.p = oc.p.slice(cplength);\n      c.ld = json.apply(clone(c.ld),[oc]);\n    } else if (c.od !== void 0) {\n      var oc = clone(otherC);\n      oc.p = oc.p.slice(cplength);\n      c.od = json.apply(clone(c.od),[oc]);\n    }\n  }\n\n  if (common != null) {\n    var commonOperand = cplength == otherCplength;\n\n    // transform based on otherC\n    if (otherC.na !== void 0) {\n      // this case is handled above due to icky path hax\n    } else if (otherC.si !== void 0 || otherC.sd !== void 0) {\n      // String op vs string op - pass through to text type\n      if (c.si !== void 0 || c.sd !== void 0) {\n        if (!commonOperand) throw new Error('must be a string?');\n\n        // Convert an op component to a text op component so we can use the\n        // text type's transform function\n        var tc1 = _convertToTextComponent(c);\n        var tc2 = _convertToTextComponent(otherC);\n\n        var res = [];\n\n        // actually transform\n        text._tc(res, tc1, tc2, type);\n        \n        // .... then convert the result back into a JSON op again.\n        for (var i = 0; i < res.length; i++) {\n          // Text component\n          var tc = res[i];\n          // JSON component\n          var jc = {p: c.p.slice(0, common)};\n          jc.p.push(tc.p);\n\n          if (tc.i != null) jc.si = tc.i;\n          if (tc.d != null) jc.sd = tc.d;\n          json.append(dest, jc);\n        }\n        return dest;\n      }\n    } else if (otherC.li !== void 0 && otherC.ld !== void 0) {\n      if (otherC.p[common] === c.p[common]) {\n        // noop\n\n        if (!commonOperand) {\n          return dest;\n        } else if (c.ld !== void 0) {\n          // we're trying to delete the same element, -> noop\n          if (c.li !== void 0 && type === 'left') {\n            // we're both replacing one element with another. only one can survive\n            c.ld = clone(otherC.li);\n          } else {\n            return dest;\n          }\n        }\n      }\n    } else if (otherC.li !== void 0) {\n      if (c.li !== void 0 && c.ld === undefined && commonOperand && c.p[common] === otherC.p[common]) {\n        // in li vs. li, left wins.\n        if (type === 'right')\n          c.p[common]++;\n      } else if (otherC.p[common] <= c.p[common]) {\n        c.p[common]++;\n      }\n\n      if (c.lm !== void 0) {\n        if (commonOperand) {\n          // otherC edits the same list we edit\n          if (otherC.p[common] <= c.lm)\n            c.lm++;\n          // changing c.from is handled above.\n        }\n      }\n    } else if (otherC.ld !== void 0) {\n      if (c.lm !== void 0) {\n        if (commonOperand) {\n          if (otherC.p[common] === c.p[common]) {\n            // they deleted the thing we're trying to move\n            return dest;\n          }\n          // otherC edits the same list we edit\n          var p = otherC.p[common];\n          var from = c.p[common];\n          var to = c.lm;\n          if (p < to || (p === to && from < to))\n            c.lm--;\n\n        }\n      }\n\n      if (otherC.p[common] < c.p[common]) {\n        c.p[common]--;\n      } else if (otherC.p[common] === c.p[common]) {\n        if (otherCplength < cplength) {\n          // we're below the deleted element, so -> noop\n          return dest;\n        } else if (c.ld !== void 0) {\n          if (c.li !== void 0) {\n            // we're replacing, they're deleting. we become an insert.\n            delete c.ld;\n          } else {\n            // we're trying to delete the same element, -> noop\n            return dest;\n          }\n        }\n      }\n\n    } else if (otherC.lm !== void 0) {\n      if (c.lm !== void 0 && cplength === otherCplength) {\n        // lm vs lm, here we go!\n        var from = c.p[common];\n        var to = c.lm;\n        var otherFrom = otherC.p[common];\n        var otherTo = otherC.lm;\n        if (otherFrom !== otherTo) {\n          // if otherFrom == otherTo, we don't need to change our op.\n\n          // where did my thing go?\n          if (from === otherFrom) {\n            // they moved it! tie break.\n            if (type === 'left') {\n              c.p[common] = otherTo;\n              if (from === to) // ugh\n                c.lm = otherTo;\n            } else {\n              return dest;\n            }\n          } else {\n            // they moved around it\n            if (from > otherFrom) c.p[common]--;\n            if (from > otherTo) c.p[common]++;\n            else if (from === otherTo) {\n              if (otherFrom > otherTo) {\n                c.p[common]++;\n                if (from === to) // ugh, again\n                  c.lm++;\n              }\n            }\n\n            // step 2: where am i going to put it?\n            if (to > otherFrom) {\n              c.lm--;\n            } else if (to === otherFrom) {\n              if (to > from)\n                c.lm--;\n            }\n            if (to > otherTo) {\n              c.lm++;\n            } else if (to === otherTo) {\n              // if we're both moving in the same direction, tie break\n              if ((otherTo > otherFrom && to > from) ||\n                  (otherTo < otherFrom && to < from)) {\n                if (type === 'right') c.lm++;\n              } else {\n                if (to > from) c.lm++;\n                else if (to === otherFrom) c.lm--;\n              }\n            }\n          }\n        }\n      } else if (c.li !== void 0 && c.ld === undefined && commonOperand) {\n        // li\n        var from = otherC.p[common];\n        var to = otherC.lm;\n        p = c.p[common];\n        if (p > from) c.p[common]--;\n        if (p > to) c.p[common]++;\n      } else {\n        // ld, ld+li, si, sd, na, oi, od, oi+od, any li on an element beneath\n        // the lm\n        //\n        // i.e. things care about where their item is after the move.\n        var from = otherC.p[common];\n        var to = otherC.lm;\n        p = c.p[common];\n        if (p === from) {\n          c.p[common] = to;\n        } else {\n          if (p > from) c.p[common]--;\n          if (p > to) c.p[common]++;\n          else if (p === to && from > to) c.p[common]++;\n        }\n      }\n    }\n    else if (otherC.oi !== void 0 && otherC.od !== void 0) {\n      if (c.p[common] === otherC.p[common]) {\n        if (c.oi !== void 0 && commonOperand) {\n          // we inserted where someone else replaced\n          if (type === 'right') {\n            // left wins\n            return dest;\n          } else {\n            // we win, make our op replace what they inserted\n            c.od = otherC.oi;\n          }\n        } else {\n          // -> noop if the other component is deleting the same object (or any parent)\n          return dest;\n        }\n      }\n    } else if (otherC.oi !== void 0) {\n      if (c.oi !== void 0 && c.p[common] === otherC.p[common]) {\n        // left wins if we try to insert at the same place\n        if (type === 'left') {\n          json.append(dest,{p: c.p, od:otherC.oi});\n        } else {\n          return dest;\n        }\n      }\n    } else if (otherC.od !== void 0) {\n      if (c.p[common] == otherC.p[common]) {\n        if (!commonOperand)\n          return dest;\n        if (c.oi !== void 0) {\n          delete c.od;\n        } else {\n          return dest;\n        }\n      }\n    }\n  }\n\n  json.append(dest,c);\n  return dest;\n};\n\nif (exports._bootstrapTransform) {\n  exports._bootstrapTransform(json, json.transformComponent, json.checkValidOp, json.append);\n} else {\n  require('./helpers')._bootstrapTransform(json, json.transformComponent, json.checkValidOp, json.append);\n}\n\nmodule.exports = json;\n","// This is a really simple OT type. Its not compiled with the web client, but it could be.\n//\n// Its mostly included for demonstration purposes and its used in the meta unit tests.\n//\n// This defines a really simple text OT type which only allows inserts. (No deletes).\n//\n// Ops look like:\n//   {position:#, text:\"asdf\"}\n//\n// Document snapshots look like:\n//   {str:string}\n\nmodule.exports = {\n  // The name of the OT type. The type itself is exposed to ottypes[type.name] and ottypes[type.uri].\n  // The name can be used instead of the actual type in all API methods in ShareJS.\n  name: 'simple',\n\n  // Canonical name.\n  uri: 'http://sharejs.org/types/simple',\n\n  // Create a new document snapshot. Initial data can be passed in.\n  create: function(initial) {\n    if (initial == null)\n      initial = '';\n\n    return {str: initial};\n  },\n\n  // Apply the given op to the document snapshot. Returns the new snapshot.\n  apply: function(snapshot, op) {\n    if (op.position < 0 || op.position > snapshot.str.length)\n      throw new Error('Invalid position');\n\n    var str = snapshot.str;\n    str = str.slice(0, op.position) + op.text + str.slice(op.position);\n    return {str: str};\n  },\n\n  // Transform op1 by op2. Returns transformed version of op1.\n  // Sym describes the symmetry of the operation. Its either 'left' or 'right'\n  // depending on whether the op being transformed comes from the client or the\n  // server.\n  transform: function(op1, op2, sym) {\n    var pos = op1.position;\n\n    if (op2.position < pos || (op2.position === pos && sym === 'left')) {\n      pos += op2.text.length;\n    }\n\n    return {position: pos, text: op1.text};\n  }\n};\n\n","// A TP2 implementation of text, following this spec:\n// http://code.google.com/p/lightwave/source/browse/trunk/experimental/ot/README\n//\n// A document is made up of a string and a set of tombstones inserted throughout\n// the string. For example, 'some ', (2 tombstones), 'string'.\n//\n// This is encoded in a document as: {s:'some string', t:[5, -2, 6]}\n//\n// Ops are lists of components which iterate over the whole document. (I might\n// change this at some point, but a version thats less strict is backwards\n// compatible.)\n//\n// Components are either:\n//   N:         Skip N characters in the original document\n//   {i:'str'}: Insert 'str' at the current position in the document\n//   {i:N}:     Insert N tombstones at the current position in the document\n//   {d:N}:     Delete (tombstone) N characters at the current position in the document\n//\n// Eg: [3, {i:'hi'}, 5, {d:8}]\n//\n// Snapshots are lists with characters and tombstones. Characters are stored in strings\n// and adjacent tombstones are flattened into numbers.\n//\n// Eg, the document: 'Hello .....world' ('.' denotes tombstoned (deleted) characters)\n// would be represented by a document snapshot of ['Hello ', 5, 'world']\n\n//var append, appendDoc, componentLength, makeTake, takeDoc, transformer;\n\nvar type = module.exports = {\n  name: 'text-tp2',\n  tp2: true,\n  uri: 'http://sharejs.org/types/text-tp2v1',\n  create: function(initial) {\n    if (initial == null) {\n      initial = '';\n    } else {\n      if (typeof initial != 'string') throw new Error('Initial data must be a string');\n    }\n\n    return {\n      charLength: initial.length,\n      totalLength: initial.length,\n      data: initial.length ? [initial] : []\n    };\n  },\n\n  serialize: function(doc) {\n    if (!doc.data) {\n      throw new Error('invalid doc snapshot');\n    }\n    return doc.data;\n  },\n\n  deserialize: function(data) {\n    var doc = type.create();\n    doc.data = data;\n\n    for (var i = 0; i < data.length; i++) {\n      var component = data[i];\n\n      if (typeof component === 'string') {\n        doc.charLength += component.length;\n        doc.totalLength += component.length;\n      } else {\n        doc.totalLength += component;\n      }\n    }\n\n    return doc;\n  }\n};\n\nvar isArray = Array.isArray || function(obj) {\n  return Object.prototype.toString.call(obj) == '[object Array]';\n};\n\nvar checkOp = function(op) {\n  if (!isArray(op)) throw new Error('Op must be an array of components');\n\n  var last = null;\n  for (var i = 0; i < op.length; i++) {\n    var c = op[i];\n    if (typeof c == 'object') {\n      // The component is an insert or a delete.\n      if (c.i !== undefined) { // Insert.\n        if (!((typeof c.i === 'string' && c.i.length > 0) // String inserts\n              || (typeof c.i === 'number' && c.i > 0))) // Tombstone inserts\n          throw new Error('Inserts must insert a string or a +ive number');\n\n      } else if (c.d !== undefined) { // Delete\n        if (!(typeof c.d === 'number' && c.d > 0))\n          throw new Error('Deletes must be a +ive number');\n\n      } else throw new Error('Operation component must define .i or .d');\n\n    } else {\n      // The component must be a skip.\n      if (typeof c != 'number') throw new Error('Op components must be objects or numbers');\n\n      if (c <= 0) throw new Error('Skip components must be a positive number');\n      if (typeof last === 'number') throw new Error('Adjacent skip components should be combined');\n    }\n\n    last = c;\n  }\n};\n\n// Take the next part from the specified position in a document snapshot.\n// position = {index, offset}. It will be updated.\nvar takeDoc = type._takeDoc = function(doc, position, maxlength, tombsIndivisible) {\n  if (position.index >= doc.data.length)\n    throw new Error('Operation goes past the end of the document');\n\n  var part = doc.data[position.index];\n\n  // This can be written as an ugly-arsed giant ternary statement, but its much\n  // more readable like this. Uglify will convert it into said ternary anyway.\n  var result;\n  if (typeof part == 'string') {\n    if (maxlength != null) {\n      result = part.slice(position.offset, position.offset + maxlength);\n    } else {\n      result = part.slice(position.offset);\n    }\n  } else {\n    if (maxlength == null || tombsIndivisible) {\n      result = part - position.offset;\n    } else {\n      result = Math.min(maxlength, part - position.offset);\n    }\n  }\n\n  var resultLen = result.length || result;\n\n  if ((part.length || part) - position.offset > resultLen) {\n    position.offset += resultLen;\n  } else {\n    position.index++;\n    position.offset = 0;\n  }\n\n  return result;\n};\n\n// Append a part to the end of a document\nvar appendDoc = type._appendDoc = function(doc, p) {\n  if (p === 0 || p === '') return;\n\n  if (typeof p === 'string') {\n    doc.charLength += p.length;\n    doc.totalLength += p.length;\n  } else {\n    doc.totalLength += p;\n  }\n\n  var data = doc.data;\n  if (data.length === 0) {\n    data.push(p);\n  } else if (typeof data[data.length - 1] === typeof p) {\n    data[data.length - 1] += p;\n  } else {\n    data.push(p);\n  }\n};\n\n// Apply the op to the document. The document is not modified in the process.\ntype.apply = function(doc, op) {\n  if (doc.totalLength == null || doc.charLength == null || !isArray(doc.data)) {\n    throw new Error('Snapshot is invalid');\n  }\n  checkOp(op);\n\n  var newDoc = type.create();\n  var position = {index: 0, offset: 0};\n\n  for (var i = 0; i < op.length; i++) {\n    var component = op[i];\n    var remainder, part;\n\n    if (typeof component == 'number') { // Skip\n      remainder = component;\n      while (remainder > 0) {\n        part = takeDoc(doc, position, remainder);\n        appendDoc(newDoc, part);\n        remainder -= part.length || part;\n      }\n\n    } else if (component.i !== undefined) { // Insert\n      appendDoc(newDoc, component.i);\n\n    } else if (component.d !== undefined) { // Delete\n      remainder = component.d;\n      while (remainder > 0) {\n        part = takeDoc(doc, position, remainder);\n        remainder -= part.length || part;\n      }\n      appendDoc(newDoc, component.d);\n    }\n  }\n  return newDoc;\n};\n\n// Append an op component to the end of the specified op.  Exported for the\n// randomOpGenerator.\nvar append = type._append = function(op, component) {\n  var last;\n\n  if (component === 0 || component.i === '' || component.i === 0 || component.d === 0) {\n    // Drop the new component.\n  } else if (op.length === 0) {\n    op.push(component);\n  } else {\n    last = op[op.length - 1];\n    if (typeof component == 'number' && typeof last == 'number') {\n      op[op.length - 1] += component;\n    } else if (component.i != null && (last.i != null) && typeof last.i === typeof component.i) {\n      last.i += component.i;\n    } else if (component.d != null && (last.d != null)) {\n      last.d += component.d;\n    } else {\n      op.push(component);\n    }\n  }\n};\n\n// Makes 2 functions for taking components from the start of an op, and for\n// peeking at the next op that could be taken.\nvar makeTake = function(op) {\n  // The index of the next component to take\n  var index = 0;\n  // The offset into the component\n  var offset = 0;\n\n  var take = function(maxlength, insertsIndivisible) {\n    if (index === op.length) return null;\n    var e = op[index];\n    var current;\n    var result;\n\n    // if the current element is a skip, an insert of a number or a delete\n    if (typeof (current = e) == 'number' || typeof (current = e.i) == 'number' || (current = e.d) != null) {\n      var c;\n      if ((maxlength == null) || current - offset <= maxlength || (insertsIndivisible && e.i != null)) {\n        // Return the rest of the current element.\n        c = current - offset;\n        ++index;\n        offset = 0;\n      } else {\n        offset += maxlength;\n        c = maxlength;\n      }\n\n      // Package the component back up.\n      if (e.i != null) {\n        return {i: c};\n      } else if (e.d != null) {\n        return {d: c};\n      } else {\n        return c;\n      }\n    } else { // Insert of a string.\n      if ((maxlength == null) || e.i.length - offset <= maxlength || insertsIndivisible) {\n        result = {i: e.i.slice(offset)};\n        ++index;\n        offset = 0;\n      } else {\n        result = {i: e.i.slice(offset, offset + maxlength)};\n        offset += maxlength;\n      }\n      return result;\n    }\n  };\n\n  var peekType = function() {return op[index];};\n  return [take, peekType];\n};\n\n// Find and return the length of an op component\nvar componentLength = function(component) {\n  if (typeof component === 'number') {\n    return component;\n  } else if (typeof component.i === 'string') {\n    return component.i.length;\n  } else {\n    return component.d || component.i;\n  }\n};\n\n// Normalize an op, removing all empty skips and empty inserts / deletes.\n// Concatenate adjacent inserts and deletes.\ntype.normalize = function(op) {\n  var newOp = [];\n  for (var i = 0; i < op.length; i++) {\n    append(newOp, op[i]);\n  }\n  return newOp;\n};\n\n// This is a helper method to transform and prune. goForwards is true for transform, false for prune.\nvar transformer = function(op, otherOp, goForwards, side) {\n  checkOp(op);\n  checkOp(otherOp);\n\n  var newOp = [];\n\n  var fns = makeTake(op),\n      take = fns[0],\n      peek = fns[1];\n\n  for (var i = 0; i < otherOp.length; i++) {\n    var component = otherOp[i];\n    var len = componentLength(component);\n    var chunk;\n\n    if (component.i != null) { // Insert text or tombs\n      if (goForwards) { // Transform - insert skips over deleted parts.\n        if (side === 'left') {\n          // The left side insert should go first.\n          var next;\n          while ((next = peek()) && next.i != null) {\n            append(newOp, take());\n          }\n        }\n        // In any case, skip the inserted text.\n        append(newOp, len);\n\n      } else { // Prune. Remove skips for inserts.\n        while (len > 0) {\n          chunk = take(len, true);\n\n          // The chunk will be null if we run out of components in the other op.\n          if (chunk === null) throw new Error('The transformed op is invalid');\n          if (chunk.d != null)\n            throw new Error('The transformed op deletes locally inserted characters - it cannot be purged of the insert.');\n\n          if (typeof chunk == 'number')\n            len -= chunk;\n          else\n            append(newOp, chunk);\n        }\n      }\n    } else { // Skips or deletes.\n      while (len > 0) {\n        chunk = take(len, true);\n        if (chunk === null) throw new Error('The op traverses more elements than the document has');\n\n        append(newOp, chunk);\n        if (!chunk.i) len -= componentLength(chunk);\n      }\n    }\n  }\n\n  // Append extras from op1.\n  var component;\n  while ((component = take())) {\n    if (component.i === undefined) {\n      throw new Error(\"Remaining fragments in the op: \" + component);\n    }\n    append(newOp, component);\n  }\n  return newOp;\n};\n\n// transform op1 by op2. Return transformed version of op1. op1 and op2 are\n// unchanged by transform. Side should be 'left' or 'right', depending on if\n// op1.id <> op2.id.\n//\n// 'left' == client op for ShareJS.\ntype.transform = function(op, otherOp, side) {\n  if (side != 'left' && side != 'right')\n    throw new Error(\"side (\" + side + \") should be 'left' or 'right'\");\n\n  return transformer(op, otherOp, true, side);\n};\n\ntype.prune = function(op, otherOp) {\n  return transformer(op, otherOp, false);\n};\n\ntype.compose = function(op1, op2) {\n  //var chunk, chunkLength, component, length, result, take, _, _i, _len, _ref;\n  if (op1 == null) return op2;\n\n  checkOp(op1);\n  checkOp(op2);\n\n  var result = [];\n  var take = makeTake(op1)[0];\n  var component;\n\n  for (var i = 0; i < op2.length; i++) {\n    component = op2[i];\n    var len, chunk;\n\n    if (typeof component === 'number') { // Skip\n      // Just copy from op1.\n      len = component;\n      while (len > 0) {\n        chunk = take(len);\n        if (chunk === null)\n          throw new Error('The op traverses more elements than the document has');\n\n        append(result, chunk);\n        len -= componentLength(chunk);\n      }\n\n    } else if (component.i !== undefined) { // Insert\n      append(result, {i: component.i});\n\n    } else { // Delete\n      len = component.d;\n      while (len > 0) {\n        chunk = take(len);\n        if (chunk === null)\n          throw new Error('The op traverses more elements than the document has');\n\n        var chunkLength = componentLength(chunk);\n\n        if (chunk.i !== undefined)\n          append(result, {i: chunkLength});\n        else\n          append(result, {d: chunkLength});\n\n        len -= chunkLength;\n      }\n    }\n  }\n\n  // Append extras from op1.\n  while ((component = take())) {\n    if (component.i === undefined) {\n      throw new Error(\"Remaining fragments in op1: \" + component);\n    }\n    append(result, component);\n  }\n  return result;\n};\n\n","/* Text OT!\n *\n * This is an OT implementation for text. It is the standard implementation of\n * text used by ShareJS.\n *\n * This type is composable but non-invertable. Its similar to ShareJS's old\n * text-composable type, but its not invertable and its very similar to the\n * text-tp2 implementation but it doesn't support tombstones or purging.\n *\n * Ops are lists of components which iterate over the document.\n * Components are either:\n *   A number N: Skip N characters in the original document\n *   \"str\"     : Insert \"str\" at the current position in the document\n *   {d:N}     : Delete N characters at the current position in the document\n *\n * Eg: [3, 'hi', 5, {d:8}]\n *\n * The operation does not have to skip the last characters in the document.\n *\n * Snapshots are strings.\n *\n * Cursors are either a single number (which is the cursor position) or a pair of\n * [anchor, focus] (aka [start, end]). Be aware that end can be before start.\n */\n\n/** @module text */\n\nexports.name = 'text';\nexports.uri = 'http://sharejs.org/types/textv1';\n\n/** Create a new text snapshot.\n *\n * @param {string} initial - initial snapshot data. Optional. Defaults to ''.\n */\nexports.create = function(initial) {\n  if ((initial != null) && typeof initial !== 'string') {\n    throw Error('Initial data must be a string');\n  }\n  return initial || '';\n};\n\nvar isArray = Array.isArray || function(obj) {\n  return Object.prototype.toString.call(obj) === \"[object Array]\";\n};\n\n/** Check the operation is valid. Throws if not valid. */\nvar checkOp = function(op) {\n  if (!isArray(op)) throw Error('Op must be an array of components');\n\n  var last = null;\n  for (var i = 0; i < op.length; i++) {\n    var c = op[i];\n    switch (typeof c) {\n      case 'object':\n        // The only valid objects are {d:X} for +ive values of X.\n        if (!(typeof c.d === 'number' && c.d > 0)) throw Error('Object components must be deletes of size > 0');\n        break;\n      case 'string':\n        // Strings are inserts.\n        if (!(c.length > 0)) throw Error('Inserts cannot be empty');\n        break;\n      case 'number':\n        // Numbers must be skips. They have to be +ive numbers.\n        if (!(c > 0)) throw Error('Skip components must be >0');\n        if (typeof last === 'number') throw Error('Adjacent skip components should be combined');\n        break;\n    }\n    last = c;\n  }\n\n  if (typeof last === 'number') throw Error('Op has a trailing skip');\n};\n\n/** Check that the given selection range is valid. */\nvar checkSelection = function(selection) {\n  // This may throw from simply inspecting selection[0] / selection[1]. Thats\n  // sort of ok, though it'll generate the wrong message.\n  if (typeof selection !== 'number'\n      && (typeof selection[0] !== 'number' || typeof selection[1] !== 'number'))\n    throw Error('Invalid selection');\n};\n\n/** Make a function that appends to the given operation. */\nvar makeAppend = function(op) {\n  return function(component) {\n    if (!component || component.d === 0) {\n      // The component is a no-op. Ignore!\n \n    } else if (op.length === 0) {\n      return op.push(component);\n\n    } else if (typeof component === typeof op[op.length - 1]) {\n      if (typeof component === 'object') {\n        return op[op.length - 1].d += component.d;\n      } else {\n        return op[op.length - 1] += component;\n      }\n    } else {\n      return op.push(component);\n    }\n  };\n};\n\n/** Makes and returns utility functions take and peek. */\nvar makeTake = function(op) {\n  // The index of the next component to take\n  var idx = 0;\n  // The offset into the component\n  var offset = 0;\n\n  // Take up to length n from the front of op. If n is -1, take the entire next\n  // op component. If indivisableField == 'd', delete components won't be separated.\n  // If indivisableField == 'i', insert components won't be separated.\n  var take = function(n, indivisableField) {\n    // We're at the end of the operation. The op has skips, forever. Infinity\n    // might make more sense than null here.\n    if (idx === op.length)\n      return n === -1 ? null : n;\n\n    var part;\n    var c = op[idx];\n    if (typeof c === 'number') {\n      // Skip\n      if (n === -1 || c - offset <= n) {\n        part = c - offset;\n        ++idx;\n        offset = 0;\n        return part;\n      } else {\n        offset += n;\n        return n;\n      }\n    } else if (typeof c === 'string') {\n      // Insert\n      if (n === -1 || indivisableField === 'i' || c.length - offset <= n) {\n        part = c.slice(offset);\n        ++idx;\n        offset = 0;\n        return part;\n      } else {\n        part = c.slice(offset, offset + n);\n        offset += n;\n        return part;\n      }\n    } else {\n      // Delete\n      if (n === -1 || indivisableField === 'd' || c.d - offset <= n) {\n        part = {d: c.d - offset};\n        ++idx;\n        offset = 0;\n        return part;\n      } else {\n        offset += n;\n        return {d: n};\n      }\n    }\n  };\n\n  // Peek at the next op that will be returned.\n  var peekType = function() { return op[idx]; };\n\n  return [take, peekType];\n};\n\n/** Get the length of a component */\nvar componentLength = function(c) {\n  // Uglify will compress this down into a ternary\n  if (typeof c === 'number') {\n    return c;\n  } else {\n    return c.length || c.d;\n  }\n};\n\n/** Trim any excess skips from the end of an operation.\n *\n * There should only be at most one, because the operation was made with append.\n */\nvar trim = function(op) {\n  if (op.length > 0 && typeof op[op.length - 1] === 'number') {\n    op.pop();\n  }\n  return op;\n};\n\nexports.normalize = function(op) {\n  var newOp = [];\n  var append = makeAppend(newOp);\n  for (var i = 0; i < op.length; i++) {\n    append(op[i]);\n  }\n  return trim(newOp);\n};\n\n/** Apply an operation to a document snapshot */\nexports.apply = function(str, op) {\n  if (typeof str !== 'string') {\n    throw Error('Snapshot should be a string');\n  }\n  checkOp(op);\n\n  // We'll gather the new document here and join at the end.\n  var newDoc = [];\n\n  for (var i = 0; i < op.length; i++) {\n    var component = op[i];\n    switch (typeof component) {\n      case 'number':\n        if (component > str.length) throw Error('The op is too long for this document');\n\n        newDoc.push(str.slice(0, component));\n        // This might be slow for big strings. Consider storing the offset in\n        // str instead of rewriting it each time.\n        str = str.slice(component);\n        break;\n      case 'string':\n        newDoc.push(component);\n        break;\n      case 'object':\n        str = str.slice(component.d);\n        break;\n    }\n  }\n\n  return newDoc.join('') + str;\n};\n\n/** Transform op by otherOp.\n *\n * @param op - The operation to transform\n * @param otherOp - Operation to transform it by\n * @param side - Either 'left' or 'right'\n */\nexports.transform = function(op, otherOp, side) {\n  if (side != 'left' && side != 'right') throw Error(\"side (\" + side + \") must be 'left' or 'right'\");\n\n  checkOp(op);\n  checkOp(otherOp);\n\n  var newOp = [];\n  var append = makeAppend(newOp);\n\n  var _fns = makeTake(op);\n  var take = _fns[0],\n      peek = _fns[1];\n\n  for (var i = 0; i < otherOp.length; i++) {\n    var component = otherOp[i];\n\n    var length, chunk;\n    switch (typeof component) {\n      case 'number': // Skip\n        length = component;\n        while (length > 0) {\n          chunk = take(length, 'i');\n          append(chunk);\n          if (typeof chunk !== 'string') {\n            length -= componentLength(chunk);\n          }\n        }\n        break;\n\n      case 'string': // Insert\n        if (side === 'left') {\n          // The left insert should go first.\n          if (typeof peek() === 'string') {\n            append(take(-1));\n          }\n        }\n\n        // Otherwise skip the inserted text.\n        append(component.length);\n        break;\n\n      case 'object': // Delete\n        length = component.d;\n        while (length > 0) {\n          chunk = take(length, 'i');\n          switch (typeof chunk) {\n            case 'number':\n              length -= chunk;\n              break;\n            case 'string':\n              append(chunk);\n              break;\n            case 'object':\n              // The delete is unnecessary now - the text has already been deleted.\n              length -= chunk.d;\n          }\n        }\n        break;\n    }\n  }\n  \n  // Append any extra data in op1.\n  while ((component = take(-1)))\n    append(component);\n  \n  return trim(newOp);\n};\n\n/** Compose op1 and op2 together and return the result */\nexports.compose = function(op1, op2) {\n  checkOp(op1);\n  checkOp(op2);\n\n  var result = [];\n  var append = makeAppend(result);\n  var take = makeTake(op1)[0];\n\n  for (var i = 0; i < op2.length; i++) {\n    var component = op2[i];\n    var length, chunk;\n    switch (typeof component) {\n      case 'number': // Skip\n        length = component;\n        while (length > 0) {\n          chunk = take(length, 'd');\n          append(chunk);\n          if (typeof chunk !== 'object') {\n            length -= componentLength(chunk);\n          }\n        }\n        break;\n\n      case 'string': // Insert\n        append(component);\n        break;\n\n      case 'object': // Delete\n        length = component.d;\n\n        while (length > 0) {\n          chunk = take(length, 'd');\n\n          switch (typeof chunk) {\n            case 'number':\n              append({d: chunk});\n              length -= chunk;\n              break;\n            case 'string':\n              length -= chunk.length;\n              break;\n            case 'object':\n              append(chunk);\n          }\n        }\n        break;\n    }\n  }\n\n  while ((component = take(-1)))\n    append(component);\n\n  return trim(result);\n};\n\n\nvar transformPosition = function(cursor, op) {\n  var pos = 0;\n  for (var i = 0; i < op.length; i++) {\n    var c = op[i];\n    if (cursor <= pos) break;\n\n    // I could actually use the op_iter stuff above - but I think its simpler\n    // like this.\n    switch (typeof c) {\n      case 'number':\n        if (cursor <= pos + c)\n          return cursor;\n        pos += c;\n        break;\n\n      case 'string':\n        pos += c.length;\n        cursor += c.length;\n        break;\n\n      case 'object':\n        cursor -= Math.min(c.d, cursor - pos);\n        break;\n    }\n  }\n  return cursor;\n};\n\nexports.transformSelection = function(selection, op, isOwnOp) {\n  var pos = 0;\n  if (isOwnOp) {\n    // Just track the position. We'll teleport the cursor to the end anyway.\n    // This works because text ops don't have any trailing skips at the end - so the last\n    // component is the last thing.\n    for (var i = 0; i < op.length; i++) {\n      var c = op[i];\n      switch (typeof c) {\n        case 'number':\n          pos += c;\n          break;\n        case 'string':\n          pos += c.length;\n          break;\n        // Just eat deletes.\n      }\n    }\n    return pos;\n  } else {\n    return typeof selection === 'number' ?\n      transformPosition(selection, op) : [transformPosition(selection[0], op), transformPosition(selection[1], op)];\n  }\n};\n\n// DEPRECATED\nexports.transformCursor = exports.transformSelection;\n\nexports.selectionEq = function(c1, c2) {\n  if (c1[0] != null && c1[0] === c1[1]) c1 = c1[0];\n  if (c2[0] != null && c2[0] === c2[1]) c2 = c2[0];\n  return c1 === c2 || (c1[0] != null && c2[0] != null && c1[0] === c2[0] && c1[1] == c2[1]);\n};\n\n","// DEPRECATED!\n//\n// This type works, but is not exported, and will be removed in a future version of this library.\n\n\n// A simple text implementation\n//\n// Operations are lists of components.\n// Each component either inserts or deletes at a specified position in the document.\n//\n// Components are either:\n//  {i:'str', p:100}: Insert 'str' at position 100 in the document\n//  {d:'str', p:100}: Delete 'str' at position 100 in the document\n//\n// Components in an operation are executed sequentially, so the position of components\n// assumes previous components have already executed.\n//\n// Eg: This op:\n//   [{i:'abc', p:0}]\n// is equivalent to this op:\n//   [{i:'a', p:0}, {i:'b', p:1}, {i:'c', p:2}]\n\n// NOTE: The global scope here is shared with other sharejs files when built with closure.\n// Be careful what ends up in your namespace.\n\nvar text = module.exports = {\n  name: 'text0',\n  uri: 'http://sharejs.org/types/textv0',\n  create: function(initial) {\n    if ((initial != null) && typeof initial !== 'string') {\n      throw new Error('Initial data must be a string');\n    }\n    return initial || '';\n  }\n};\n\n/** Insert s2 into s1 at pos. */\nvar strInject = function(s1, pos, s2) {\n  return s1.slice(0, pos) + s2 + s1.slice(pos);\n};\n\n/** Check that an operation component is valid. Throws if its invalid. */\nvar checkValidComponent = function(c) {\n  if (typeof c.p !== 'number')\n    throw new Error('component missing position field');\n\n  if ((typeof c.i === 'string') === (typeof c.d === 'string'))\n    throw new Error('component needs an i or d field');\n\n  if (c.p < 0)\n    throw new Error('position cannot be negative');\n};\n\n/** Check that an operation is valid */\nvar checkValidOp = function(op) {\n  for (var i = 0; i < op.length; i++) {\n    checkValidComponent(op[i]);\n  }\n};\n\n/** Apply op to snapshot */\ntext.apply = function(snapshot, op) {\n  var deleted;\n\n  checkValidOp(op);\n  for (var i = 0; i < op.length; i++) {\n    var component = op[i];\n    if (component.i != null) {\n      snapshot = strInject(snapshot, component.p, component.i);\n    } else {\n      deleted = snapshot.slice(component.p, component.p + component.d.length);\n      if (component.d !== deleted)\n        throw new Error(\"Delete component '\" + component.d + \"' does not match deleted text '\" + deleted + \"'\");\n\n      snapshot = snapshot.slice(0, component.p) + snapshot.slice(component.p + component.d.length);\n    }\n  }\n  return snapshot;\n};\n\n/**\n * Append a component to the end of newOp. Exported for use by the random op\n * generator and the JSON0 type.\n */\nvar append = text._append = function(newOp, c) {\n  if (c.i === '' || c.d === '') return;\n\n  if (newOp.length === 0) {\n    newOp.push(c);\n  } else {\n    var last = newOp[newOp.length - 1];\n\n    if (last.i != null && c.i != null && last.p <= c.p && c.p <= last.p + last.i.length) {\n      // Compose the insert into the previous insert\n      newOp[newOp.length - 1] = {i:strInject(last.i, c.p - last.p, c.i), p:last.p};\n\n    } else if (last.d != null && c.d != null && c.p <= last.p && last.p <= c.p + c.d.length) {\n      // Compose the deletes together\n      newOp[newOp.length - 1] = {d:strInject(c.d, last.p - c.p, last.d), p:c.p};\n\n    } else {\n      newOp.push(c);\n    }\n  }\n};\n\n/** Compose op1 and op2 together */\ntext.compose = function(op1, op2) {\n  checkValidOp(op1);\n  checkValidOp(op2);\n  var newOp = op1.slice();\n  for (var i = 0; i < op2.length; i++) {\n    append(newOp, op2[i]);\n  }\n  return newOp;\n};\n\n/** Clean up an op */\ntext.normalize = function(op) {\n  var newOp = [];\n\n  // Normalize should allow ops which are a single (unwrapped) component:\n  // {i:'asdf', p:23}.\n  // There's no good way to test if something is an array:\n  // http://perfectionkills.com/instanceof-considered-harmful-or-how-to-write-a-robust-isarray/\n  // so this is probably the least bad solution.\n  if (op.i != null || op.p != null) op = [op];\n\n  for (var i = 0; i < op.length; i++) {\n    var c = op[i];\n    if (c.p == null) c.p = 0;\n\n    append(newOp, c);\n  }\n\n  return newOp;\n};\n\n// This helper method transforms a position by an op component.\n//\n// If c is an insert, insertAfter specifies whether the transform\n// is pushed after the insert (true) or before it (false).\n//\n// insertAfter is optional for deletes.\nvar transformPosition = function(pos, c, insertAfter) {\n  // This will get collapsed into a giant ternary by uglify.\n  if (c.i != null) {\n    if (c.p < pos || (c.p === pos && insertAfter)) {\n      return pos + c.i.length;\n    } else {\n      return pos;\n    }\n  } else {\n    // I think this could also be written as: Math.min(c.p, Math.min(c.p -\n    // otherC.p, otherC.d.length)) but I think its harder to read that way, and\n    // it compiles using ternary operators anyway so its no slower written like\n    // this.\n    if (pos <= c.p) {\n      return pos;\n    } else if (pos <= c.p + c.d.length) {\n      return c.p;\n    } else {\n      return pos - c.d.length;\n    }\n  }\n};\n\n// Helper method to transform a cursor position as a result of an op.\n//\n// Like transformPosition above, if c is an insert, insertAfter specifies\n// whether the cursor position is pushed after an insert (true) or before it\n// (false).\ntext.transformCursor = function(position, op, side) {\n  var insertAfter = side === 'right';\n  for (var i = 0; i < op.length; i++) {\n    position = transformPosition(position, op[i], insertAfter);\n  }\n\n  return position;\n};\n\n// Transform an op component by another op component. Asymmetric.\n// The result will be appended to destination.\n//\n// exported for use in JSON type\nvar transformComponent = text._tc = function(dest, c, otherC, side) {\n  //var cIntersect, intersectEnd, intersectStart, newC, otherIntersect, s;\n\n  checkValidComponent(c);\n  checkValidComponent(otherC);\n\n  if (c.i != null) {\n    // Insert.\n    append(dest, {i:c.i, p:transformPosition(c.p, otherC, side === 'right')});\n  } else {\n    // Delete\n    if (otherC.i != null) {\n      // Delete vs insert\n      var s = c.d;\n      if (c.p < otherC.p) {\n        append(dest, {d:s.slice(0, otherC.p - c.p), p:c.p});\n        s = s.slice(otherC.p - c.p);\n      }\n      if (s !== '')\n        append(dest, {d: s, p: c.p + otherC.i.length});\n\n    } else {\n      // Delete vs delete\n      if (c.p >= otherC.p + otherC.d.length)\n        append(dest, {d: c.d, p: c.p - otherC.d.length});\n      else if (c.p + c.d.length <= otherC.p)\n        append(dest, c);\n      else {\n        // They overlap somewhere.\n        var newC = {d: '', p: c.p};\n\n        if (c.p < otherC.p)\n          newC.d = c.d.slice(0, otherC.p - c.p);\n\n        if (c.p + c.d.length > otherC.p + otherC.d.length)\n          newC.d += c.d.slice(otherC.p + otherC.d.length - c.p);\n\n        // This is entirely optional - I'm just checking the deleted text in\n        // the two ops matches\n        var intersectStart = Math.max(c.p, otherC.p);\n        var intersectEnd = Math.min(c.p + c.d.length, otherC.p + otherC.d.length);\n        var cIntersect = c.d.slice(intersectStart - c.p, intersectEnd - c.p);\n        var otherIntersect = otherC.d.slice(intersectStart - otherC.p, intersectEnd - otherC.p);\n        if (cIntersect !== otherIntersect)\n          throw new Error('Delete ops delete different text in the same region of the document');\n\n        if (newC.d !== '') {\n          newC.p = transformPosition(newC.p, otherC);\n          append(dest, newC);\n        }\n      }\n    }\n  }\n\n  return dest;\n};\n\nvar invertComponent = function(c) {\n  return (c.i != null) ? {d:c.i, p:c.p} : {i:c.d, p:c.p};\n};\n\n// No need to use append for invert, because the components won't be able to\n// cancel one another.\ntext.invert = function(op) {\n  // Shallow copy & reverse that sucka.\n  op = op.slice().reverse();\n  for (var i = 0; i < op.length; i++) {\n    op[i] = invertComponent(op[i]);\n  }\n  return op;\n};\n\nif (exports._bootstrapTransform) {\n  exports._bootstrapTransform(text, transformComponent, checkValidOp, append);\n} else {\n  require('./helpers')._bootstrapTransform(text, transformComponent, checkValidOp, append);\n}\n\n","derby = require 'derby'\n\napp = module.exports = derby.createApp 'app', __filename\n\nglobal.app = app unless derby.util.isProduction\n\napp.use require 'd-bootstrap'\napp.serverUse module, 'derby-jade'\napp.serverUse module, 'derby-stylus'\n\napp.loadViews __dirname + '/../../views/app'\napp.loadStyles __dirname + '/../../styles/app'\n\napp.get '/', (page) ->\n  page.render 'home'"]}